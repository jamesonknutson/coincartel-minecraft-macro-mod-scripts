//! @mkb-import-begin
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/xFormatNumber
        // Identical to original `formatnumber`, but passes the input_string through `convertENote` before passing it into `formatnumber`.
            // Params:
                // {string} <&input_string>          The Number or String to Format into a Number. If this Number includes Commas, they will be stripped
                //                                   from the string passed to `formatnumber`.
                // {string} [&decimal_precision]     The desired level of precision following the decimal. If omitted or an empty string, will
                //                                   include the amount of decimals included in the <&input_string>. If provided, should be an integer >= 0.
                //                                   If set to 0, will not include a decimal character or trail at all. Providing a value that is incoherent
                //                                   to the level of decimal precision present in the <&input_string> will result in the output being rounded
                //                                   to the desired level of precision.
                // {boolean} [strip_commas=false]    Whether or not to strip commas when formatting the Number. If set to True, and [&decimal_precision]
                //                                   is set to "0", this Function will return a valid Integer.
            // Returns the result of the `formatnumber` expression.
            // Examples:
                // Converting a formatted string Number to a valid Integer:
                    //    &input_string      = "1009.0131";
                    //    &decimal_precision = "0";
                    //    strip_commas       = true;
                    //    #output_integer    = xFormatNumber(%&input_string%,%&decimal_precision%,%strip_commas%);
                // Converting a valid Integer to a formatted (comma split) string:
                    //    &input_string      = "10000";
                    //    &decimal_precision = "";
                    //    strip_commas       = false;
                    //    &output_string     = xFormatNumber(%&input_string%,%&decimal_precision%,%strip_commas%);
        function xFormatNumber(&input_string,&decimal_precision,strip_commas=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:315
            &return_string = replace(&input_string,",");
            &return_string = convertENote(%&return_string%);
            &return_string = formatnumber(%&return_string%,%&decimal_precision%,%strip_commas%);
            return(%&return_string%);
        endfunction;
    // debug/index/debug_log
        // Logs a message to chat if debug is enabled.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_log(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:30
            // &matcher     = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement = "&$1";
            // &string      = regexreplace(&string,%&matcher%,%&replacement%);
            &out_string  = "&7%&script_debug_name%&7: %&string%";
            if(%debug_enabled%);
                log(%&out_string%);
            endif;
            return(%&out_string%);
        endfunction;
    // string/index/xEval
        // Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&expression>              The arithmetic expression to evaluate with `eval`.
                // {boolean} [coerce_integer=false]    If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
            // Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
        function xEval(&expression,coerce_integer=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:276
            debug              = false;
            &script_debug_name = "&9xEval&7";
            debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
            &return_string     = eval(%&expression%);
            debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
            &return_string     = convertENote(%&return_string%);
            debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
            if(%coerce_integer%);
                debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
                &return_string = formatnumber(%&return_string%,0,true);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
            return(%&return_string%);
        endfunction;
    // string/index/convertToMetric
        // Takes an input of a Number String and formats it into a Metric String (K, M, B, or T as suffix).
            // Params:
                // {string} <&convert_string>         The Number String to convert.
                // {number} [#decimal_precision=1]    Amount of sig. figs to round the conversion off to. If set to <= -1, will just
                //                                    format the number as-is (it will keep as many decimal places as it had in the first place).
            // Returns a String.
            // Example:
                //    &metric_string = convertToMetric("151091.501",1);
                //    log(%&metric_string%); // 151.1 K
        function convertToMetric(&convert_string,#decimal_precision=1);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:566
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&9convertToMetric&7";
                debug_log(%debug%,%&script_debug_name%,"called, args are &&convert_string='&e%&convert_string%&7', #decimal_precision=&e%#decimal_precision%");
            endif;
            &metric_chars[] = split(", ","K, M, B, T");
            &metric_ratio[] = split(", ","1000, 1000000, 1000000000, 1000000000000");
            &return_string  = %&convert_string%;
            ifmatches(%&convert_string%,"^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)",&integer_portion,2);
                log("&7matched expression '&d^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)&7' against string ")
                #component_a_len = strlen(%&integer_portion%);
                debug_log(%debug%,%&script_debug_name%,"matched expression '&d^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)&7' against &&convert_string='&e%&convert_string%&7', extracted &&integer_portion='&e%&integer_portion%&7' with length=&e%#component_a_len%&7.");
                #metric_index    = -1;
                foreach(&metric_ratio[],&metric_ratio,#mr);
                    #metric_ratio_len = strlen(%&metric_ratio%);
                    if(%#component_a_len% >= %#metric_ratio_len%);
                        debug_log(%debug%,%&script_debug_name%,"metric_ratio_len=&e%#metric_ratio_len%&7 >= #component_a_len=&e%#component_a_len%&7, setting metric_index=&e%#mr%");
                        #metric_index = %#mr%;
                    endif;
                next;
                
                if(%#metric_index% >= 0);
                    &metric_char   = %&metric_chars[%#metric_index%]%;
                    &metric_ratio  = %&metric_ratio[%#metric_index%]%;
                    &return_string = xEval("%&convert_string% / %&metric_ratio%");
                    if(%#decimal_precision% <= -1);
                        &return_string = xFormatNumber(%&return_string%);
                    else;
                        &return_string = xFormatNumber(%&return_string%,%#decimal_precision%);
                    endif;
                    &return_string = "%&return_string% %&metric_char%";
                endif;
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/convertMetricString
        // Takes an input of a string with metric numbers in it (e.g. '10K, '10.5M', etc) and parses out the metric character
        // then converts the input into a number and returns it. Supports K, M, B, T suffixes.
            // Params:
                // {string} <&metric_string>               The String to Parse
                // {number} [#decimal_precision=-1]        Amount of sig. figs to round the conversion off to. If set to <= -1, will just
                //                                         format the number as-is (it will keep as many decimal places as it had in the first place).
                // {boolean} [format_with_commas=false]    Whether or not to format the conversion with commas every 3 characters.
            // Returns an Empty String if no conversion were able to be done, or a (possibly formatted) Number otherwise.
            // Example:
                //    #converted_units = convertMetricString("10K",2,true);
                //    log(%#converted_units%); // 10,000.00
        function convertMetricString(&metric_string,#decimal_precision=-1,format_with_commas=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:529
            &base_expression = "([\d,.-]+)(?:.*?\b|\B)";
            &metric_chars[]  = split(", ","K, M, B, T");
            &metric_ratio[]  = split(", ","1000, 1000000, 1000000000, 1000000000000");
            &return_string   = "0";
            match_found      = false;
            foreach(&metric_chars[],&metric_char,#mc);
                &metric_expr = "%&base_expression%%&metric_char%";
                ifmatches(%&metric_string%,%&metric_expr%,&amount_units,1);
                    match_found    = true
                    &amount_units  = replace(&amount_units,",");
                    &return_string = xEval("%&return_string% + (%&amount_units% * %&metric_ratio[%#mc%]%)");
                endif;
            next;
            
            if(%match_found%);
                strip_commas = !%format_with_commas%;
                if(%#decimal_precision% <= -1);
                    &return_string = xFormatNumber(%&return_string%,"",%strip_commas%);
                else;
                    &return_string = xFormatNumber(%&return_string%,%#decimal_precision%,%strip_commas%);
                endif;
                return(%&return_string%);
            else;
                return("");
            endif;
        endfunction;
    // string/index/isMetricString
        // Checks if a String is a Metric String
            // Params:
                // {string} <&metric_string>    The String to check for a Metric Suffix (and/or Metric Suffixes)
                //
            // Returns a Boolean indicating whether or not the String is a Metric String
            // Example:
                //    is_metric = isMetricString(%&metric_string%);
        function isMetricString(&metric_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:510
            &base_expression = "([\d,.-]+)(?:.*?\b|\B)(K|M|B|T)";
            ifmatches(%&metric_string%,%&base_expression%);
                return_boolean = true;
            endif;
            return(%return_boolean%);
        endfunction;
    // array/index/miscComparator
        // Evaluates whether <&left> is <&operator> to <&right> (executes a variable comparison). Returns a boolean.
            // Params:
            //        {string} <&left>        The Left Hand side of the Comparison.
            //        {string} <&operator>    The Operator to apply the Condition against each Element with. Has to be one of:
            //                                '==', '!=', '>', '<', '>=', '<=', 'eq', 'ne', 'gte', 'lte', 'gt', or 'lt'. If a
            //                                number comparison operator is used, the values in the Array will be coerced to a
            //                                number so long as the condition is an integer. If the condition is a float value,
            //                                they will be evaluated using float math (eval).
            //        {string} <&right>       The Right Hand side of the Comparison
            //
            // Returns a boolean indicating the outcome of the evaluation.
        function miscComparator(&left,&operator,&right);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:88
            &sign_operators[] = split(", ","==, !=, >=, <=, >, <");
            #sign_op_index    = indexof(&sign_operators[],,%&operator%);
            if(%#sign_op_index% == -1);
                &char_operators[] =    split(", ","eq, ne, gte, lte, gt, lt");
                #char_op_index    = indexof(&char_operators[],,%&operator%);
                if(%#char_op_index% == -1);
                    return(&return_array[]);
                endif;
                
                &operator = %&sign_operators[%#char_op_index%]%;
            endif;
        
            if(%&operator% == "==");
                if(%&left% == %&right%);
                    return_boolean = true;
                endif;
            elseif(&operator% == "!=");
                if(%&left% != %&right%);
                    return_boolean = true;
                endif;
            else;
                ifmatches(%&right%,"^(\d+)$",#right,1);
                    // Doing Integer Evaluation
                    #left := %&left%;
                    if((%&operator% == ">=") && (%#left% >= %#right%));
                        return_boolean = true;
                    elseif((%&operator% == ">") && (%#left% > %#right%));
                        return_boolean = true;
                    elseif((%&operator% == "<=") && (%#left% <= %#right%));
                        return_boolean = true;
                    elseif((%&operator% == "<") && (%#left% < %#right%));
                        return_boolean = true;
                    endif;
                elseifmatches(%&right%,"^[0-9.-]+");
                    // Doing Float Evaluation
                    &float_diff = eval("%&left% - %&right%");
                    ifmatches(%&float_diff%,"^-");
                        // <left> - <right> = negative number, left was less than right
                        if((%&operator% == "<=") || (%&operator% == "<"));
                            return_boolean = true;
                        endif;
                    else;
                        // <left> - <right> = positive or 0, left was greater than or equal to right
                        ifmatches(%&float_diff%,"[0.]+");
                            // <left> - <right> = 0, left was equal to right
                            if((%&operator% == ">=") || (%&operator% == "<="));
                                return_boolean = true;
                            endif;
                        elseif((%&operator% == ">=") || (%&operator% == ">"));
                            // <left> - <right> = greater than 0, left was greater than right
                            return_boolean = true;
                        endif;
                    endif;
                endif;
            endif;
            return(%return_boolean%);
        endfunction;
    // math/index/number
        // Normalizes any type of input Number into the Type.
            // Params:
                // {string} <&number>             The Number to Format. Can be integer, decimal, negative, positive, metric, e-notation, whatever.
                // {string} [...&formatting[]]    The Formatting Options to apply. Settings are provided in '<KEY>: <VALUE>' notation. Valid Options:
                                                //    ['F'|'T'|'S'|'TYPE'|'STYLE'|'FORMAT']:
                                                //        - ['I'|'N'|'INT'|'INTEGER'|'NUM'|'NUMBER']           : Formats the output as an Integer.
                                                //        - ['D'|'F'|'L'|'DECIMAL'|'FLOAT'|'LONG'|'DOUBLE']    : Formats the output as a Decimal Number.
                                                //        - ['E'|'ENOTE'|'EXP'|'EXPONENT']                     : Formats the output in Exponentional Notation.
                                                //        - ['M'|'METRIC']                                     : Formats the output as a Metric Suffixed Number.
                                                //    ['P'|'PLACE'|'PLACES'|'PRECISION'] (Only available if Type is Decimal or Metric or equivalent):
                                                //        - ['S'|'SIG'|'SIGFIG'|'SIGNIFICANT']    : Applies the default amount of Decimal Places (the Sig. Figs in the converted value).
                                                //        - <NUMBER >= 0>                         : Applies <NUMBER> amount of Decimal Places (setting this to 0 is the same as using F: INT, R: ROUND).
                                                //    ['R'|'ROUND'|'ROUNDING'] (Only available if Precision is not 'SIG' or equivalent):
                                                //        - ['R'|'ROUND'|'D'|'DEFAULT'|'STD'|'STANDARD'|'NEAR'|'NEAREST'|'INT'|'NUM'|'INTEGER'|'NUMBER']    : Round using 'ROUND' (towards nearest integer).
                                                //        - ['F'|'FLOOR'|'DOWN'|'D'|'<'|'LESSER'|'LT']                                                      : Round using 'FLOOR' (towards negative infinity).
                                                //        - ['C'|'CEIL'|'CEILING'|'UP'|'>'|'GREATER'|'GT']                                                  : Round using 'CEIL' (towards positive infinity).
                                                //        - ['T'|'TRUNCATE'|'TRUNC']                                                                        : Rounds up or down towards 0
                                                //        - ['N'|'NONE']                                                                                    : Does not round the output.
                                                //    ['C'|'COMMA'|'COMMAS'|'DELIMIT'|'DELIMITER'|'SPACE'|'SPACER']:
                                                //        - <BOOLEAN>          : Enables (or disables) formatting the output with Commas every 3 sig. figs (e.g. 100000 -> 100,000)
                                                //        - <STRING>           : Enables formatting the output with <STRING> as the delimiter every 3 sig. figs
                                                //        - ['N'|'NONE'|'']    : Disables formatting the output with delimiters.
                                                //    The Default Values for each Setting are as follows:
                                                //        FORMAT       : FLOAT
                                                //        PRECISION    : SIGNIFICANT
                                                //        ROUNDING     : NONE
                                                //        DELIMITER    : FALSE
            // Returns the Number specified formatted according to the Rules specified in [...&formatting[]].
            // Example:
                //    &number = number("100,000,000.192");
                //    log("number: %&number%"); // 'number: 100000000.192' (default formatting rules were applied)
        function number(&number="0",...&formatting[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:198
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6mathNumber&7";
                exponent_ready     = false;
                
                // Parse Formatting Options
                if(true);
                    // Wrap Formatting Keys, Valid Values and Default Values
                    if(true);
                        if(true); // Wrap '&opt_format' Formatting Option
                            &valid_formatting_vars[]        = "&opt_format";
                            &valid_formatting_keys[]        = "F|T|S|TYPE|STYLE|FORMAT";
                            &valid_formatting_validation[]  = "";
                            valid_formatting_custom_input[] = false;
                            valid_formatting_def_override[] = false;
                            if(%exponent_ready%);
                                &valid_formatting_vals[] = "INTEGER|I|N|INT|NUM|NUMBER~FLOAT|D|F|L|DECIMAL|LONG|DOUBLE~EXPONENT|E|ENOTE|EXP~METRIC|M";
                                &valid_formatting_expr[] = "INTEGER|r$^[\d]+$~FLOAT|r$^[\d]*\.\d+$~EXPONENT|r$(?:e|\^)";
                            else;
                                &valid_formatting_vals[] = "INTEGER|I|N|INT|NUM|NUMBER~FLOAT|D|F|L|DECIMAL|LONG|DOUBLE~METRIC|M";
                                &valid_formatting_expr[] = "INTEGER|r$^[\d]+$~FLOAT|r$^[\d]*\.\d+$";
                            endif;
                            &opt_format = "FLOAT";
                        endif;
                        
                        if(true); // Wrap '&opt_precision' Formatting Option
                            &valid_formatting_vars[]        = "&opt_precision";
                            &valid_formatting_keys[]        = "P|PLACE|PLACES|PRECISION";
                            &valid_formatting_vals[]        = "SIGNIFICANT|SIGFIG|SIG|S";
                            &valid_formatting_expr[]        = "CUSTOM|r$^\d+$";
                            &valid_formatting_validation[]  = ">= 0";
                            valid_formatting_custom_input[] = false;
                            valid_formatting_def_override[] = false;
                            &opt_precision                  = "SIGNIFICANT";
                        endif;
                        
                        if(true); // Wrap '&opt_rounding' Formatting Option
                            &valid_formatting_vars[]        = "&opt_rounding";
                            &valid_formatting_keys[]        = "ROUNDING|ROUND|R";
                            &valid_formatting_vals[]        = "ROUND|INT|NUM|NUMBER|NEAREST|NEAR|STD|STANDARD|DEFAULT|D|INTEGER|R~FLOOR|F|DOWN|D|<|LESSER|LT~CEIL|CEILING|C|UP|>|GREATER|GT~NONE|N~TRUNCATE|TRUNC|T";
                            &valid_formatting_expr[]        = "";
                            &valid_formatting_validation[]  = "";
                            valid_formatting_custom_input[] = false;
                            valid_formatting_def_override[] = false;
                            &opt_rounding                   = "NONE";
                        endif;
                        
                        if(true); // Wrap '&opt_delimiter' Formatting Option
                            &valid_formatting_vars[]        = "&opt_delimiter";
                            &valid_formatting_keys[]        = "DELIMITER|C|COMMA|COMMAS|DELIMIT|SPACE|SPACER|SPACES|SPACERS|DELIMITERS";
                            &valid_formatting_vals[]        = "TRUE|1~FALSE|0~NONE|N"
                            &valid_formatting_expr[]        = "CUSTOM|r$^.+$";
                            &valid_formatting_validation[]  = "";
                            valid_formatting_custom_input[] = false;
                            valid_formatting_def_override[] = false;
                            &opt_delimiter                  = "false";
                        endif;
                    endif;
                    
                    // Parse Options
                    if(true);
                        #formatting_sz = arraysize(&formatting[]);
                        if(%#formatting_sz% >= 1);
                            foreach(&formatting[],&formatting,#f);
                                ifmatches(%&formatting%,"^(.*?):\s*?(.*)$");
                                    match(%&formatting%,"^(.*?):\s*?(.*)$",{&custom_key,&custom_val});
                                    &check_key_index_for = ucase(%&custom_key%);
                                    &check_val_index_for = ucase(%&custom_val%);
                                    foreach(&valid_formatting_keys[],&valid_formatting_keys_str,#vfk);
                                        if(!%valid_formatting_def_override[%#vfk%]%);
                                            &valid_formatting_keys_arr[] = split("|",%&valid_formatting_keys_str%);
                                            #check_key_index_for         = indexof(&valid_formatting_keys_arr[],,%&check_key_index_for%);
                                            debug_log(%debug%,%&script_debug_name%,"checking key for '&d%&check_key_index_for%&7' index is '&e%#check_key_index_for%&7'.");
                                            if(%#check_key_index_for% != -1);
                                                &valid_formatting_val_types_arrs[] = split("~",%&valid_formatting_vals[%#vfk%]%);
                                                foreach(&valid_formatting_val_types_arrs[],&valid_formatting_val_type_str,#vfvt);
                                                    &valid_formatting_val_types_arr[] = split("|",%&valid_formatting_val_type_str%);
                                                    #check_val_index_for              = indexof(&valid_formatting_val_types_arr[],,%&check_val_index_for%);
                                                    debug_log(%debug%,%&script_debug_name%,"checking val index for '&d%&check_val_index_for%&7' index is '&e%#check_val_index_for%&7'.");
                                                    if(%#check_val_index_for% != -1);
                                                        &set_var = %&valid_formatting_vars[%#vfk%]%;
                                                        &set_val = %&valid_formatting_val_types_arr[0]%;
                                                        debug_log(%debug%,%&script_debug_name%,"setting value of &%&set_var%='&e%&set_val%&7'");
                                                        set(%&set_var%,%&set_val%);
                                                        set(valid_formatting_def_override[%#vfk%],true);
                                                        break;
                                                    endif;
                                                next;
                                                
                                                // If we found a match for the Key, but not for the Value, check to see if this Option allows Custom Input.
                                                // If it does, check if the provided Value passes the Regular Expression Validation, and then if this Option
                                                // also has a further Validation Check, ensure it passes that further Validation Check as well.
                                                if((!%valid_formatting_def_override[%#vfk%]%) && (%&valid_formatting_expr[%#vfk%]% != ""));
                                                    &input_validation_expr_groups[]      = split("~",%&valid_formatting_expr[%#vfk%]%);
                                                    &input_validation_expr_validations[] = split("~",%&valid_formatting_validation[%#vfk%]%);
                                                    input_passes_validation              = false;
                                                    foreach(&input_validation_tests[],&input_validation_test_string,#ivt);
                                                        ifmatches(%&input_validation_test_string%,"^(.+?)\|r\$(.+)$");
                                                            match(%&input_validation_test_string%,"^(.+?)\|r\$(.+)$",{&matched_value,&matched_expr});
                                                            ifmatches(%&custom_val%,%&matched_expr%);
                                                                input_passes_validation = true;
                                                                if(%&input_validation_expr_validations[%#ivt%]% != "");
                                                                    &validation_params[]    = split(" ",%&input_validation_expr_validations[%#ivt%]%);
                                                                    &validation_op          = %&validation_params[0]%;
                                                                    &validation_rhs         = %&validation_params[1]%;
                                                                    input_passes_validation = miscComparator(%&custom_val%,%&validation_op%,%&validation_rhs%);
                                                                endif;
                                                                
                                                                if(%input_passes_validation%);
                                                                    &set_var = %&valid_formatting_vars[%#vfk%]%;
                                                                    &set_val = ucase(%&matched_value%);
                                                                    if(%&set_val% == "CUSTOM");
                                                                        &set_val = %&custom_val%;
                                                                        set(valid_formatting_custom_input[%#vfk%],true);
                                                                    endif;
                                                                    set(%&set_var%,%&set_val%);
                                                                    set(valid_formatting_def_override[%#vfk%],true);
                                                                    debug_log(%debug%,%&script_debug_name%,"set value of &%&set_var%='&e%&set_val%&7'");
                                                                    break;
                                                                endif;
                                                            endif;
                                                        endif;
                                                    next;
                                                endif;
                                                
                                                if(%valid_formatting_def_override[%#vfk%]%);
                                                    break;
                                                endif;
                                            endif;
                                        endif;
                                    next;
                                endif;
                                
                                #non_overriden_index = indexof(valid_formatting_def_override[],,false);
                                if(%#non_overriden_index% == -1);
                                    break;
                                endif;
                            next;
                        endif;
                    endif;
                endif;
            endif;
            
            // Parse the Number into Standardized Format.
            if(true);
                ifnotmatches(%&number%,"\d");
                    &number = "0";
                endif;
                
                &read_number = replace(&number,",");
                ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                    &read_number = convertENote(%&number%);
                else;
                    &read_number = %&number%;
                endif;
                debug_log(%debug%,%&script_debug_name%,"Conversion of &&number (&5'%&number%&7') from Exp. Notation to Decimal returned &&read_number ('&d%&read_number%&7').");
                
                is_metric = isMetricString(%&read_number%);
                if(%is_metric%);
                    &before_metric = %&read_number%;
                    &read_number   = convertMetricString(%&read_number%,"-1");
                    ifmatches(%&read_number%,"^([\d.-]+)\.0*$",&first_portion,1);
                        debug_log(%debug%,%&script_debug_name%,"Conversion of &&read_number ('&5%&before_metric%&7') from Metric returned insignificant digits, cutting off (setting &&read_number to: '&e%&first_portion%&7' from '&d%&read_number%&7').");
                        &read_number = %&first_portion%;
                    endif;
                    debug_log(%debug%,%&script_debug_name%,"Conversion of &&read_number ('&5%&before_metric%&7') from Metric returned '&d%&read_number%&7'.");
                elseif(%debug%);
                    debug_log(%debug%,%&script_debug_name%,"&&read_number ('&5%&read_number%&7') was not classified as being a Metric String.");
                endif;
                
                if(%debug%);
                    debug_log(%debug%,%&script_debug_name%,"Formatting Input Number '&d%&number%&7' (standardized: '&d%&read_number%&7')...");
                    &vars[] = split(" ","&number &read_number &opt_format &opt_precision &opt_rounding &opt_delimiter");
                    foreach(&vars[],&var,#v);
                        &val    = "%%&var%%";
                        &logvar = regexreplace(&var,"(?<!&)(&[\w])","&$1");
                        &logval = regexreplace(&val,"(?<!&)(&[\w])","&$1");
                        debug_log(%debug%,%&script_debug_name%,"%#v% > %&logvar%: '&d%&logval%&7'.");
                    next;
                endif;
                
                // Apply the specified Rounding Option as defined in '&opt_rounding'
                if(true);
                    &before_round = %&read_number%;
                    if(%&opt_rounding% == "TRUNCATE");
                        debug_log(%debug%,%&script_debug_name%,"Truncating &&read_number ('&5%&before_round%&7') by cutting off all decimals.");
                        ifmatches(%&read_number%,"^([\d-]+)\.",&truncated_number,1);
                            &read_number = %&truncated_number%;
                            debug_log(%debug%,%&script_debug_name%,"Truncated &&read_number ('&5%&before_round%&7') to: '&d%&read_number%&7'.");
                        else;
                            debug_log(%debug%,%&script_debug_name%,"No decimal points to truncate in &&read_number ('&5%&before_round%&7').");
                        endif;
                    elseif(%&opt_rounding% != "NONE");
                        &read_number = xEval("%&opt_rounding%(%&read_number%)");
                        debug_log(%debug%,%&script_debug_name%,"Rounding &&read_number ('&5%&before_round%&7') with Method: '&e%&opt_rounding%&7' returned: &d'%&read_number%&7'.");
                    else;
                        debug_log(%debug%,%&script_debug_name%,"Not rounding &&read_number ('&5%&before_round%&7') at all, Rounding Method (&&opt_rounding: '&e%&opt_rounding%&7') is set to 'NONE'.");
                    endif;
                endif;
                
                // Apply the specified Formatting Option as defined in '&opt_format'
                if(true);
                    &before_formatting = %&read_number%;
                    
                    // Figure out the Formatting Rules to pass to xFormatNumber
                    if(true);
                        // Figure out the Decimal Places to include in the Result (if any)
                        if(true);
                            &format_precision = "0";
                            if(%&opt_format% != "INTEGER");
                                &format_precision = "";
                                #precision_index  = indexof(&valid_formatting_vars[],,"&opt_precision");
                                custom_precision  = %valid_formatting_custom_input[%#precision_index%]%;
                                if(%custom_precision%);
                                    &format_precision = %&opt_precision%;
                                endif;
                            endif;
                        endif;
                        
                        // Figure out the Delimiter to Use in the Result (if any)
                        if(true);
                            if((%&opt_format% != "EXPONENT") && (&opt_format% != "METRIC"));
                                opt_delimiter    := %&opt_delimiter%;
                                #delimiter_index  = indexof(&valid_formatting_vars[],,"&opt_delimiter");
                                custom_delimiter  = %valid_formatting_custom_input[%#delimiter_index%]%;
                                use_delimiter     = ((%custom_delimiter%) || (%opt_delimiter%));
                            endif;
                            exclude_commas = !%use_delimiter%;
                        endif;
                        
                        // Format the Number using xFormatNumber
                        if(true);
                            &before_xformat      = %&read_number%;
                            &formatted_number    = xFormatNumber(%&read_number%,%&format_precision%,false);
                            &pure_number         = replace(&formatted_number,",");
                            debug_log(%debug%,%&script_debug_name%,"Calling &bxFormatNumber&7 on &&read_number ('&5%&before_xformat%&7') returned '&d%&formatted_number%&7' (called &bxFormatNumber&7 with args: precision: '&e%&format_precision%&7', exclude_commas: '&cfalse&7'). Comma Stripped version is '&e%&pure_number%&7'.");
                            if(%&opt_format% == "METRIC");
                                &read_number = convertToMetric(%&pure_number%,-1);
                                debug_log(%debug%,%&script_debug_name%,"Calling &bconvertToMetric&7 on &&pure_number ('&5%&pure_number%&7') returned '&d%&read_number%&7' (called &bconvertToMetric&7 with args: precision: '&e-1&7').");
                            elseif(%use_delimiter%);
                                &read_number = %&formatted_number%;
                                &delim_char  = ",";
                                if(%custom_delimiter%);
                                    &delim_char  = %&opt_delimiter%;
                                    &read_number = replace(&read_number,",",%&delim_char%);
                                endif;
                                debug_log(%debug%,%&script_debug_name%,"Set &&read_number ('&5%&pure_number%&7') to be formatted using delimiter character (&&delim_char: '&e%&delim_char%&7'): '&d%&read_number%&7'.");
                            else;
                                &read_number = %&pure_number%;
                                debug_log(%debug%,%&script_debug_name%,"Set &&read_number ('&5%&read_number%&7') to be stripped of Delimiter Characters.");
                            endif;
                        endif;
                        
                        // If we are only returning sig. figs, do that.
                        if(%&opt_precision% == "SIGNIFICANT");
                            ifmatches(%&read_number%,"^(.*?)\.0*$",&first_portion,1);
                                &read_number = %&first_portion%;
                            endif;
                        endif;
                    endif;
                endif;
            endif;
            
            debug_log(%debug%,%&script_debug_name%,"Returning '&d%&read_number%&7' from input number '&5%&number%&7' (applied opts: format='&e%&opt_format%&7', precision='&e%&opt_precision%&7', rounding='&e%&opt_rounding%&7', delimiter='&e%&opt_delimiter%&7').");
            return(%&read_number%);
        endfunction;
    // array/index/arrayDelete
        // Removes the Element at <#index> from <&array[]> (different from calling unset, completely clears the entry from the Array).
            // Params:
            //        {array} <&array[]>    The Array to unset the specified index from.
            //        {number} <#index>     The Index to unset in the Source Array. If negative, will be taken
            //                              as an offset from the end of the Array (i.e. -1 = array.length - 1).
            //                              If the Index is greater than the length of the Source Array, no element
            //                              will be removed.
        function arrayDelete(&array[],#index);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:295
            #array_size = arraysize(&array[]);
            #array_len  = #array_size - 1;
            if(%#array_size% == 0);
                return(&array[]);
            else;
                if(%#index% < 0);
                    #index = #array_len + #index;
                endif;
                
                if((%#index% >= 0) && (%#index% <= %#array_len%));
                    foreach(&array[],&element,#i);
                        if(%#i% != %#index%);
                            &out_array[] = %&element%;
                        endif;
                    next;
                endif;
            endif;
            return(&out_array[]);
        endfunction;
    // string/index/xJsonGet
        // Identical to original `jsonget`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&string_a>    The Key to get in the JSON Object, or the JSON Object itself.
                // {string} <&string_b> The Key to get in the JSON Object, or the JSON Object itself. Must be the other value compared to <&string_a>
            // Returns the value provided by `jsonget`, processed thru `convertENote`. Identical results, only difference is preservation of silently coerced Numbers.
        function xJsonGet(&string_a,&string_b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:265
            &return_string = jsonget(%&string_a%,%&string_b%);
            &return_string = convertENote(%&return_string%);
            return(%&return_string%);
        endfunction;
    // array/index/arrayLength
        // Returns the zero-indexed length of an Array.
            // Params:
            //        <array> <&array[]>    The Array to measure the length of.
            //
            // Returns the zero-indexed length of the Array (arraysize - 1).
        function arrayLength(&array[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:6
            #array_size   = arraysize(&array[]);
            #array_length = #array_size - 1;
            return(%#array_length%);
        endfunction;
    // api/minecraft/getMinecraftProfileCacheIndex
        // Checks if a Minecraft Profile is available in the Cached Arrays (@&cached_mc_ [split_ids, joint_ids, usernames, change_ts]).
        // If it is, and the Cache is not invalid, the index the entry can be found at is returned. Otherwise, -1 is returned.
                // Params:
                //        <string>  &search_term   : The term to search for. Can be the username, dashed UUID, or joint UUID.
                //      [boolean] check_validity : True to return the index only if it is valid, false to return the index regardless of it's validity.
                //
                // Returns the index the Profile can be found at in the Cache.
        function getMinecraftProfileCacheIndex(&search_term,check_validity=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/minecraft.txt:8
            &script_debug_name = "&9getMinecraftProfileCacheIndex&7";
            debug              = true;
        
            // Check if the search term can be found in any of the caches.
            if(true);
                #lookup_index  = -1;
                #cache_index[] = indexof(@&cached_mc_split_uuids[],,%&search_term%);
                #cache_index[] = indexof(@&cached_mc_joint_uuids[],,%&search_term%);
                #cache_index[] = indexof(@&cached_mc_usernames[],,%&search_term%);
                foreach(#cache_index[],#cache_index);
                    if(%#cache_index% != -1);
                        #lookup_index = %#cache_index%;
                        break;
                    endif;
                next;
        
                // If we hit a valid cache entry, check if it is valid.
                if(%#lookup_index% != -1);
                    #valid_before = %@#cached_mc_valid_until[%#lookup_index%]%;
                    if((!%check_validity%) || (%#valid_before% >= %TIMESTAMP%));
                        // Player can't change name yet, the cache is valid.
                        return(%#lookup_index%);
                    endif;
                endif;
            endif;
        
            return(-1);
        endfunction;
    // api/minecraft/getMinecraftProfile
        // Gets a User's Minecraft Profile from playerdb.co.
            // Params:
                // {string} &search_term : The term to search for. Can be the username, dashed UUID, or joint UUID.
                //
            // Returns an Array:
                // 0 {boolean} success     : Whether or not the request was successful
                // 1 {string}  &username   : The player's username
                // 2 {string}  &joint_uuid : The player's joint UUID
                // 3 {string}  &split_uuid : The player's split UUID
            // Example:
                //    &minecraft_profile[]   = getMinecraftProfile(%&search_term%);
                //    minecraft_profile     := %&minecraft_profile[0]%;
                //    &minecraft_username    = %&minecraft_profile[1]%;
                //    &minecraft_joint_uuid  = %&minecraft_profile[2]%;
                //    &minecraft_split_uuid  = %&minecraft_profile[3]%;
        function getMinecraftProfile(&search_term);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/minecraft.txt:53
            &script_debug_name = "&9getMinecraftProfile&7";
            debug              = false;
        
            // If we are checking the current player, we can skip requests altogether.
            &player_split_uuid = %UUID%;
            &player_joint_uuid = regexreplace(&player_split_uuid,"-","");
            &player_identity[] = split(", ","%&player_split_uuid%, %&player_joint_uuid%, %PLAYER%");
            #player_index      = indexof(&player_identity[],,%&search_term%);
            if(%#player_index% != -1);
                &player_username   = %PLAYER%;
                &player_joint_uuid = %&player_joint_uuid%;
                &player_split_uuid = %UUID%;
                success            = true;
            else;
                // Not checking current player, do API calls.
                #cache_index  = getMinecraftProfileCacheIndex(%&search_term%,false);
                #valid_before = %@#cached_mc_valid_until[%#cache_index%]%;
                if((%#valid_before% >= %TIMESTAMP%) && (%#cache_index% != -1));
                    // Entry is cached, we can skip the request.
                    &player_username   = %@&cached_mc_usernames[%#cache_index%]%;
                    &player_joint_uuid = %@&cached_mc_joint_uuids[%#cache_index%]%;
                    &player_split_uuid = %@&cached_mc_split_uuids[%#cache_index%]%;
                    success            = true;
                else;
                    // Search term is not cached, try the API.
                    if(true);
                        setrequestheader("accept","application/json");
                        setrequestheader("user-agent","MC_API")
                        &api_url  = "https://playerdb.co/api/player/minecraft/%&search_term%";
                        &api_resp = httpget(%&api_url%,,#api_code);
                        &api_code = jsonget("code",%&api_resp%);
                        if(%&api_code% == "player.found");
                            &player_username   = jsonget("data.player.username",%&api_resp%);
                            &player_joint_uuid = jsonget("data.player.raw_id",%&api_resp%);
                            &player_split_uuid = jsonget("data.player.id",%&api_resp%);
                            success            = true;
                        elseif(%debug%);
                            &vars[] = split(" ","&api_url &api_resp &api_code #api_code");
                            foreach(&vars[],&var,#v);
                                &var_ = regexreplace(&var,"&","&&");
                                &val  = "%%&var%%";
                            next;
                        endif;
                    endif;
        
                    // Update the cache entry.
                    if(true);
                        if(%success%);
                            // Search term (could be UUID or Username) was valid and found on a Player.
                            // Update or initialize the Cache entry for the UUID.
                            &player_name_hist      = jsonget("data.player.meta.name_history",%&api_resp%);
                            &player_name_changes[] = getjsonasarray(%&player_name_hist%);
                            #player_name_changes   = arraylength(&player_name_changes[]);
                            if(%#player_name_changes% == 1);
                                &latest_change_time = 0;
                            else;
                                &latest_change_time = xJsonGet("changedToAt",%&player_name_changes[%#player_name_changes%]%);
                                &latest_change_time = match(%&latest_change_time%,"(^.{10})",1);
                            endif;
        
                            // A player can change their name every 30 days since their most recent name change.
                            // Set the 'cache invalidation' timestamp for this entry to be the latest change time + ms in 30 days.
                            #latest_change_time := %&latest_change_time%;
                            #can_change_name_at  = %#latest_change_time% + (60 * 60 * 24 * 30);
                            
                            #uuid_index = indexof(@&cached_mc_split_uuids[],,%&player_split_uuid%);
                            if(%#uuid_index% == -1);
                                @&cached_mc_split_uuids[] = %&player_split_uuid%;
                                @&cached_mc_joint_uuids[] = %&player_joint_uuid%;
                                @&cached_mc_usernames[]   = %&player_username%;
                                @#cached_mc_valid_until[] = %#can_change_name_at%;
                            else;
                                @&cached_mc_usernames[%#uuid_index%]   = %&player_username%;
                                @#cached_mc_valid_until[%#uuid_index%] = %#can_change_name_at%;
                            endif;
                        elseif(%#cache_index% != -1);
                            // Search term (has to be Username) was a previously valid Username on another User, but they have since
                            // changed their Username. We can be certain of this because the Cache was hit successfully, but the request
                            // did not pull up any valid Account.
                            //
                            // Clear the invalid entry from the Cache.
                            //
                            
                            @&cached_mc_split_uuids[] = arrayDelete(@&cached_mc_split_uuids[],%#cache_index%);
                            @&cached_mc_joint_uuids[] = arrayDelete(@&cached_mc_joint_uuids[],%#cache_index%);
                            @&cached_mc_usernames[]   = arrayDelete(@&cached_mc_usernames[],%#cache_index%);
                            @#cached_mc_valid_until[] = arrayDelete(@#cached_mc_valid_until[],%#cache_index%);
                        endif;
                    endif;
                endif;
            endif;
            return(%success%,%&player_username%,%&player_joint_uuid%,%&player_split_uuid%);
        endfunction;
    // api/slothpixel/slothpixelGetSkyBlockProfiles
        // Gets a player's Hypixel SkyBlock Profiles from Slothpixel's API.
            // Params:
            //        {string} [&search_term=%UUID%]    The player username/UUID to search for. If left blank, defaults to player's UUID.
            //
            // Returns an array:
            //    0         {boolean}    success       Whether or not we were able to get any data from the API (false if request fails)
            //    1, ...    {string}     &profile[]    The JSON Objects of the Profiles. Only provided if success == true and profiles !== null.
        function slothpixelGetSkyBlockProfiles(&search_term=%UUID%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/slothpixel.txt:8
            &player_data[]   = getMinecraftProfile(%&search_term%);
            player_success  := %&player_data[0]%;
            &return_array[0] = "False";
            if(%player_success%);
                &player_joint_uuid = %&player_data[2]%;
                &api_endpoint      = "https://api.slothpixel.me/api/skyblock/profiles/%&player_joint_uuid%";
                &api_response      = httpget(%&api_endpoint%,,#api_code);
                if(%#api_code% == 200);
                    &return_array[0] = "True";
                    &profile_ids[]   = getjsonkeys(%&api_response%);
                    foreach(&profile_ids[],&profile_id,#pii);
                        &return_array[] = jsonget(%&profile_id%,%&api_response%);
                    next;
                endif;
            endif;
            return(&return_array[]);
        endfunction;
    // api/index/getHypixelAPIRequestLimit
        // Gets the limiting variables for the current Player.
            // Params:
            //        None
            //
            // Returns an Array:
            //        0 <integer> #reqs_in_last_min : Total requests in the last 60 seconds.
            //        1 <integer> #reqs_avail_now   : Total requests available now before hitting throttle.
            //        2 <integer> #wait_timestamp   : Timestamp to wait till before making the next request to avoid being throttled.
        function getHypixelAPIRequestLimit();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:45
            &script_debug_name = "&9getHypixelAPIRequestLimit&7";
            debug              = true;
            #max_req_per_min   = 120;
        
            #api_reqs = arraysize(@#api_req_ts[]);
            if(%#api_reqs% >= 1);
                #array_end = %#api_reqs% - 1;
                for(#i,%#array_end%,0);
                    #api_req_ts  = %@#api_req_ts[%#i%]%;
                    #elapsed_sec = %TIMESTAMP% - %#api_req_ts%;
                    if(%#elapsed_sec% <= 120);
                        #save_timestamps[] = %#api_req_ts%;
                    endif;
                next;
        
                unset(@#api_req_ts[]);
                push(@#api_req_ts[],#save_timestamps[*]);
        
            endif;
        
            #reqs_in_last_min = arraysize(#save_timestamps[]);
            #reqs_avail_now   = 120 - %#reqs_in_last_min%;
            #wait_timestamp   = %TIMESTAMP% + ((%#reqs_in_last_min% - 120) / 2);
            return(%#reqs_in_last_min%,%#reqs_avail_now%,%#wait_timestamp%);
        endfunction;
    // string/index/isStringUUID
        // Checks if a string matches UUID regex.
            // Params:
            //        <string> &check_string : The string to check
            //
            // Returns a boolean.
            //
        function isStringUUID(&check_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:28
            &script_debug_name = "&9isStringUUID&7";
            debug              = false;
            &split_uuid_expr   = "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$";
            &joint_uuid_expr   = "^[a-f0-9]{32}$";
            &uuid_exprs[]      = split(", ","%&split_uuid_expr%, %&joint_uuid_expr%");
            foreach(&uuid_exprs[],&uuid_expr);
                ifmatches(%&check_string%,%&uuid_expr%);
                    match_found = true;
                    break;
                endif;
            next;
            return(%match_found%);
        endfunction;
    // info/index/hasTimeExceeded
        // Used to determine whether to timeout a function.
            // Params:
                // {number} <#start_time>        The start timestamp to subtract from current timestamp
                // {number} <#timeout_sec>       The amount of seconds to check if difference between now & start is >=.
                // {number} [do_timeout=true]    If false, will always return false (used as shorthand for functions that
                //                               use this function to determine whether or not they have timed out).
            // Returns a boolean indicating whether or not <#start_timestamp> was >= <#seconds> ago.
            // Example:
                //    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
        function hasTimeExceeded(#start_time,#timeout_sec,do_timeout=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:10
            #elapsed_sec   = %TIMESTAMP% - #start_time;
            return_boolean = ((%do_timeout%) && (#elapsed_sec >= #timeout_sec));
            return(%return_boolean%);
        endfunction;
    // info/index/getSkyblockAreaFromWTFMAP
        // Attempts to read the SkyBlock Area from the /wtfmap command + chatfilter.
            // Params:
            //      {number} [#timeout_sec=30]  Max amount of seconds to wait for Chat Filter to read the wtfmap output.
            //                                  Set to -1 to disable timeout.
            //      {number} [#wait_ticks=60]   Amount of ticks to wait between attempts to issue the command.
            //
            // Returns the String returned from the Command (i.e. "SkyBlock Dynamic"), or "-1" if cannot be found/timed out.
        function getSkyblockAreaFromWTFMAP(#timeout_sec=30,#wait_ticks=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:422
            debug              = true;
            &script_debug_name = "&3getSkyBlockAreaFromWTFMAP&7";
            
            @cannot_use_wtfmap = false;
            @&wtfmap           = "";
            #start_time        = %TIMESTAMP%;
            do_timeout         = #timeout_sec != -1;
            &return_string     = "-1";
            do;
                func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                if(%func_timeout%);
                    break;
                endif;
                    
                debug_log(%debug%,%&script_debug_name%,"echoing '/wtfmap'...");
                echo("/wtfmap");
                do(%#wait_ticks%);
                    wait("1t");
                    got_response   = ((%@&wtfmap% != "") || (%@cannot_use_wtfmap%));
                until(%got_response%);
                if((%got_response%) && (%@&wtfmap% != ""));
                    &return_string = %@&wtfmap%;
                    break;
                endif;
            until((%got_response%) || (%func_timeout%));
            return(%&return_string%);
        endfunction;
    // info/index/getScoreboardSkyBlockArea
        // Attempts to read the Scoreboard to find the Player's AREA on Hypixel SkyBlock (i.e. 'Private Island', 'Hub', 'Bank', etc).
            // Params:
            //      None
            //
            // Returns the string found on the Scoreboard following the Gem Character, or "-1" if not able to be parsed.
        function getScoreboardSkyBlockArea();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:456
            &return_string = -1;
            foreach("teams");
                &joint_team = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                &joint_team = trim(%&joint_team%);
                &joint_team = regexreplace(&joint_team,"^\s*","");
                ifmatches(%&joint_team%,"\u23E3 (.+)",&found_area,1);
                    &return_string = %&found_area%;
                endif;
            next;
            return(%&return_string%);
        endfunction;
    // info/index/getSkyBlockPlayerListInfo
        // Returns an Array of information extracted from the Hypixel SkyBlock PlayerList.
            // Params:
            //      {string} [...&extract_vars[]]   The variables to extract from the Player List. Valid values are:
            //                                      'AREA', 'SERVER', 'PROFILE', 'BANK', 'SKILLS', 'SPEED', 'STRENGTH',
            //                                      'CRIT_CHANCE', 'CRIT_DAMAGE', 'ATTACK_SPEED'. If no values are provided,
            //                                      will return variables 'AREA', and 'PROFILE' by default.
            //
            // Returns an Array of the extracted variables indexed in the order they were passed to the Function,
            // or if no variables were able to be extracted, the first element of this Array will be -1.
        function getSkyBlockPlayerListInfo(...&extract_vars[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:258
            // Setup valid variables
            if(true);
                &valid_vars[]  = split(", ","AREA, SERVER, PROFILE, BANK, SKILLS, SPEED, STRENGTH, CRIT_CHANCE, CRIT_DAMAGE, ATTACK_SPEED");
                #extract_len   = arraysize(&extract_vars[]);
                assign_default = #extract_len == 0;
                if(!%assign_default%);
                    foreach(&valid_vars[],&valid_var);
                        #extract_idx = indexof(&extract_vars[],,%&valid_var%);
                        if(#extract_idx != -1);
                            &use_out_vars[] = %&valid_var%;
                            #use_out_idxs[] = %#extract_idx%;
                            matched[]       = false;
                        endif;
                    next;
                    #use_out_len   = arraysize(&use_out_vars[]);
                    assign_default = #use_out_len == 0;
                endif;
                
                if(!%assign_default%);
                    sort("ASC",#use_out_idxs[],&use_out_vars[]);
                else;
                    &use_out_vars[] = split(", ","AREA, PROFILE");
                    matched[]       = split(", ","false, false");
                endif;
            endif;
            
            // Compile matches
            if(true);
                #return_index = indexof(&use_out_vars[],,"AREA");
                if(#index_area != -1);
                    &match_names[] = "!C-b";
                    &match_exprs[] = "Area: (.+)"; // Area: Private Island
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SERVER");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!C-c";
                    &match_exprs[%#return_index%] = "Server: (.+)"; // Server: mini787Q
                endif;
                
                #return_index = indexof(&use_out_vars[],,"PROFILE");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-b";
                    &match_exprs[%#return_index%] = "Profile: (.+)"; // Profile: Pineapple
                endif;
                
                #return_index = indexof(&use_out_vars[],,"BANK");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-d";
                    &match_exprs[%#return_index%] = "Bank: (.+)"; // Bank: 50/50
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SKILLS");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-g";
                    &match_exprs[%#return_index%] = "Skills: (.+)"; // Skills: Foraging 17: 24.1%
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SPEED");
                if(#return_index != -1);
                    &tmp_expr_char                = char("10022");
                    &match_names[%#return_index%] = "!D-h";
                    &match_exprs[%#return_index%] = "Speed: %&tmp_expr_char%(.+)"; // Speed: ✦220
                endif;
                
                #return_index = indexof(&use_out_vars[],,"STRENGTH");
                if(#return_index != -1);
                    &tmp_expr_char                = char("10049");
                    &match_names[%#return_index%] = "!D-i";
                    &match_exprs[%#return_index%] = "Strength: %&tmp_expr_char%(.+)"; // Strength: ❁149
                endif;
                
                #return_index = indexof(&use_out_vars[],,"CRIT_CHANCE");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9763");
                    &match_names[%#return_index%] = "!D-j";
                    &match_exprs[%#return_index%] = "Crit Chance: %&tmp_expr_char%(.+)"; // Crit Chance: ☣64
                endif;
                
                #return_index  = indexof(&use_out_vars[],,"CRIT_DAMAGE");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9760");
                    &match_names[%#return_index%] = "!D-k";
                    &match_exprs[%#return_index%] = "Crit Damage: %&tmp_expr_char%(.+)"; // Crit Damage: ☠130
                endif;
                
                #return_index  = indexof(&use_out_vars[],,"ATTACK_SPEED");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9876");
                    &match_names[%#return_index%] = "!D-l";
                    &match_exprs[%#return_index%] = "Attack Speed: %&tmp_expr_char%(.+)"; // Attack Speed: ⚔0
                endif;
            endif;
            
            foreach("players");
                #line_index = indexof(&match_names[],,%PLAYERNAME%);
                if(#line_index != -1);
                    matched[%#line_index%] = true;
                    &line_text             = strip(%PLAYERDISPLAYNAME%);
                    &line_text             = trim(%&line_text%);
                    ifmatches(%&line_text%,%&match_exprs[%#line_index%]%,&capture_group,1);
                        &return_array[%#line_index%] = %&capture_group%;
                        #non_matched_var_index       = indexof(matched[],,false);
                        if(#non_matched_var_index == -1);
                            break;
                        endif;
                    endif;
                endif;
            next;
            
            #return_len = arraysize(&return_array[]);
            if(#return_len == 0);
                &return_array[] = -1;
            endif;
            return(&return_array[]);
        endfunction;
    // info/index/getSkyBlockArea
        // Gets the SkyBlock Server Type that we are currently connected to. Returns SKYBLOCK_HUB, SKYBLOCK_HOME, or OTHER. OTHER is only returned if
        // the Function cannot determine whether it is on a SkyBlock Server, or if it is not on a SkyBlock Server.
            // Params:
            //      None
            //
            // Returns one of the following strings: 'SKYBLOCK_HUB', 'SKYBLOCK_HOME', 'OTHER'. 'OTHER' is returned if none of the functions return any
            // parseable values.
        function getSkyBlockArea();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:577
            &playerlist_area = getSkyBlockPlayerListInfo("AREA");
            if(%&playerlist_area% == "-1");
                &scoreboard_area = getScoreboardSkyBlockArea();
                if(%&scoreboard_area% == "-1");
                    &wtfmap_area = getSkyBlockAreaFromWTFMAP();
                    if(%&wtfmap_area% == "SkyBlock Hub");
                        return("SKYBLOCK_HUB");
                    elseif(%&wtfmap_area% == "SkyBlock Dynamic");
                        return("SKYBLOCK_HOME");
                    endif;
                    return("OTHER");
                elseif(%&playerlist_area% == "Your Island");
                    return("SKYBLOCK_HOME");
                else;
                    return("SKYBLOCK_HUB");
                endif;
            elseif(%&playerlist_area% == "Private Island");
                return("SKYBLOCK_HOME");
            else;
                return("SKYBLOCK_HUB");
            endif;
        endfunction;
    // info/index/isInLimbo
        // Checks if the Player is in Limbo by reading the Dimension, as well as checking to see if there are any signs at the sign positions
        // where they normally are in Limbo.
            // Params:
            //      None
            //
            // Returns a boolean indicating whether or not the Player is in Limbo.
        function isInLimbo();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:475
            if((%YPOS% > 35) || (%DIMENSION% != "END"));
                return(False);
            endif;
            
            #limbo_x = -20;
            #limbo_y = 32;
            #limbo_z = 21;
            
            if((%XPOS% == #limbo_x) && (%YPOS% == #limbo_y) && (%ZPOS% == #limbo_z));
                return(True);
            endif;
            
            &armor_vars[] = split(", ","ITEM, BOOTSID, LEGGINGSID, CHESTPLATEID, HELMID");
            all_air       = true;
            foreach(&armor_vars[],&armor_var);
                &armor_val = "%%&armor_var%%";
                if(%&armor_val% != "air");
                    all_air = false;
                    break;
                endif;
            next;
            if((%SLOTSFULL% == 0) && (%all_air%));
                return(True);
            endif;
            
            #sign_x   = -21;
            #sign_y[] = split(", ","31, 32, 33");
            #sign_z[] = split(", ","20, 21, 22");
            foreach(#sign_y[],#sign_y);
                foreach(#sign_z[],#sign_z);
                    &block_id = getid(%#sign_x%,%#sign_y%,%#sign_z%);
                    if(&block_id == "wall_sign");
                        in_limbo = true;
                        break;
                    endif;
                next;
            next;
        endfunction;
    // info/index/getHypixelGamemodeFromScoreboard
        // Attempts to read the Scoreboard (foreach("teams") ... prefix + suffix ... next) to find the Player's location on Hypixel
            // Params:
            //      None
            //
            // Returns one of the following strings: 'LOBBY', 'SKYBLOCK', or 'OTHER'. 'OTHER' indicates that the function
            // was not able to determine which area the Player is located in.
        function getHypixelGamemodeFromScoreboard();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:382
            &return_string = "OTHER";
            
            // Setup indicator strings
            if(true);
                &match_expr[] = "Games in this lobby are"; // Only shown in Prototype Lobby Servers
                &match_area[] = "LOBBY";
                
                &match_expr[] = "^Achievements: .+$"; // Only shown in Hypixel Main Lobby Servers
                &match_area[] = "LOBBY";
                
                &match_expr[] = "^Purse: [0-9,.]+"; // Only shown in SkyBlock Servers
                &match_area[] = "SKYBLOCK";
                
                &match_expr[] = "^Bits: [0-9,.]+"; // Only shown in SkyBlock Servers
                &match_area[] = "SKYBLOCK";
            endif;
            
            foreach("teams");
                &joint_team = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                &joint_team = trim(%&joint_team%);
                &joint_team = regexreplace(&joint_team,"^\s*","");
                foreach(&match_expr[],&match_expr,#mei);
                    ifmatches(%&joint_team%,%&match_expr%);
                        &return_string = %&match_area[%#mei%]%;
                        break;
                    endif;
                next;
            next;
            
            return(%&return_string%);
        endfunction;
    // info/index/getItemName
        // Given the NBT Data of an Item (and optionally it's base item), extracts the Display Name of the Item from the NBT Data.
            // Params:
            //      {string} <&nbt>         The NBT Data to extract the Name from.
            //      {string} [&item="air"]  The Item this NBT Data was collected from (only used in cases where the Item's Name cannot be found).
            //      {boolean} [strip=true]  Whether or not to strip formatting codes from the extracted Name.
            //
            // Returns the Display Name of the Item found from it's NBT Data, with formatting codes stripped if [strip] is true.
        function getItemName(&nbt,&item="air",strip=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:49
            ifmatches(%&nbt%,".*\bName\s*:\"\s*(.*?)\"",&found_name,1);
                if(%strip%);
                    &found_name = strip(%&found_name%);
                endif;
            elseif(%&item% == "air");
                &found_name = "Air";
            endif;
            return(%&found_name%);
        endfunction;
    // info/index/getHypixelGamemode
        // Gets the current Gamemode / Gametype that the Player is in by reading the Scoreboard, etc.
        // Params:
        //      None
        //
        // Returns one of: 'LOBBY', 'LIMBO', 'SKYBLOCK', or 'OTHER'.
        function getHypixelGamemode();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:520
            if(true);
                do(3);
                    // Check to see if we can read the Gamemode from the 9th Hotbar Slot.
                    if(true);
                        #static_hb_end = 44;
                        &found_item    = getslotiteminv(%#static_hb_end%,,#found_stack,#found_data,&found_nbt);
                        &found_nbt     = strip(%&found_nbt%);
                        &found_name    = getItemName(%&found_nbt%,%&found_item%);
                        
                        &known_names[] = split(", ","Lobby Selector (Right Click), SkyBlock Menu (Right Click)");
                        &known_areas[] = split(", ","LOBBY, SKYBLOCK");
                        #known_index   = indexof(&known_names[],,%&found_name%);
                        if(%#known_index% != -1);
                            &return_string = %&known_areas[%#known_index%]%;
                            break;
                        endif;
                    endif;
                    
                    // Cant find the Gamemode from the 9th Hotbar Slot, have to read additional Data. Check to see if we can find any Data from the Playerlist.
                    &skyblock_area = getSkyBlockPlayerListInfo("AREA");
                    if(%&skyblock_area% != "-1");
                        &return_string = "SKYBLOCK";
                        break;
                    endif;
                    
                    // Try to read the location from the Scoreboard.
                    &scoreboard_location = getHypixelGamemodeFromScoreboard();
                    if(%&scoreboard_location% != "OTHER");
                        &return_string = %&scoreboard_location%;
                        break;
                    endif;
                    
                    // Check if we are in Limbo as a last resort
                    in_limbo = isInLimbo();
                    if(%in_limbo%);
                        &return_string = "LIMBO";
                        break;
                    endif;
                    
                    wait("1000ms");
                loop;
            endif;
            
            if(%&return_string% != "");
                return(%&return_string%);
            endif;
            return("OTHER");
        endfunction;
    // debug/index/debug_error
        // Logs a message to chat with an error prefix.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_error(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:49
            // &matcher       = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement   = "&$1";
            // &string        = regexreplace(&string,%&matcher%,%&replacement%);
            &error_message = "&4Error > &c%&string%";
            &error_message = regexreplace(&error_message,"&7","&c");
            &error_message = "&7%&script_debug_name%&7: %&error_message%";
            if(%debug_enabled%);
                log(%&error_message%);
            endif;
            return(%&error_message%);
        endfunction;
    // misc/index/miscValidate
        // Validates that <&search_term> is found in the <&array[]>, and/or if it is not found in the <&array[]>, the value of the element
        // found at [#default_idx=0] is returned. Set [#default_idx] to -1 to indicate that no default value should be used.
            // Params:
            //      {array} <&elements[]>       The Array to search for <&search_term> in.
            //      {string} <&search_term>     The Search Term to check if exists in <&elements[]>.
            //      {number} [#default_idx=0]   The Index of the Element in <&elements[]> to use as the default return value
            //                                  if <&search_term> is not found within the Array. If -1, will be taken as no default
            //                                  value should be used.
            //
            // Returns the element from the <&elements[]> Array that <&search_term> matches, or if no match was found and [#default_idx]
            // is not -1, the element at [#default_idx] in the <&elements[]> Array. If [#default_idx] is -1, an empty string is returned.
        function miscValidate(&search_term,#default_idx=0,...&elements[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:12
            #term_index = indexof(&elements[],,%&search_term%);
            if(%#term_index% != -1);
                &return_string = %&elements[%#term_index%]%;
            elseif(%#default_idx% != -1);
                &return_string = %&elements[%#default_idx%]%;
            endif;
            return(%&return_string%);
        endfunction;
    // movement/index/gotoServer
        // Given a Server type to get to, gets to the Server type from wherever we are. Returns a boolean indicating
        // whether or not the action was successful.
            // Params:
            //      {string} [&target_server="SKYBLOCK_HOME"]   The target server to get to. Valid values are: 'SKYBLOCK',
            //                                                  'SKYBLOCK_HUB', 'SKYBLOCK_HOME. Defaults to 'SKYBLOCK_HOME'.
            //                                                  If set to 'SKYBLOCK', will accept any SkyBlock server.
            //      {number} [#command_wait_ticks=100]          Amount of ticks to wait between issuing each command needed.
            //      {number} [#timeout_sec=300]                 Amount of seconds to attempt this action before timing out and
            //                                                  returning false. Set to -1 to make the action try to go on indefinitely.
            //                                                  Defaults to 300 (5 minutes).
            //      {boolean} [force_cmd=false]                 If set to true, will force the function to send a command to try and
            //                                                  get to the correct server regardless of whether or not it is already on it
            //                                                  at time of function call.
            //
            // Returns a boolean indicating whether or not the Player is on the [&target_server] at the time of function exit.
        function gotoServer(&target_server="SKYBLOCK_HOME",#command_wait_ticks=100,#timeout_sec=300,force_cmd=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:339
            debug              = true;
            &script_debug_name = "&4gotoServer";
            
            &target_server = miscValidate(%&target_server%,0,"SKYBLOCK_HOME","SKYBLOCK_HUB","SKYBLOCK");
            do_timeout     = #timeout_sec > 0;
            #start_time    = %TIMESTAMP%;
            &encode_vars[] = split(", ","@&auto-restarts-case, @world_changed, BIOME, DIMENSION, XPOS, YPOS, ZPOS"); // Variables used to detect a world change event.
            first_loop     = false;
            #min_tick_wait = %#command_wait_ticks% / 2; // used to ensure we do not spam requests if we switch servers quickly
            
            do;
                if(%do_timeout%);
                    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                    if(%func_timeout%);
                        debug_error(%debug%,%&script_debug_name%,"Function timed out.");
                        break;
                    endif;
                endif;
                
                // Figure out what type of command we are going to need to issue.
                if(!%do_override%);
                    &hypixel_gamemode = getHypixelGamemode(); // 'LOBBY', 'LIMBO', 'SKYBLOCK', or 'OTHER'.
                    debug_log(%debug%,%&script_debug_name%,"force_cmd: %force_cmd%, target_server: %&target_server%, hypixel_gamemode: %&hypixel_gamemode%");
                    if(%&hypixel_gamemode% == "SKYBLOCK");
                        return_boolean = %&target_server% == "SKYBLOCK";
                        if((%return_boolean%) && ((!%force_cmd%) || (%first_loop%)));
                            debug_log(%debug%,%&script_debug_name%,"Got to target_server 'SKYBLOCK'.");
                            break;
                        endif;
                        
                        &skyblock_area = getSkyBlockArea(); // 'SKYBLOCK_HUB', 'SKYBLOCK_HOME', 'OTHER'
                        debug_log(%debug%,%&script_debug_name%,"force_cmd: %force_cmd%, target_server: %&target_server%, hypixel_gamemode: %&hypixel_gamemode%, skyblock_area: %&skyblock_area%");
                        return_boolean = %&target_server% == %&skyblock_area%;
                        if((%return_boolean%) && ((!%force_cmd%) || (%first_loop%)));
                            debug_log(%debug%,%&script_debug_name%,"Got to target_server '%&skyblock_area%'.");
                            break;
                        endif;
                        
                        if(%&skyblock_area% == "SKYBLOCK_HUB");
                            if((%force_cmd%) && (%&target_server% == "SKYBLOCK_HUB"));
                                &echo_command = "/warp hub";
                            else;
                                &echo_command = "/warp home";
                            endif;
                        elseif(%&skyblock_area% == "SKYBLOCK_HOME");
                            &echo_command = "/warp hub";
                        elseif(%&skyblock_area% == "OTHER");
                            &echo_command = "/lobby";
                        endif;
                    elseif(%&hypixel_gamemode% == "LIMBO");
                        &echo_command = "/lobby";
                    elseif(%&hypixel_gamemode% == "LOBBY");
                        &echo_command = "/play skyblock";
                    elseif(%&hypixel_gamemode% == "OTHER");
                        &echo_command = "/lobby";
                    endif;
                else;
                    // Issue the override "/lobby" command to break out of the "Cannot send chat message" loop.
                    &echo_command = "/lobby";
                    do_override   = false;
                endif;
                debug_log(%debug%,%&script_debug_name%,"echo_command: &d%&echo_command%");
                
                // Issue the command and wait for an update in our environment variables.
                if(true);
                    if((#waited_ticks > 0) && (#waited_ticks < #command_wait_ticks));
                        do;
                            wait("1t");
                            inc(#waited_ticks);
                        until(%#waited_ticks% >= %#command_wait_ticks%);
                    endif;
                
                    foreach(&encode_vars[],&encode_var,#evi);
                        ifmatches(%&encode_var%,"(?-i:[a-z])"); // Unset any global variables, i.e. '@world_changed'.
                            unset(%&encode_var%);
                        endif;
                        &initial_vals[%#evi%] = "%%&encode_var%%";
                    next;
                    
                    debug_log(%debug%,%&script_debug_name%,"running %&echo_command%");
                    echo(%&echo_command%);
                    env_updated   = false;
                    #waited_ticks = 0;
                    do(%#command_wait_ticks%);
                        wait("1t");
                        inc(#waited_ticks);
                        foreach(&encode_vars[],&encode_var,#evi);
                            &encode_val = "%%&encode_var%%";
                            if(%&initial_vals[%#evi%]% != %&encode_val%);
                                env_updated = true; // Break early as soon as we detect some sort of change in our environment.
                                break;
                            endif;
                        next;
                    until(%env_updated%);
                    
                    // Check to see if we hit the @&auto-restarts-case ("Cannot send chat message")
                    if(%@&auto-restarts-case% != "");
                        do_override = true;
                    endif;
                endif;
                
                first_loop = true;
            until((%func_timeout%) || ((%return_boolean%) && ((!%force_cmd%) || (%first_loop%))));
            
            return(%return_boolean%);
        endfunction;
    // api/index/getHypixelAPIKey
        // Gets a new Hypixel API Key.
            // Params:
            //        None
            //
            // Returns the new API Key String.
        function getHypixelAPIKey();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:6
            &script_debug_name = "&9getHypixelAPIKey&7";
            debug              = false;
            &old_api_key       = %@&api_key%;
            
            // Check if we need to get onto a Hypixel Server (not in Limbo) before execution.
            &hy_gamemode = getHypixelGamemode();
            if(%&hy_gamemode% == "LIMBO");
                do;
                    on_server = gotoServer("SKYBLOCK");
                    if(%on_server%);
                        break;
                    endif;
                    wait("1t");
                until(%on_server%);
            endif;
            
            do;
                echo("/api new");
                do(20);
                    wait("1t");
                until(%&old_api_key% != %@&api_key%);
                if(%&old_api_key% != %@&api_key%);
                    &new_api_key  = %@&api_key%;
                    new_valid_key = isStringUUID(%&new_api_key%);
                    &old_api_key  = %&new_api_key%;
                endif;
            until(%new_valid_key%);
            return(%&new_api_key%);
        endfunction;
    // api/index/hypixelAPICall
        // Makes a Hypixel API Call.
            // Params:
                // {string}  <&api_url>                The endpoint to call
                // {string}  [&api_key=%@&api_key%]    The API Key to use with the request. Defaults to @&api_key
                // {boolean} [recursion=false]         True if this function was called by itself. Defaults to false
            // Returns an Array:
                // 0 {boolean}    req_success    True if we received response from API, false if we got throttled by CF.
                // 1 {boolean}    api_success    The value of the 'success' key in the API response.
                // 2 {integer}    #api_code      The HTTP Response Code from the API Request.
                // 3 {string}     &api_resp      The raw JSON data returned from the Server.
            // Example:
                // &api_data[]  = hypixelAPICall(%&api_url%);
                // req_success := %&api_data[0]%; // True if we received response from API, false if we got throttled by CF.
                // api_success := %&api_data[1]%; // The value of the 'success' key in the API response.
                // #api_code   := %&api_data[2]%; // The HTTP Response Code from the API Request.
                // &api_resp    = %&api_data[3]%; // The raw JSON data returned from the Server.
        function hypixelAPICall(&api_url,&api_key=%@&api_key%,recursion=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:88
            &script_debug_name = "&9hypixelAPICall&7";
            debug              = true;
            
            // Setup variables
            if(true);
                key_needed     = true;
                req_success    = false;
                api_success    = false;
                #api_code      = -1;
                &api_resp      = "";
                #retry_codes[] = split(", ","403, 429, 503"); // 403: invalid api key, 429: throttled, 503: data unavailable right now
        
                // Setup known API Endpoints
                if(true);
                    &api_endpoints[] = "false|skyblock/auctions_ended";
                    &api_endpoints[] = "true|skyblock/auctions";
                    &api_endpoints[] = "true|skyblock/profiles";
                    &api_endpoints[] = "true|skyblock/auction";
                    &api_endpoints[] = "true|skyblock/profile";
                    &api_endpoints[] = "false|skyblock/bazaar";
                    &api_endpoints[] = "true|punishmentstats";
                    &api_endpoints[] = "true|skyblock/news";
                    &api_endpoints[] = "true|leaderboards";
                    &api_endpoints[] = "true|recentgames";
                    &api_endpoints[] = "false|resources";
                    &api_endpoints[] = "true|boosters";
                    &api_endpoints[] = "true|friends";
                    &api_endpoints[] = "true|player";
                    &api_endpoints[] = "true|status";
                    &api_endpoints[] = "true|counts";
                    &api_endpoints[] = "true|guild";
                    &api_endpoints[] = "true|key";
                endif;
        
                // Find the endpoint we are hitting
                if(true);
                    &api_uri = regexreplace(&api_url,"https://api.hypixel.net/","");
                    &use_uri = "";
                    foreach(&api_endpoints[],&api_endpoint,#aei);
                        &this_data[]   = split("|",%&api_endpoint%);
                        this_key_req  := %&this_data[0]%;
                        &this_endpoint = %&this_data[1]%;
                        ifmatches(%&api_uri%,"^%&this_endpoint%");
                            &use_uri   = %&this_endpoint%;
                            key_needed = %this_key_req%;
                            break;
                        endif;
                    next;
                    skip_req = %&use_uri% == "";
                endif;
            endif;
        
            // Validate the API Key passed to the function, if we are going to be using one.
            if((!%skip_req%) && (%key_needed%));
                key_test = isStringUUID(%&api_key%);
                if(!%key_test%);
                    debug_error(%debug%,%&script_debug_name%,"Parameter 'api_key' is invalid UUID: &4%&api_key%&7. Attempting to fix");
                    global_test = isStringUUID(%@&api_key%);
                    if(%global_test%);
                        &api_key = %@&api_key%;
                        debug_log(%debug%,%&script_debug_name%,"Using environment api_key instead (&a%@&api_key%&7).");
                    else;
                        &new_key  = getHypixelAPIKey();
                        new_valid = isStringUUID(%&new_key%);
                        if(%new_valid%);
                            debug_log(%debug%,%&script_debug_name%,"Using new api_key instead (&a%&new_key%&7).");
                            &api_key = %&new_key%;
                        else;
                            debug_error(%debug%,%&script_debug_name%,"Failed to get a new valid API key to use.");
                        endif;
                    endif;
                    key_test = isStringUUID(%&api_key%);
                    skip_req = !%key_test%;
                endif;
            endif;
        
            // Make the request, if we are making the request.
            if(true);
                if(!%skip_req%);
                    if(%key_needed%);
                        setrequestheader("API-Key",%&api_key%);
                        #throttle_vars[]  = getHypixelAPIRequestLimit();
                        #reqs_in_last_min = %#throttle_vars[0]%;
                        #reqs_avail_now   = %#throttle_vars[1]%;
                        #wait_timestamp   = %#throttle_vars[2]%;
        
                        if(%#reqs_avail_now% <= 0);
                            #wait_seconds = %#wait_timestamp% - %TIMESTAMP%;
                            debug_log(%debug%,%&script_debug_name%,"Delaying request by &d%#wait_seconds% seconds&7 to avoid being limited by Hypixel API.");
                            wait("%#wait_seconds%s");
                            &return_array[] = call("hypixelAPICall",%&api_url%,%&api_key%);
                            return(&return_array[]);
                        endif;
                    endif;
        
                    // Add the base URL to the request URL if it was not provided.
                    ifmatches(%&api_url%,"^https://api.hypixel.net");else;
                        &api_parts[] = "https://api.hypixel.net"
                        ifmatches(%&api_url%,"^/");else;
                            &api_parts[] = "/";
                        endif;
                        &api_parts[] = %&api_url%;
                        &api_url     = join("",&api_parts[]);
                    endif;
        
                    @#api_req_ts[] = %TIMESTAMP%;
                    &api_resp      = httpget(%&api_url%,,#api_code);
                    &success       = jsonget("success",%&api_resp%);
                    ifmatches(%&success%,"ERROR_"); // If we got an unexpected error, it normally means we got throttled by CloudFlare.
                        &req_uuid      = %UNIQUEID%;
                        &log_strings[] = "-----"
                        &log_strings[] = "Request Date: %DATETIME%";
                        &log_strings[] = "Request UUID: %&req_uuid%";
                        &log_strings[] = "Request URL : %&api_url%";
                        &log_strings[] = "Request Key : %&api_key%";
                        &log_strings[] = " ";
                        &log_strings[] = "Response Code: %#api_code%";
                        &log_strings[] = "Response Body: %&api_resp%";
                        &log_strings[] = " ";
                        &log_strings[] = " ";
                        &log_path[]    = split(%FILESEPARATOR%,%MACROSCONFIGDIR%);
                        &log_path[]    = "logs";
                        &log_path[]    = "bad_requests.txt";
                        &log_path      = join(%FILESEPARATOR%,&log_path[]);
                        writefile(%&log_path%,&log_strings[],true);
                        debug_error(%debug%,%&script_debug_name%,"Got a bad request from the API call, response logged to file:");
                        &vars[] = split(" ","&req_uuid &log_path #api_code");
                        foreach(&vars[],&var,#v);
                            &_var = regexreplace(&var,"&","&&");
                            &val  = "%%&var%%";
                            debug_log(%debug%,%&script_debug_name%,"%#v% > %&_var%: &d%&val%&7.");
                        next;
                    else;
                        req_success  = true;
                        api_success := %&success%;
                        #retry_index = indexof(#retry_codes[],,%#api_code%);
        
                        // If the request was unsuccessful and the Response Code is an error that we can fix, attempt to do so.
                        if((!%api_success%) && (%#retry_index% != -1) && (!%recursion%));
                            if(%#api_code% == 403); // invalid api key
                                &api_key = getHypixelAPIKey();
                            elseif((%#api_code% == 429) || (%#api_code% == 503)); // throttled = 429, 503 = data unavailable right now
                                wait("10000ms");
                            endif;
        
                            skip_return_arr = true;
                            &return_array[] = call("hypixelAPICall",%&api_url%,%&api_key%,true);
                        endif;
                    endif;
                elseif(%&use_uri% == "");
                    debug_error(%debug%,%&script_debug_name%,"Could not find API Endpoint from URL: &4%&api_url%&7.");
                endif;
            endif;
        
            // Populate the return array, unless it was already populated.
            if(!%skip_return_arr%);
                &return_array[] = %req_success%;
                &return_array[] = %api_success%;
                &return_array[] = %#api_code%;
                &return_array[] = %&api_resp%;
            endif;
            return(&return_array[]);
        endfunction;
    // api/index/getSkyBlockProfile
        // Fetches a given SkyBlock Profile from Hypixel's API.
            // Params:
            //        {string} <&profile_id>            The Profile ID to fetch
            //        {string} [&api_key=%@&api_key]    The API Key to make Requests with. If left blank, defaults to @&api_key
            //
            // Returns an array:
            //    0    {boolean} success    Whether or not we were able to get any data from the API (false if request fails)
            //    1    {string} &profile    The JSON Data of the Profile
        function getSkyBlockProfile(&profile_id,&api_key=%@&api_key%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:364
            &script_debug_name = "&9getSkyBlockProfile&7";
            debug              = true;
            test_profile_id    = isStringUUID(%&profile_id%);
            if(!%test_profile_id%);
                debug_error(%debug%,%&script_debug_name%,"Invalid formatted Profile ID passed: &4%&profile_id%&7.");
                return(false,"");
            endif;
        
            // Make the API request.
            if(true);
                &api_url     = "skyblock/profile?profile=%&profile_id%";
                &api_data[]  = hypixelAPICall(%&api_url%);
                req_success := %&api_data[0]%;
                api_success := %&api_data[1]%;
                #api_code   := %&api_data[2]%;
                &api_resp    = %&api_data[3]%;
        
                if(%api_success%);
                    &profile = jsonget("profile",%&api_resp%);
                    ifmatches(%&profile%,"^(?:ERROR_.*|null)$");
                        debug_error(%debug%,%&script_debug_name%,"Profile with ID &4%&profile_id%&7 does not exist.");
                        return(false,"");
                    endif;
                    debug_log(%debug%,%&script_debug_name%,"&aFound Profile, returning.");
                    return(true,%&profile%);
                else;
                    debug_error(%debug%,%&script_debug_name%,"API Call failed!");
                    return(false,"");
                endif;
            endif;
        endfunction;
    // api/index/getSkyBlockProfiles
        // Fetches a player's SkyBlock Profiles from Hypixel's API.
            // Params:
            //        {string} [&search_term=%UUID%]     The player username/UUID to search for. If left blank, defaults to player's UUID.
            //        {string} [&api_key=%@&api_key%]    The API Key to make Requests with. If left blank, defaults to @&api_key
            //
            // Returns an array:
            //    0         {boolean}    success       Whether or not we were able to get any data from the API (false if request fails)
            //    1, ...    {string}     &profile[]    The JSON Objects of the Profiles. Only provided if success == true and profiles !== null.
        function getSkyBlockProfiles(&search_term=%UUID%,&api_key=%@&api_key%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:261
            &script_debug_name = "&9getSkyBlockProfiles&7";
            debug              = false;
        
            &player_identity[] = getMinecraftProfile(%&search_term%);
            identity_found    := %&player_identity[0]%;
            &player_username   = %&player_identity[1]%;
            &player_joint_uuid = %&player_identity[2]%;
            &player_split_uuid = %&player_identity[3]%;
            if(%identity_found%);
                &api_url     = "skyblock/profiles?uuid=%&player_split_uuid%";
                &api_data[]  = hypixelAPICall(%&api_url%);
                req_success := %&api_data[0]%;
                api_success := %&api_data[1]%;
                #api_code   := %&api_data[2]%;
                &api_resp    = %&api_data[3]%;
                success      = %req_success%;
                
        
                if((!%req_success%) || (!%api_success%));
                    if(%req_success%);
                        &cause = jsonget("cause",%&api_resp%);
                    else;
                        &cause = "Cloudflare Request Throttle";
                    endif;
                    debug_error(%debug%,%&script_debug_name%,"An error occurred while fetching SkyBlock Profiles for &4%&player_username%&7: &4%&cause%&7.");
                else;
                    &player_profiles = jsonget("profiles",%&api_resp%);
                    #profile_index   = 0;
                    do;
                        &profile_data = jsonget(%#profile_index%,%&player_profiles%);
                        ifmatches(%&profile_data%,"ERROR_");
                            #found_profiles  = arraysize(&player_profiles[]);
                            debug_log(%debug%,%&script_debug_name%,"Found a total of &a%#found_profiles% profiles&7 for &a%&player_username%&7.");
                            no_more_profiles = true;
                            break;
                        else;
                            &profile_id        = jsonget("profile_id",%&profile_data%);
                            &profile_name      = jsonget("cute_name",%&profile_data%);
                            &profile_ids[]     = %&profile_id%;
                            &profile_names[]   = %&profile_name%;
                            &player_profiles[] = %&profile_data%;
                        endif;
                        #profile_index = %#profile_index% + 1;
                    until(%no_more_profiles%);
        
                    #player_cache_index = indexof(@&cached_profile_player_uuids[],,%&player_split_uuid%);
                    if(%#player_cache_index% == -1);
                        @&cached_profile_player_uuids[]         = %&player_split_uuid%;
                        @&cached_profile_player_profile_ids[]   = join("|",&profile_ids[]);
                        @&cached_profile_player_profile_names[] = join("|",&profile_names[]);
                        debug_log(%debug%,%&script_debug_name%,"&eInitialized&7 cached profile IDs and Names for &a%&player_username%&7.");
                    else;
                        &player_cached_profile_ids[]   = split("|",%@&cached_profile_player_profile_ids[%#player_cache_index%]%);
                        &player_cached_profile_names[] = split("|",%@&cached_profile_player_profile_names[%#player_cache_index%]%);
        
                        // Trim the cache if anything is not found.
                        foreach(&player_cached_profile_ids[],&cached_profile_id,#cpii);
                            #found_index = indexof(&profile_ids[],,%&cached_profile_id%);
                            if(%#found_index% == -1);
                                // This profile is no longer available for this member, trim it from the new array.
                                debug_log(%debug%,%&script_debug_name%,"Profile ID &e%&cached_profile_id%&7 (Name: &d%&player_cached_profile_names[%#cpii%]%&7) is no longer available, trimming");
                                &player_cached_profile_ids[]   = arrayDelete(&player_cached_profile_ids[],%#cpii%);
                                &player_cached_profile_names[] = arrayDelete(&player_cached_profile_names[],%#cpii%);
                            endif;
                        next;
        
                        // Append to the cache with any new finds.
                        foreach(&profile_ids[],&profile_id,#pii);
                            #cached_index = indexof(&player_cached_profile_ids[],,%&profile_id%);
                            if(%#cached_index% == -1);
                                debug_log(%debug%,%&script_debug_name%,"Found new Profile ID: &e%&profile_id%&7 (Name: &d%&profile_names[%#pii%]%&7).");
                                put(&player_cached_profile_ids[],%&profile_id%);
                                put(&player_cached_profile_names[],%&profile_names[%#pii%]%);
                            endif;
                        next;
        
                        // Update the cache
                        if(true);
                            @&cached_profile_player_profile_ids[%#player_cache_index%]   = join("|",&player_cached_profile_ids[]);
                            @&cached_profile_player_profile_names[%#player_cache_index%] = join("|",&player_cached_profile_names[]);
                        endif;
        
                        debug_log(%debug%,%&script_debug_name%,"&dUpdated&7 cached profile IDs and Names for &a%&player_username%&7.");
                    endif;
                endif;
            else;
                debug_error(%debug%,%&script_debug_name%,"Could not resolve search_term &4%&search_term%&7 into a valid UUID!");
            endif;
        
            &return_array[] = %success%;
            push(&return_array[],&player_profiles[*]);
            return(&return_array[]);
        endfunction;
    // api/index/getActiveProfile
        // Fetches the specified player's currently active SkyBlock Profile from Hypixel's API.
            // Params:
                // {string} [&search_term=%UUID%]     The username or UUID of the player to look up. Defaults to the bot's UUID.
                // {string} [&api_key=%@&api_key%]    The API Key to make Requests with. If left blank, defaults to @&api_key
                // {boolean} [player_only=false]      If true, will return the bot's data from the Profile only. Defaults to false.
            // Returns a String Array:
                //    0 {boolean} success     Whether or not we were able to get any data from the API (false if request fails)
                //    1 {string}  &profile    The JSON Data of the Profile
            // Example:
                //    &active_profile[] = getActiveProfile();
                //    profile_found    := %&active_profile[0]%;
                //    if(%profile_found%);
                //        &profile_data = %&active_profile[1]%;
                //    endif;
        function getActiveProfile(&search_term=%UUID%,&api_key=%@&api_key%,player_only=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:411
            &script_debug_name = "&9getActiveProfile&7";
            debug              = true;
        
            // Get the Minecraft Profile associated with the Search Term.
            if(true);
                &player_identity[] = getMinecraftProfile(%&search_term%);
                identity_found    := %&player_identity[0]%;
                &player_username   = %&player_identity[1]%;
                &player_joint_uuid = %&player_identity[2]%;
                &player_split_uuid = %&player_identity[3]%;
        
                if(!%identity_found%);
                    debug_error(%debug%,%&script_debug_name%,"Could not find Identity for Search Term: &4%&search_term%&7.");
                    return(false,"");
                endif;
            endif;
        
            // If the Minecraft Profile we are executing this query on is the active bot account,
            // try and get the Profile ID from reading Scoreboard and checking the Cache.
            if(%&player_split_uuid% == %UUID%);
                #player_cache_index = indexof(@&cached_profile_player_uuids[],,%&player_split_uuid%);
                if(%#player_cache_index% != -1);
                    &active_profile = getSkyBlockPlayerListInfo("PROFILE");
                    if(%&active_profile% != "-1");
                        &cached_ids[]   = split("|",%@&cached_profile_player_profile_ids[%#player_cache_index%]%);
                        &cached_names[] = split("|",%@&cached_profile_player_profile_names[%#player_cache_index%]%);
                        #profile_index  = indexof(&cached_names[],,%&active_profile%);
                        debug_log(%debug%,%&script_debug_name%,"profile name &d%&active_profile%&7 found at index &e%#profile_index%&7 in cached_names array.");
                        if(%#profile_index% != -1);
                            skip_all_profiles_req = true;
                            &active_profile_id    = %&cached_ids[%#profile_index%]%;
                            &active_profile_name  = %&cached_names[%#profile_index%]%;
                            debug_log(%debug%,%&script_debug_name%,"&aHit cache! ID is: &e%&active_profile_id%");
                        endif;
                    endif;
                endif;
            endif;
        
            // Get the active Profile ID & Data from API, if we do not already have it.
            if(true);
                if(!%skip_all_profiles_req%);
                    debug_log(%debug%,%&script_debug_name%,"Calling getSkyBlockProfiles, did not hit cache.");
        
                    // Get the profiles for the Minecraft Profile we are querying.
                    &profile_data[]  = getSkyBlockProfiles(%&player_split_uuid%);
                    #player_profiles = arraysize(&profile_data[]);
                    profile_success := %&profile_data[0]%;
        
                    // Iterate over all Profiles and find the one with the most recent save.
                    if((%profile_success%) && (%#player_profiles% > 1));
                        #final_profile_index = %#player_profiles% - 1;
                        #start_profile_index = 1;
        
                        for(#i,%#start_profile_index%,%#final_profile_index%);
                            &profile_data = %&profile_data[%#i%]%;
                            &profile_id   = jsonget("profile_id",%&profile_data%);
                            &profile_name = jsonget("cute_name",%&profile_data%);
                            &profile_mbrs = jsonget("members",%&profile_data%);
                            &player_data  = jsonget(%&player_joint_uuid%,%&profile_mbrs%);
                            ifmatches(%&player_data%,"ERROR_");
                                debug_error(%debug%,%&script_debug_name%,"Could not find Profile Member data for User: &4%&player_username%&7 in Profile ID &e%&profile_id%&7 (name: &d%&profile_name%&7).");
                            else;
                                &init_save = %&best_save%;
        
                                if(%&best_save% == "");
                                    &best_save           = jsonget("last_save",%&player_data%);
                                    &active_profile_data = %&profile_data%;
                                else;
                                    &last_save = jsonget("last_save",%&player_data%);
                                    eval(&ms_diff,"%&best_save% - %&last_save%"); // if last_save > best_save, result ms_diff will start with -1.
                                    ifmatches(%&ms_diff%,"^-");
                                        &best_save           = %&last_save%;
                                        &active_profile_data = %&profile_data%;
                                    endif;
                                endif;
                            endif;
                        next;
                    endif;
                else;
                    // Only need to make one request for the correct Profile.
                    &profile_data[]      = getSkyBlockProfile(%&active_profile_id%);
                    profile_success     := %&profile_data[0]%;
                    &active_profile_data = %&profile_data[1]%;
                endif;
        
                if((%profile_success%) && (%player_only%));
                    &active_profile_data = jsonget("members.%&player_joint_uuid%",%&active_profile_data%);
                    ifmatches(%&active_profile_data%,"ERROR_");
                        debug_error(%debug%,%&script_debug_name%,"Could not find Player UUID %&player_joint_uuid% in Active Profile, wtf?");
                        &active_profile_data = "";
                    endif;
                endif;
            endif;
            return(%profile_success%,%&active_profile_data%);
        endfunction;
    // api/index/getActiveProfileID
        // Fetches the specified player's currently active SkyBlock Profile ID from Hypixel's API.
            // Params:
            //        {string} [&search_term=%UUID%]     The username or UUID of the player to look up. Defaults to the bot's UUID.
            //        {string} [&api_key=%@&api_key%]    The API Key to make Requests with. If left blank, defaults to @&api_key
            //
            // Returns an Array:
            //    0 {boolean} success        Whether or not we were able to get any data from the API (false if request fails)
            //    1 {string}  &profile_id    The Active Profile's ID.
        function getActiveProfileID(&search_term=%UUID%,&api_key=%@&api_key%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:516
            &script_debug_name = "&9getActiveProfileID&7";
            debug              = true;
            
            // Get the Minecraft Profile associated with the Search Term.
            if(true);
                &player_identity[] = getMinecraftProfile(%&search_term%);
                identity_found    := %&player_identity[0]%;
                &player_username   = %&player_identity[1]%;
                &player_joint_uuid = %&player_identity[2]%;
                &player_split_uuid = %&player_identity[3]%;
                if(!%identity_found%);
                    debug_error(%debug%,%&script_debug_name%,"Could not find Identity for Search Term: &4%&search_term%&7.");
                    return(false,"");
                endif;
            endif;
        
            // If the Player we are looking up is the Bot, see if we can hit the Profile Cache to get the ID early.
            if(%&player_split_uuid% == %UUID%);
                #player_cache_index = indexof(@&cached_profile_player_uuids[],,%&player_split_uuid%);
                if(%#player_cache_index% != -1);
                    &active_profile = getSkyBlockPlayerListInfo("AREA");
                    if(%&active_profile% != "-1");
                        &cached_ids[]   = split("|",%@&cached_profile_player_profile_ids[%#player_cache_index%]%);
                        &cached_names[] = split("|",%@&cached_profile_player_profile_names[%#player_cache_index%]%);
                        #profile_index  = indexof(&cached_names[],,%&active_profile%);
                        if(%#profile_index% != -1);
                            active_profile_success = true;
                            &active_profile_id     = %&cached_ids[%#profile_index%]%;
                            &active_profile_name   = %&cached_names[%#profile_index%]%;
                        endif;
                    endif;
                    #
                endif;
            endif;
        
            // Call getActiveProfile if we did not hit the Cache.
            if(!%active_profile_success%);
                &active_profile_data[]  = getActiveProfile(%&search_term%,%&api_key%);
                active_profile_success := %&active_profile_data[0]%;
                if(%profile_success%);
                    &active_profile_id = jsonget("profile_id",%&profile_data[1]%);
                endif;
            endif;
        
            return(%active_profile_success%,%&active_profile_id%);
        endfunction;
    // info/index/getProfileType
        // Determines whether the current SkyBlock Profile is a Solo or a Coop type Profile.
            // Params: None
            // Returns: {string} ENUM: COOP, SOLO, ERROR
        function getProfileType();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:667
            // Check if we can answer our question by checking the Scoreboard.
            if(true);
                &bank_balances = getSkyBlockPlayerListInfo("BANK");
                if(%&bank_balances% != "-1");
                    &split_array[] = split("/",%&bank_balances%);
                    #split_array   = arraysize(&split_array[]);
                    if(%#split_array% == 1);
                        return("SOLO");
                    elseif(%#split_array% == 2);
                        return("COOP");
                    endif;
                endif;
            endif;
            
            // If we could not answer our question by checking the Scoreboard, try API.
            if(true);
                &active_profile_req[]   = getActiveProfile();
                active_profile_success := %&active_profile_req[0]%;
                if(%active_profile_success%);
                    &profile_members         = jsonget("members",%&active_profile_req[1]%);
                    &profile_members_uuids[] = getjsonkeys(%&profile_members%);
                    #profile_members_uuids   = arraysize(&profile_members_uuids[]);
                    if(%#profile_members_uuids% == 1);
                        return("SOLO");
                    elseif(%#profile_members_uuids% > 1);
                        return("COOP");
                    endif;
                endif;
            endif;
            
            // If we are still bass-ackwards and out of luck, what the fuck else can we do? Try Slothpixel!
            if(true);
                // Try to get the Active Profile ID first.
                if(true);
                    &active_profile_id[]    = getActiveProfileID();
                    active_profile_success := %&active_profile_id[0]%;
                endif;
                
                &player_joint_uuid     = %UUID%;
                &player_joint_uuid     = regexreplace(&player_joint_uuid,"-","");
                &slothpixel_profiles[] = slothpixelGetSkyBlockProfiles();
                slothpixel_success    := %&slothpixel_profiles[0]%;
                if(%slothpixel_success%);
                    #slothpixel_profiles = arraylength(&slothpixel_profiles[]);
                    for(#i,1,%#slothpixel_profiles%);
                        &slothpixel_profile = %&slothpixel_profiles[%#i%]%;
                        &profile_id         = jsonget("id",%&slothpixel_profile%);
                        if((%active_profile_success%) && (%&profile_id% == %&active_profile_id[1]%));
                            &active_profile = %&slothpixel_profile%;
                            break;
                        elseif(!%active_profile_success%);
                            &profile_last_save = jsonget("members.%&player_joint_uuid%.last_save",%&slothpixel_profile%);
                            if(%&best_save% == "");
                                &best_save      = %&profile_last_save%;
                                &active_profile = %&slothpixel_profile%;
                            else;
                                &save_diff = eval("%&profile_last_save% - %&best_save%"); // if profile_last_save bigger (more recent), number will not be negative
                                ifnotmatches(%&save_diff%,"-");
                                    &best_save      = %&profile_last_save%;
                                    &active_profile = %&slothpixel_profile%;
                                endif;
                            endif;
                        endif;
                    next;
                    
                    if(%&active_profile% != "");
                        &profile_members   = jsonget("members",%&active_profile%);
                        &profile_members[] = getjsonkeys(%&profile_members%);
                        #profile_members   = arraysize(&profile_members[]);
                        if(%#profile_members% == 1);
                            return("SOLO");
                        elseif(%#profile_members% >= 2);
                            return("COOP");
                        endif;
                    endif;
                endif;
            endif;
            
            return("ERROR");
        endfunction;
    // info/index/_matchExpressionNBT
        // Used by getItemName, getItemUUID, getItemSBID to extract a regular expression capture group from NBT Data.
            // Params:
            //      {string} <&haystack>    The string to extract the first capture group from.
            //      {string} <&expression>  The expression to test against <&haystack>, must have at least one capture group.
            //
            // Returns the first capture group's content from the <&expression> match, or an empty string if no match is found.
        function _matchExpressionNBT(&haystack,&expr);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:34
            &return_string = "";
            ifmatches(%&haystack%,%&expr%,&capture_group,1);
                &return_string = %&capture_group%;
            endif;
            return(%&return_string%);
        endfunction;
    // info/index/getItemUUID
        // Given the NBT Data of an Item, extracts the Item's UUID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item UUID from.
            //
            // Returns the Item's UUID, or an empty string if one is not found.
        function getItemUUID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:92
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"uuid:\"(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\"");
            return(%&return_string%);
        endfunction;
    // info/index/getItemSBID
        // Given the NBT Data of an Item, extracts the Item's SBID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item SBID from.
            //
            // Returns the Item's SBID, or an empty string if one is not found.
        function getItemSBID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:103
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"\bid\"?\s*:\"([A-Z_0-9:]+)\"");
            return(%&return_string%);
        endfunction;
    // string/index/regexEscape
        // string/index.txt
        // Counts occurences of a given string within another string.
            // Params:
            //        <string> &source_string : The string to count occurences of &search_string in.
            //        <string> &search_string : The string to count occurences of.
            //
            // Returns the integer amount of occurences found.
        function countOccurencesInString(&source_string,&search_string);
            &script_debug_name  = "&9countOccurencesInString&7";
            debug               = false;
            ifcontains(%&source_string%,%&search_string%);
                &split_source_arr[] = split(%&search_string%,%&source_string%);
                #occurences         = arraysize(&split_source_arr[]);
                if(%#occurences% == 0); // source string exclusively held repetitions of the search string
                    #source_length = strlen(%&source_string%);
                    #search_length = strlen(%&search_string%);
                    #occurences    = %#source_length% / %#search_length%;
                endif;
            endif;
            return(%#occurences%);
        endfunction;
        
        // Checks if a string matches UUID regex.
            // Params:
            //        <string> &check_string : The string to check
            //
            // Returns a boolean.
            //
        function isStringUUID(&check_string);
            &script_debug_name = "&9isStringUUID&7";
            debug              = false;
            &split_uuid_expr   = "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$";
            &joint_uuid_expr   = "^[a-f0-9]{32}$";
            &uuid_exprs[]      = split(", ","%&split_uuid_expr%, %&joint_uuid_expr%");
            foreach(&uuid_exprs[],&uuid_expr);
                ifmatches(%&check_string%,%&uuid_expr%);
                    match_found = true;
                    break;
                endif;
            next;
            return(%match_found%);
        endfunction;
        
        // Checks if a string matches Boolean regex
            // Params:
                // {string} <&check_string>    The String to Check
            // Returns a Boolean
        function isStringBoolean(&check_string);
            &check_string_lcase = lcase(%&check_string%);
            &boolean_values[]   = split(", ","true, false, 1, 0");
            return_boolean      = arrayincludes(&boolean_values[],%&check_string_lcase%);
            return(%return_boolean%);
        endfunction;
        
        // Checks if a String is a valid Integer.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Integer.
        function isStringInteger(&check_string);
            ifmatches(%&check_string%,"^[0-9-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Float (without commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringFloat(&check_string);
            ifmatches(%&check_string%,"^[0-9-]*\.[0-9]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Float/Number (with commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Formatted Number.
        function isStringFormattedNumber(&check_string);
            ifmatches(%&check_string%,"^[\d-]+,[\d.,-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Number, coercable to a Float of some sort.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringNumber(&check_string);
            &call_functions[] = split(", ","isStringInteger, isStringFloat, isStringFormattedNumber");
            foreach(&call_functions[],&call_function,#cfi);
                if(%&call_function% == "isStringInteger");
                    return_boolean = isStringInteger(%&check_string%);
                elseif(%&call_function% == "isStringFloat");
                    return_boolean = isStringFloat(%&check_string%);
                elseif(%&call_function% == "isStringFormattedNumber");
                    return_boolean = isStringFormattedNumber(%&check_string%);
                endif;
                if(%return_boolean%);
                    break;
                endif;
            next;
            return(%return_boolean%);
        endfunction;
        
        // Coerces a given String to a Number (no decimal points).
            // Params:
                // {string} <&convert_string>    The String to Convert.
                // {number} [#precision=0]       Decimal Precision
            // Returns the Number result of the coercion.
        function stringToNumber(&convert_string,#precision=0);
            #convert_number = coerceNumber(%&convert_string%);
            return(%#convert_number%);
        endfunction;
        
        function isStringBoolean(&check_string);
            if(%&check_string% == "");
                return_boolean = true;
            else;
                &boolean_coercable[] = split(", ","0, 1, true, false, True, False");
                #boolean_index       = indexof(&boolean_coercable[],,%&check_string%);
                return_boolean       = %#boolean_index% != -1;
            endif;
            return(%return_boolean%);
        endfunction;
        
        function stringToBoolean(&convert_string);
            is_coercable = isStringBoolean(%&convert_string%);
            if(%is_coercable%);
                return_boolean := %&convert_string%;
            elseifmatches(%&convert_string%,"\S");
                return_boolean  = true;
            else;
                return_boolean  = false;
            endif;
            return(%return_boolean%);
        endfunction;
        
        function regexEscape(&input_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:141
            &split_array[]  = split("\\",%&input_string%);
            foreach(&split_array[],&curr_char,#curr_index);
                if(%&curr_char% == "\\");
                    #last_index = #curr_index - 1;
                    #next_index = #curr_index + 1;
                    &last_char  = %&split_array[%#last_index%]%;
                    &next_char  = %&split_array[%#next_index%]%;
                    
                    // If this backslash is escaped already (last char == '\'), then we do not need to escape this char.
                    // If the backslash is escaping another backslash (next char == '\'), then we do not need to escape this char.
                    if((%&last_char% != "\\") && (%&next_char% != "\\"));
                        &rejoin_array[] = "\\";
                    endif;
                    &rejoin_array[] = %&curr_char%;
                else;
                    &rejoin_array[] = %&curr_char%;
                endif;
            next;
            &rejoint_string = join("",&rejoin_array[]);
            &search_string  = "(?<!\\\\)(?:\+|\*|\?|\^|\$|\.|\[|\]|\{|\}|\(|\)|\||\/)";
            &escaped_string = regexreplace(&rejoint_string,%&search_string%,"\\\$0");
            return(%&escaped_string%);
        endfunction;
    // string/index/coerceNumber
        // Coerces an input number string into a valid integer. The input number string can be in E Notation, or contain
        // commas, or contain decimal values, or any mix of the above.
            // Params:
                // {string} <&number_string>                The Number String to Convert into a valid Integer.
                // {string} [&rounding_strategy="ROUND"]    String ENUM that dictates how to handle decimal values. Valid values are:
                //                                          FLOOR (towards negative infinity), CEILING|CEIL (towards positive infinity),
                //                                          TRUNCATE|TRUNC (rounds up or down towards 0), ROUND (towards nearest integer).
                //                                          Defaults to ROUND if omitted or an invalid input is provided.
            // Returns the Number coerced into a valid Integer (real-integer type, not string type. If the input string is not
            // coercable at all, 0 will be returned). If the final value before coercion to integer contains decimals, the coerced value
            // will be rounded according to the [&rounding_strategy] parameter.
            // Example:
                //    Converting a comma split, float string into an Integer
                    //    &number_string     = "100,000.9171";
                    //    &rounding_strategy = "ROUND";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
                    //    log("#number_integer: %#number_integer%"); // '#number_integer: 100001'
                //    Replace the content in the Parameters as needed:
                    //    &number_string     = "Can contain commas, decimals, e. notation, or mix of all three.";
                    //    &rounding_strategy = "One of: FLOOR, CEILING|CEIL, TRUNCATE|TRUNC, ROUND, or empty string.";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
        function coerceNumber(&number_string,&rounding_strategy="ROUND");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:343
            &number_string = replace(&number_string,",");
            &number_string = convertENote(%&number_string%);
            ifcontains(%&number_string%,".");
                &rounding_strategy = miscValidate(%&rounding_strategy%,0,"ROUND","FLOOR","CEILING","CEIL","TRUNCATE","TRUNC");
                if(%&rounding_strategy% == "ROUND");
                    // Round the decimal value to the nearest integer.
                    &return_string = formatnumber(%&number_string%,0,true);
                elseif((%&rounding_strategy% == "TRUNCATE") || (%&rounding_strategy% == "TRUNC"));
                    // Exclude the decimal value entirely.
                    &return_string = regexreplace(&number_string,"\.\d*$");
                else;
                    // Use xEval to evaluate the number_string with the corresponding rounding_term. Instruct
                    // xEval to coerce the value into an integer for us, so any trailing ".0" is stripped from it's
                    // return value.
                    if((%&rounding_strategy% == "CEILING") || (%&rounding_strategy% == "CEIL"));
                        &rounding_term = "ceil";
                    elseif(%&rounding_strategy% == "FLOOR");
                        &rounding_term = "floor";
                    endif;
                    &return_string = xEval("%&rounding_term%(%&number_string%)",true);
                endif;
            else;
                // The Number does not contain a decimal value to begin with, return as usual.
                &return_string = %&number_string%;
            endif;
            return(%&return_string%);
        endfunction;
    // gui/index/findItemContainer
        // Given any (or all, or any mix of) an Item's MCID, Name, SBID, and/or UUID, finds the Item in the Container and returns it's Slot.
            // Params:
                // {string} [...&filter_params[]]    An Array of Strings in format: [<PARAM_ENUM>: <FILTER>], where PARAM_ENUM can be any of:
                //                                   MCID|ITEM, DATA, STACK, NAME, SBID, NBT, or UUID. <FILTER> can be a Regular Expression or an Exact String.
                //                                   If Passing an Expression, prefix the Filter with 'r$'. All characters following the 'r$' will be used
                //                                   as the Expression.
                // {boolean} [return_arr=false]      If set to True, will return an Array of Slots matching the specified Filters. If set to False, will
                //                                   return the first Slot ID found that matches the Filters.
            // Returns the Slot ID(s) of the Item(s) found, or -1 if no Item(s) could be found. Will return -1 if CONTAINERSLOTS <= 0.
        function findItemContainer(return_arr=false,...&filter_params[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:1092
            #return_val = -1;
            
            // Setup Filter Parameters
            if(true);
                &valid_enums[] = split(", ","MCID, ITEM, DATA, STACK, NAME, SBID, UUID, NBT, SLOT");
                foreach(&filter_params[],&filter_param,#fpi);
                    ifmatches(%&filter_param%,"^(.+?):\s*(.+)$");
                        match(%&filter_param%,"^(.+?):\s*(.+)$",{&param_enum,&param_filter});
                        #enum_index = indexof(&valid_enums[],,%&param_enum%);
                        if(%#enum_index% != -1);
                            &param_enum = %&valid_enums[%#enum_index%]%;
                            if(%&param_enum% == "SLOT");
                                #prioritize_slot   = coerceNumber(%&param_filter%);
                                #prioritized_index = indexof(#prioritized_slots[],,%#prioritize_slot%);
                                if(%#prioritized_index% == -1);
                                    #prioritized_slots[] = %#prioritize_slot%;
                                endif;
                            else;
                                if(%&param_enum% == "ITEM");
                                    &param_enum = "MCID";
                                endif;
                                
                                ifmatches(%&param_filter%,"^r\$(.+)",&param_expression,1);
                                    &param_filter = %&param_expression%;
                                else;
                                    &param_filter = regexEscape(%&param_filter%);
                                    &param_filter = "^%&param_filter%$";
                                endif;
                                
                                &enum_array = lcase("&%&param_enum%_regex[]");
                                &enum_bool  = lcase("do_%&param_enum%");
                                push(%&enum_array%,%&param_filter%);
                                set(%&enum_bool%);
                            endif;
                        endif;
                    endif;
                next;
                
                foreach(&valid_enums[],&valid_enum);
                    if((%&valid_enum% != "SLOT") && (&valid_enum% != "ITEM"));
                        &enum_bool = lcase("do_%&valid_enum%");
                        enum_bool := "%%&enum_bool%%";
                        if(%enum_bool%);
                            &enum_array = lcase("&%&valid_enum%_regex[]");
                            &enum_value = join("|",%&enum_array%);
                            &enum_value = "(?:%&enum_value%)";
                            &enum_regex = lcase("&%&valid_enum%_regex");
                            set(%&enum_regex%,%&enum_value%);
                        endif;
                    endif;
                next;
                
                //    Array Name        |    Boolean Name    |    Regex String
                //    &mcid_regex[]     |    do_mcid         |    &mcid_regex
                //    &data_regex[]     |    do_data         |    &data_regex
                //    &stack_regex[]    |    do_stack        |    &stack_regex
                //    &name_regex[]     |    do_name         |    &name_regex
                //    &sbid_regex[]     |    do_sbid         |    &sbid_regex
                //    &uuid_regex[]     |    do_uuid         |    &uuid_regex
                //    &nbt_regex[]      |    do_nbt          |    &nbt_regex
            endif;
            
            // Iterate over Inventory Slots
            if(%CONTAINERSLOTS% >= 1);
                #r_start            = 0;
                #r_end              = %CONTAINERSLOTS% - 37;
                &r_filter[]         = split(", ","mcid, data, stack, name, sbid, uuid, nbt");
                
                #prioritize_slot_sz = arraysize(#prioritize_slot[]);
                if(%#prioritize_slot_sz% >= 1);
                    foreach(#prioritize_slot[],#prioritize_slot,#ps);
                        &f_mcid = getslotitemnbt(%#prioritize_slot%,,&f_stack,&f_data,&f_nbt);
                        &f_nbt  = strip(%&f_nbt%);
                        f_valid = true;
                        foreach(&r_filter[],&r_term,#rti);
                            &f_bool  = "do_%&r_term%";
                            f_bool  := "%%&f_bool%%";
                            if(%f_bool%);
                                if(%#rti% >= 3);
                                    if(%&r_term% == "name");
                                        &f_value = getItemName(%&f_nbt%,%&f_mcid%);
                                    elseif(%&r_term% == "sbid");
                                        &f_value = getItemSBID(%&f_nbt%);
                                    elseif(%&r_term% == "uuid");
                                        &f_value = getItemUUID(%&f_nbt%);
                                    elseif(%&r_term% == "nbt");
                                        &f_value = %&f_nbt%;
                                    endif;
                                else;
                                    &f_value = "&f_%&r_term%";
                                    &f_value = "%%&f_value%%";
                                endif;
                                &f_regex = "&%&r_term%_regex";
                                &f_regex = "%%&f_regex%%";
                                ifnotmatches(%&f_value%,%&f_regex%);
                                    // log("Term %&r_term% > No match between value %&f_value% and expression %&f_regex%");
                                    f_valid = false;
                                    break;
                                endif;
                            endif;
                        next;
                        
                        if(%f_valid%);
                            if(!%return_arr%);
                                #return_val = %#f_slot%;
                                break;
                            endif;
                            #return_val[] = %#f_slot%;
                        endif;
                    next;
                endif;
                for(#f_slot,%#r_start%,%#r_end%);
                    &f_mcid = getslotitemnbt(%#f_slot%,,&f_stack,&f_data,&f_nbt);
                    &f_nbt  = strip(%&f_nbt%);
                    f_valid = true;
                    foreach(&r_filter[],&r_term,#rti);
                        &f_bool  = "do_%&r_term%";
                        f_bool  := "%%&f_bool%%";
                        if(%f_bool%);
                            if(%#rti% >= 3);
                                if(%&r_term% == "name");
                                    &f_value = getItemName(%&f_nbt%,%&f_mcid%);
                                elseif(%&r_term% == "sbid");
                                    &f_value = getItemSBID(%&f_nbt%);
                                elseif(%&r_term% == "uuid");
                                    &f_value = getItemUUID(%&f_nbt%);
                                elseif(%&r_term% == "nbt");
                                    &f_value = %&f_nbt%;
                                endif;
                            else;
                                &f_value = "&f_%&r_term%";
                                &f_value = "%%&f_value%%";
                            endif;
                            &f_regex = "&%&r_term%_regex";
                            &f_regex = "%%&f_regex%%";
                            ifnotmatches(%&f_value%,%&f_regex%);
                                // log("Term %&r_term% > No match between value %&f_value% and expression %&f_regex%");
                                f_valid = false;
                                break;
                            endif;
                        endif;
                    next;
                    
                    if(%f_valid%);
                        if(!%return_arr%);
                            #return_val = %#f_slot%;
                            break;
                        elseif(%#prioritize_slot_sz% <= 0);
                            #return_val[] = %#f_slot%;
                        else;
                            #return_index = indexof(#return_val[],,%#f_slot%);
                            if(%#return_index% == -1);
                                #return_val[] = %#f_slot%;
                            endif;
                        endif;
                    endif;
                next;
            endif;
            
            if(%return_arr%);
                #return_val_sz = arraysize(#return_val[]);
                if(%#return_val_sz% == 0);
                    #return_val[] = -1;
                endif;
                return(#return_val[]);
            endif;
            return(%#return_val%);
        endfunction;
    // banking/index/bankingInfoInternalGetGuiType
        // Gets the String ENUM of Banking GUI Type that is currently open.
            // Returns a String ENUM:
                //    UPGRADES         The GUI for upgrading the Bank's Limits
                //    CHOICE           The First Menu GUI for a Coop Profile (can click to choose Coop or Solo Account from here). Solo
                //                     Profiles will be put into the SOLO GUI Type instead of this GUI for their Main Menu.
                //    COOP             The GUI for depositing or withdrawing into a Coop Account
                //    SOLO             The GUI for depositing or withdrawing into a Solo Account
                //    COOP_DEPOSIT     The GUI for depositing into a Coop Account
                //    SOLO_DEPOSIT     The GUI for depositing into a Solo Account
                //    SIGN_DEPOSIT     The GUI for depositing a Custom Amount into an Account (Type would not be known since cannot get GUI Items)
                //    COOP_WITHDRAW    The GUI for withdrawing from a Coop Account
                //    SOLO_WITHDRAW    The GUI for withdrawing from a Solo Account
                //    SIGN_WITHDRAW    The GUI for withdrawing a Custom Amount from an Account (Type would not be known since cannot get GUI Items)
                //    NONE             A Banking GUI is not open.
            // Example:
                //    &bank_gui_type = bankingInfoInternalGetGuiType();
                //    if(%&bank_gui_type% == "NONE");
                //    elseif(%&bank_gui_type% == "UPGRADES");
                //    elseif(%&bank_gui_type% == "CHOICE");
                //    elseif(%&bank_gui_type% == "COOP");
                //    elseif(%&bank_gui_type% == "SOLO");
                //    elseif(%&bank_gui_type% == "COOP_DEPOSIT");
                //    elseif(%&bank_gui_type% == "SOLO_DEPOSIT");
                //    elseif(%&bank_gui_type% == "SIGN_DEPOSIT");
                //    elseif(%&bank_gui_type% == "COOP_WITHDRAW");
                //    elseif(%&bank_gui_type% == "SOLO_WITHDRAW");
                //    elseif(%&bank_gui_type% == "SIGN_WITHDRAW");
                //    endif;
        function bankingInfoInternalGetGuiType();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:158
            // Setup Function Variables
            if(true);
                debug               = true;
                &script_debug_name  = "&6bankingGetGuiType";
                &enum_upgrades      = "UPGRADES";
                &enum_choice        = "CHOICE";
                &enum_coop          = "COOP";
                &enum_solo          = "SOLO";
                &enum_coop_deposit  = "COOP_DEPOSIT";
                &enum_solo_deposit  = "SOLO_DEPOSIT";
                &enum_sign_deposit  = "SIGN_DEPOSIT";
                &enum_coop_withdraw = "COOP_WITHDRAW";
                &enum_solo_withdraw = "SOLO_WITHDRAW";
                &enum_sign_withdraw = "SIGN_WITHDRAW";
                &enum_none          = "NONE";
                &return_string      = %&enum_none%;
        
                // Setup CONTAINERNAME to ENUM Maps
                if(true);
                    &enum_map_enums[]      = %&enum_choice%;
                    &enum_map_containers[] = "Bank";
        
                    &enum_map_enums[]      = %&enum_upgrades%;
                    &enum_map_containers[] = "Bank Account Upgrades";
        
                    &enum_map_enums[]      = %&enum_coop%;
                    &enum_map_containers[] = "Co-op Bank Account";
        
                    &enum_map_enums[]      = %&enum_solo%;
                    &enum_map_containers[] = "Personal Bank Account";
        
                    // Find Type ('COOP' or 'SOLO') Containers
                    &typed_containers[] = split(", ","Bank Deposit, Bank Withdrawal");
                    &typed_suffixes[]   = split(", ","DEPOSIT, WITHDRAW");
                endif;
            endif;
        
            &check_gui       = %GUI%;
            &check_container = %CONTAINERNAME%;
        
            // If we are in a valid GUI, find the GUI ENUM for the Container.
            if((%&check_gui% == "GUICHEST") || (%&check_gui% == "GUIEDITSIGN"));
                #enum_map_index = indexof(&enum_map_containers[],,%&check_container%);
                #typed_index    = indexof(&typed_containers[],,%&check_container%);
                if(%#enum_map_index% != -1);
                    &return_string = %&enum_map_enums[%#enum_map_index%]%;
                elseif(%#typed_index% != -1);
                    &return_suffix = %&typed_suffixes[%#typed_index%]%;
                    &return_prefix = "SIGN";
                    if(%&check_gui% == "GUICHEST");
                        // Find the Type of the Container by finding the 'Go Back' Button and grabbing the 'To (Co-op|Personal) Bank Account'
                        // String from the NBT.
                        #go_back_slot = findItemContainer(false,"MCID: arrow","NAME: Go Back","SLOT: 31","NBT: r$To (Co-op|Personal) Bank Account");
                        if(%#go_back_slot% != -1);
                            &go_back_item = getslotitemnbt(%#go_back_slot%,,#go_back_stack,#go_back_data,&go_back_nbt);
                            &go_back_nbt  = strip(%&go_back_nbt%);
                            ifmatches(%&go_back_nbt%,"To (Co-op|Personal) Bank Account",&capture_group,1);
                                &return_prefix = "COOP";
                                &capture_group = lcase(%&capture_group%);
                                if(%&capture_group% == "personal");
                                    &return_prefix = "SOLO";
                                endif;
                            endif;
                        endif;
                    endif;
                    &return_string = "%&return_prefix%_%&return_suffix%";
                endif;
            endif;
        
            debug_log(%debug%,%&script_debug_name%,"Returning Banking GUI Type: '&d%&return_string%&7' from GUI '&d%&check_gui%&7', CONTAINERNAME '&d%&check_container%&7'.");
            return(%&return_string%);
        endfunction;
    // banking/index/bankingInfoInternalGetProfileType
        // Checks what the Profile's Type is based on what GUI we are in and what Items are present.
            // Params:
                // {string} [&bank_enum=""]       Optional String ENUM returned from the `bankingInfoInternalGetGuiType()` Function.
                //                                If not provided (or invalid), will call `bankingInfoInternalGetGuiType()`.
                // {number}  [#timeout_sec=30]    The maximum amount of Seconds that this Function can run for. If set to <= 0,
                //                                Function will run on a loop until it is successful, without ever timing out.
            // Returns a String ENUM of COOP, SOLO, or NONE.
            // Example:
                //    &profile_type = bankingInfoInternalGetProfileType(%&bank_enum%);
                //    if(%&profile_type% == "NONE");
                //    elseif(%&profile_type% == "COOP");
                //    elseif(%&profile_type% == "SOLO");
                //    endif;
        function bankingInfoInternalGetProfileType(&bank_enum="",#timeout_sec=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:245
            // Setup Function Variables
            if(true);
                debug                = true;
                &script_debug_name   = "&6bankingInfoGetProfileType";
                &return_string       = "NONE";
                do_timeout           = %#timeout_sec% > 0;
                #start_time          = %TIMESTAMP%;
        
                // Wrap ENUM Arrays
                if(true);
                    // All valid ENUMs
                    &valid_gui_enums[] = split(", ","UPGRADES, CHOICE, COOP, SOLO, COOP_DEPOSIT, SOLO_DEPOSIT, SIGN_DEPOSIT, COOP_WITHDRAW, SOLO_WITHDRAW, SIGN_WITHDRAW, NONE");
        
                    // ENUMs where we can skip all Bank-related Profile Checks and return 'COOP'.
                    &coop_gui_enums[] = split(", ","CHOICE, COOP, COOP_DEPOSIT, COOP_WITHDRAW");
        
                    // ENUMs to skip all Bank-related Profile Checks and go to `getProfileType()`
                    &invalid_gui_enums[] = split(", ","SIGN_DEPOSIT, SIGN_WITHDRAW, NONE, SOLO_DEPOSIT, SOLO_WITHDRAW");
        
                    // ENUMs to check for 'Go Back' Arrow NBT presence and/or Destination
                    &check_gui_enums[] = split(", ","UPGRADES, SOLO");
                endif;
        
                #gui_enum_index = indexof(&valid_gui_enums[],,%&bank_enum%);
                &return_string  = "NONE";
                if(%#gui_enum_index% == -1);
                    &bank_enum = bankingInfoInternalGetGuiType();
                endif;
        
                #invalid_gui_index = indexof(&invalid_gui_enums[],,%&bank_enum%);
                #check_gui_index   = indexof(&check_gui_enums[],,%&bank_enum%);
                #coop_gui_index    = indexof(&coop_gui_enums[],,%&bank_enum%);
            endif;
        
            // Do Bank-Specific Profile Checks (to avoid having to possibly hit API, if we can).
            if(%#invalid_gui_index% == -1);
                if(%#coop_gui_index% != -1);
                    &return_string = "COOP";
                elseif(%#check_gui_index% != -1);
                    // Get the 'Go Back' Arrow Slot and check it's NBT. If we do not find the Go Back Arrow,
                    // or it's NBT states 'Personal Bank Account', we are in a Solo Profile. If we do find it,
                    // and it's NBT states 'Bank', we are in a Coop Profile.
                    &return_string = "SOLO";
                    #go_back_slot  = findItemContainer(false,"MCID: arrow","NAME: Go Back");
                    if(%#go_back_slot% != -1);
                        &go_back_item = getslotitemnbt(%#go_back_slot%,,#go_back_stack,#go_back_data,&go_back_nbt);
                        &go_back_nbt  = strip(%&go_back_nbt%);
                        ifmatches(%&go_back_nbt%,"To Bank");
                            &return_string = "COOP";
                        endif;
                    endif;
                endif;
            endif;
        
            // If we failed to match any of the conditions above, fall back on a `getProfileType()` call.
            if(%&return_string% == "NONE");
                do;
                    // 1. Check for Function Timeout
                    if(%do_timeout%);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"Timed out!");
                            break;
                        endif;
                    endif;
        
                    // 2. Try to grab the Profile Type from API/Tab List
                    if(true);
                        &profile_type = getProfileType();
                        if((%&profile_type% == "COOP") || (%&profile_type% == "SOLO"));
                            &return_string = %&profile_type%;
                            break;
                        endif;
                    endif;
                until(%&return_string% != "NONE");
            endif;
        
            debug_log(%debug%,%&script_debug_name%,"Returning Profile Type '&d%&return_string%&7'.");
            return(%&return_string%);
        endfunction;
    // banking/index/bankingInfoInternalGetAccountType
        // Checks what Account Type we are in based on what GUI we are in and what Items are present.
            // Params:
                // {string} [&bank_gui_type]    Optional String ENUM returned from the `bankingInfoInternalGetGuiType()` Function.
                //                              If not provided (or invalid), will call `bankingInfoInternalGetGuiType()`.
            // Returns a String ENUM of 'COOP' or 'SOLO', or an empty string if it could not be determined.
            // Example:
                //    &current_account = bankingInfoInternalGetAccountType();
                //    if(%&current_account% == "COOP");
                //        log("In a Coop Bank Account GUI")
                //    elseif(%&current_account% == "SOLO");
                //        log("In a Solo Bank Account GUI")
                //    elseif(%&current_account% == "");
                //        log("Not in a Bank Account GUI")
                //    endif;
        function bankingInfoInternalGetAccountType(&bank_gui_type);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:372
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6bankingInfoGetAccountType";
                &return_string     = "NONE";
                &gui_enum_map[]    = split(", ","UPGRADES, CHOICE, COOP, SOLO, COOP_DEPOSIT, SOLO_DEPOSIT, SIGN_DEPOSIT, COOP_WITHDRAW, SOLO_WITHDRAW, SIGN_WITHDRAW, NONE");
                #gui_enum_index    = indexof(&gui_enum_map[],,%&bank_gui_type%);
                if(%#gui_enum_index% == -1);
                    &bank_gui_type = bankingInfoInternalGetGuiType();
                endif;
            endif;
        
            ifmatches(%&bank_gui_type%,"^(SOLO|COOP)",&profile_type,1);
                &return_string = ucase(%&profile_type%);
            endif;
        
            debug_log(%debug%,%&script_debug_name%,"Returning Account Type '&d%&return_string%&7' from Bank GUI Type '&d%&bank_gui_type%&7'.");
            return(%&return_string%);
        endfunction;
    // banking/index/bankingInfoInternalGetBalances
        // Tries to determine the Balance of the specified Bank Account based on what GUI we are in and what Items are present.
            // Params:
                // {string} [&bank_enum=""]    String ENUM returned from `bankingInfoInternalGetGuiType()` Function. If omitted or invalid, will call
                //                             that Function to grab it.
            // Returns an Array of Strings where Index 0 = Solo Balance, Index 1 = Coop Balance. If either
            // Balance is unable to be determined, it will be an empty String instead.
            // Example:
                //    &bank_balances[] = bankingInfoInternalGetBalances(%&bank_enum%);
                //    &solo_balance    = %&bank_balances[0]%;
                //    &coop_balance    = %&bank_balances[1]%;
        function bankingInfoInternalGetBalances(&bank_enum="");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:403
            // Setup Function Variables
            if(true);
                debug                 = true;
                &script_debug_name    = "&6bankingInfoGetBalance";
                &current_account_type = bankingInfoInternalGetAccountType();
                if(%&current_account_type% == "");
                    &current_account_type = bankingInfoInternalGetProfileType(%&bank_enum%);
                endif;
                &solo_balance         = "";
                &coop_balance         = "";
        
                // Setup GUIs we can find the Balance(s) in, Items we can find the Balance(s) in, etc.
                if(true);
                    // Wrap Generic Items that we can query for the Balance of the Account.
                    if(true);
                        &percent_sign = char("37");
        
                        &find_mcids[] = "chest";
                        &find_names[] = "Deposit Coins";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "dropper";
                        &find_names[] = "Withdraw Coins";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "chest";
                        &find_names[] = "Your whole purse";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "chest";
                        &find_names[] = "Half your purse";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "dropper";
                        &find_names[] = "Everything in the account";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "dropper";
                        &find_names[] = "Half the account";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "dropper";
                        &find_names[] = "Withdraw 20%&percent_sign%";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "sign";
                        &find_names[] = "Specific amount";
                        &find_types[] = %&current_account_type%;
                    endif;
        
                    // Wrap Containers we can find the Balance of an Account in.
                    if(true);
                        &accept_gui     = "GUICHEST";
                        &accept_enums[] = "CHOICE";
                        &solo_enums[]   = "CHOICE";
                        &coop_enums[]   = "CHOICE";
                        
                        push(&accept_enums[],"COOP","COOP_DEPOSIT","COOP_WITHDRAW");
                        push(&coop_enums[],"COOP","COOP_DEPOSIT","COOP_WITHDRAW");
                        &find_mcids[] = "ender_chest";
                        &find_names[] = "Co-op Bank Account";
                        &find_types[] = "COOP";
                        
                        push(&accept_enums[],"SOLO","SOLO_DEPOSIT","SOLO_WITHDRAW");
                        push(&solo_enums[],"SOLO","SOLO_DEPOSIT","SOLO_WITHDRAW");
                        &find_mcids[] = "chest";
                        &find_names[] = "Personal Bank Account";
                        &find_types[] = "SOLO";
                    endif;
                    
                    // Split up '&find_...' into Groups of COOP and SOLO types.
                    if(true);
                        foreach(&find_names[],&find_name,#fn);
                            if(%&find_types[%#fn%]% == "COOP");
                                &coop_mcids[] = %&find_mcids[%#fn%]%;
                                &coop_names[] = %&find_names[%#fn%]%;
                            elseif(%&find_types[%#fn%]% == "SOLO");
                                &solo_mcids[] = %&find_mcids[%#fn%]%;
                                &solo_names[] = %&find_names[%#fn%]%;
                            endif;
                        next;
                    endif;
                endif;
        
                &find_mcids      = join("|",&find_mcids[]);
                &find_mcids_expr = "^(?:%&find_mcids%)$";
                
                &find_names      = join("|",&find_names[]);
                &find_names_expr = "^(?:%&find_names%)$";
                
                &coop_names      = join("|",&coop_names[]);
                &coop_names_expr = "^(?:%&coop_names%)$";
                
                &coop_mcids      = join("|",&coop_mcids[]);
                &coop_mcids_expr = "^(?:%&coop_mcids%)$";
                
                &solo_names      = join("|",&solo_names[]);
                &solo_names_expr = "^(?:%&solo_names%)$";
                
                &solo_mcids      = join("|",&solo_mcids[]);
                &solo_mcids_expr = "^(?:%&solo_mcids%)$";
                
                &balance_expr    = "balance: ([\d,.-]+)";
            endif;
            
            // Get the Balance of each Account that we can get the Balance for.
            if(true);
                #accept_index = indexof(&accept_enums[],,%&bank_enum%);
                if(%#accept_index% == -1);
                    &bank_enum    = bankingInfoInternalGetGuiType();
                    #accept_index = indexof(&accept_enums[],,%&bank_enum%);
                endif;
                
                if(%#accept_index% != -1);
                    &bank_enum  = %&accept_enums[%#accept_index%]%;
                    #coop_index = indexof(&coop_enums[],,%&bank_enum%);
                    #solo_index = indexof(&solo_enums[],,%&bank_enum%);
                    if(%#coop_index% != -1);
                        &check_terms[] = "coop";
                        debug_log(%debug%,%&script_debug_name%,"Current Bank ENUM (&&bank_enum: '&d%&bank_enum%&7') has Item(s) that can contain the COOP Balance, pushing COOP Term to checklist.");
                    endif;
                    if(%#solo_index% != -1);
                        &check_terms[] = "solo";
                        debug_log(%debug%,%&script_debug_name%,"Current Bank ENUM (&&bank_enum: '&d%&bank_enum%&7') has Item(s) that can contain the SOLO Balance, pushing SOLO Term to checklist.");
                    endif;
                    
                    foreach(&check_terms[],&check_term,#ct);
                        &mcids_expr = "%&%&check_term%_mcids_expr%";
                        &names_expr = "%&%&check_term%_names_expr%";
                        #found_slot = findItemContainer(false,"MCID: r$%&mcids_expr%","NAME: r$%&names_expr%","NBT: r$%&balance_expr%");
                        if(%#found_slot% != -1);
                            &found_item = getslotitemnbt(%#found_slot%,,#found_stack,#found_data,&found_nbt);
                            &found_nbt  = strip(%&found_nbt%);
                            ifmatches(%&found_nbt%,%&balance_expr%,&balance_string,1);
                                &balance_string = replace(&balance_string,",");
                                &balance_string = number(%&balance_string%,"F: I","R: T");
                                set("&%&check_term%_balance",%&balance_string%);
                                debug_log(%debug%,%&script_debug_name%,"Set Balance for Variable '&d&&%&check_term%_balance&7' to be '&6%&balance_string%&7' coins.");
                            else;
                                debug_error(%debug%,%&script_debug_name%,"NBT for MCID: '&4%&found_item%&c' did not match Expression '&4%&balance_expr%&7' (NBT: &4%&found_nbt%&7).");
                            endif;
                        else;
                            debug_error(%debug%,%&script_debug_name%,"Could not find any Item that contained the Balance for the '&d%&check_term%&7' Account.");
                        endif;
                    next;
                endif;
            endif;
            
            debug_log(%debug%,%&script_debug_name%,"Found a total of '&6%&coop_balance%&7' coins in the COOP Bank Account, '&6%&solo_balance%&7' coins in the SOLO Bank Account.");
            return(%&solo_balance%,%&coop_balance%);
        endfunction;
    // banking/index/bankingInfoInternalGetBalance
        // Wrapper that calls `bankingInfoInternalGetBalances()` and returns the Balance of the specific Account Type.
            // Params:
                // {string} [&param_account_type="ANY"]    String ENUM of Account Type to query. Valid ENUMs are: ANY, SOLO, COOP.
                //                                         If set to ANY, will return the Balance of the Account that we can query at
                //                                         the moment (will prefer to return the Coop Balance if both are available).
                // {string} [&bank_enum=""]                String ENUM returned from `bankingInfoInternalGetGuiType()` Function. If omitted or invalid, will call
                //                                         that Function to grab it.
            // Returns a String Number of the Coins in the Account, or an empty string if the amount could not be determined.
            // Example:
                //    &coop_balance = bankingInfoInternalGetBalance("COOP",%&bank_enum%);
                //    &solo_balance = bankingInfoInternalGetBalance("SOLO",%&bank_enum%);
                //    log("Found %&coop_balance% coins in the Coop Account, and %&solo_balance% coins in the Solo Account.")
        function bankingInfoInternalGetBalance(&param_account_type="ANY",&bank_enum="");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:568
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6bankingInfoGetBalance&7";
            endif;
            
            &account_type = miscValidate(%&param_account_type%,0,"ANY","COOP","SOLO");
            if(%&account_type% != %&param_account_type%);
                debug_log(%debug%,%&script_debug_name%,"Corrected/defaulted &&param_account_type ('&d%&param_account_type%&7') to &&account_type ('&d%&account_type%&7').");
            endif;
            
            &bank_balances[] = bankingInfoInternalGetBalances(%&bank_enum%);
            &solo_balance    = %&bank_balances[0]%;
            &coop_balance    = %&bank_balances[1]%;
            &return_account  = "NONE";
            if((%&account_type% == "COOP") || ((%&account_type% == "ANY") && (%&coop_balance% != "")));
                &return_string  = %&coop_balance%;
                &return_account = "COOP";
            elseif((%&account_type% == "SOLO") || ((%&account_type% == "ANY") && (%&solo_balance% != "")));
                &return_string  = %&solo_balance%;
                &return_account = "SOLO";
            endif;
            
            debug_log(%debug%,%&script_debug_name%,"Returning Balance of Account '&d%&return_account%&7': '&6%&return_string%&7' coins");
            return(%&return_string%);
        endfunction;
//! @mkb-import-end