//! @mkb-import-begin
    // debug/index/debug_error
        // Logs a message to chat with an error prefix.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_error(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:49
            // &matcher       = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement   = "&$1";
            // &string        = regexreplace(&string,%&matcher%,%&replacement%);
            &error_message = "&4Error > &c%&string%";
            &error_message = regexreplace(&error_message,"&7","&c");
            &error_message = "&7%&script_debug_name%&7: %&error_message%";
            if(%debug_enabled%);
                log(%&error_message%);
            endif;
            return(%&error_message%);
        endfunction;
    // banking/index/bankingActionInternalChangeGUIGetPath
        // Given a Target GUI Type ENUM, and parallel indexed Arrays of all GUI ENUMs, all GUI ENUMs' Child ENUMs, and
        // all GUI ENUM's Parents, compiles a Unique Array of GUI ENUMs in order to click in the GUI.
            // Params:
                // {string} <&target_enum>       The ENUM to get to. Must be present in the <&gui_enums[]> Array.
                // {string} <&gui_enums[]>       Array of GUI ENUM Strings.
                // {string} <&gui_parents[]>     Array of GUI ENUM Strings indexed parallel to <&gui_enums[]>. To indicate
                //                               that a GUI ENUM is the Root Note, make the Parent at that Index an empty string.
                // {string} <&gui_children[]>    Array of Tunnel Joint Array Strings that are GUI ENUMs in the <&gui_enums[]> Array,
                //                               each Entry in this Array will be taken as being a Child of the Element at the same
                //                               index in <&gui_enums[]>. To indicate that a GUI has no Children, use an empty string.
        function bankingActionInternalChangeGUIGetPath(&target_enum,&gui_enums[],&gui_parents[],&gui_children[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:922
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6bankingChangeGUIGetPath&7";
            endif;
            
            #target_index = indexof(&gui_enums[],,%&target_enum%);
            if(%#target_index% == -1);
                &return_array[] = "";
                &gui_enums      = join(", ",&gui_enums[]);
                debug_error(%debug%,%&script_debug_name%,"Target Enum (&&target_enum: %&target_enum%) is not present in the GUI ENUMs (&&gui_enums: [%&gui_enums%]) Array!");
                return(&return_array[]);
            endif;
            
            // Compile list of all GUI ENUMs that are a Parent of the Target ENUM, or a Parent of a Parent of the Target ENUM, and so on.
            if(%&gui_parents[%#target_index%]% != "");
                &parent_enums[] = %&gui_parents[%#target_index%]%;
                #parent_enums[] = 0;
                do;
                    #before_length   = arraysize(&parent_enums[]);
                    #final_index     = %#before_length% - 1;
                    &final_parent    = %&parent_enums[%#final_index%]%;
                    #gui_enums_index = indexof(&gui_enums[],,%&final_parent%);
                    if(%&gui_parents[%#gui_enums_index%]% != "");
                        &parent_enums[] = %&gui_parents[%#gui_enums_index%]%;
                        #parent_enums[] = %#parent_enums[%#final_index%]% + 1;
                    else;
                        break;
                    endif;
                    #after_length = arraysize(&parent_enums[]);
                until(%#before_length% == %#after_length%);
                sort("DSC",#parent_enums[],&parent_enums[]);
            endif;
            
            return(&parent_enums[]);
        endfunction;
    // misc/index/canDoInteraction
        // Checks if we can 'do' an Interaction by determining whether we have waited a whole amount of <#ticks_per_action> in <#waited_ticks>.
        // Basically a modulo operation. If return True, execute Action. If not, skip action and keep waiting.
            // Params:
                // {number} [#waited_ticks=0]    Amount of Ticks that have been waited thus far
                // {number} [#tick_wait=20]      Ticks to wait in between actions
            // Returns a Boolean
            // Example:
                //    can_do_action = canDoInteraction(%#waited_ticks%,%#tick_wait%);
        function canDoInteraction(#waited_ticks=0,#tick_wait=20);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:43
            #actions_done  = %#waited_ticks% / %#tick_wait%;
            #ticks_to_next = %#waited_ticks% - (%#actions_done% * %#tick_wait%);
            can_do_action  = %#ticks_to_next% == 0;
            return(%can_do_action%);
        endfunction;
    // debug/index/debug_log
        // Logs a message to chat if debug is enabled.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_log(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:30
            // &matcher     = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement = "&$1";
            // &string      = regexreplace(&string,%&matcher%,%&replacement%);
            &out_string  = "&7%&script_debug_name%&7: %&string%";
            if(%debug_enabled%);
                log(%&out_string%);
            endif;
            return(%&out_string%);
        endfunction;
    // gui/index/decodeContainerString
        // Decodes a Container String into an Array of it's components.
            // Params:
            //      {string} <&container_string>    A container string generated by getContainerString
            //
            // Returns an Array:
            //  0 {string} &container_gui   The string value of "%GUI%" from the Container String
            //  1 {string} &container_name  The string value of "%CONTAINERNAME%" from the Container String
            //  2 {number} #container_slots The number value of "%CONTAINERSLOTS%" from the Container String
            //
            // If the Container String holds NBT Item Data, elements 3, ... are the ENCODED NBT strings.
            //
        function decodeContainerString(&container_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:358
            &decoded_string = decode(%&container_string%);
            &decoded_vars[] = split("$",%&decoded_string%);
            #decoded_length = arraysize(&decoded_vars[]);
            
            &decoded_data[] = split("|",%&decoded_vars[0]%);
            if(%#decoded_length% > 1);
                &encoded_nbt[] = split("~",%&decoded_vars[1]%);
                push(&decoded_data[],&encoded_nbt[*]);
            endif;
            return(&decoded_data[]);
        endfunction;
    // gui/index/getContainerString
        // Encodes the current values of GUI, CONTAINERNAME, CONTAINERSLOTS, and optionally Slot Data from each slot in the Container
        // into a string using encode(). Used to check if the GUI has updated.
            // Params:
            //      {boolean} [include_items=false] If true, will call indexGUI and append it's data to the Container String.
            //
            // Returns a string encoded with encode() in format 'GUI|CONTAINERNAME|CONTAINERSLOTS[$<slot_nbt>~<slot_nbt>~<...>]'.
            // The [$<slot_nbt>~<slot_nbt>~<...>] portion is only included if [include_items] is true.
        function getContainerString(include_items=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:274
            &env_var_str = "%GUI%|%CONTAINERNAME%|%CONTAINERSLOTS%";
            if(%include_items%);
                if(%CONTAINERSLOTS% > 0);
                    #container_start = 0;
                    #container_end   = %CONTAINERSLOTS% - 37;
                    #inventory_start = %CONTAINERSLOTS% - 36;
                    #inventory_end   = %CONTAINERSLOTS% - 1;
                    #range_start     = %#container_start%;
                    #range_end       = %#inventory_end%;
                    for(#slot,%#range_start%,%#range_end%);
                        &f_item     = getslotitemnbt(%#slot%,,#f_stack,#f_data,&f_nbt);
                        &f_nbt      = strip(%&f_nbt%);
                        &f_nbt      = encode(%&f_nbt%);
                        &out_data[] = "%&f_item%|%#f_stack%|%#f_data%|%&f_nbt%";
                    next;
                endif;
                &gui_items   = join("~",&out_data[]);
                &env_var_str = "%&env_var_str%$%&gui_items%";
            endif;
            &return_string = encode(%&env_var_str%);
            return(%&return_string%);
        endfunction;
    // gui/index/enteredNewGUI
        // Checks if we are in a new GUI by comparing the <&init_container_string> to the current Container String returned by getContainerString.
            // Params:
            //      {string} <&init_container_string>   A Container String generated when we were on the Initial GUI that we want to check for an Update from.
            //      {boolean} [include_items=false]     Set this to true if [include_items] was used on the Initial call to getContainerString.
            //
            // Returns a boolean indicating whether or not the GUI has changed.
        function enteredNewGUI(&init_container_string,include_items=false,allow_mouse_full=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:304
            &mouse_item = getmouseitem(,#mouse_stack,#mouse_data,&mouse_nbt);
            if((%&mouse_item% != "air") && (!%allow_mouse_full%));
                return(False);
            endif;
            
            &mouse_nbt             = strip(%&mouse_nbt%);
            &mouse_nbt             = encode(%&mouse_nbt%);
            &curr_container_string = getContainerString(%include_items%);
            if(&curr_container_string != &init_container_string);
                if(%include_items%);
                    &init_data[] = call("decodeContainerString",%&init_container_string%);
                    &curr_data[] = call("decodeContainerString",%&curr_container_string%);
                    foreach(&init_data[],&init_data,#dei);
                        &curr_data = %&curr_data[%#dei%]%;
                        if(%&curr_data% != %&init_data%);
                            if(%#dei% <= 2);
                                return_boolean = True;
                                break;
                            else;
                                &init_data_arr[] = split("|",%&init_data%);
                                &init_data_item  = %&init_data_arr[0]%;
                                &init_data_nbt   = %&init_data_arr[3]%;
                                &curr_data_arr[] = split("|",%&curr_data%);
                                &curr_data_item  = %&curr_data_arr[0]%;
                                &curr_data_nbt   = %&curr_data_arr[3]%;
                                mouse_match      = (((%&init_data_item% == "air") && (%&mouse_nbt% == %&curr_data_nbt%)) || ((%&curr_data_item% == "air") && (%&mouse_nbt% == %&init_data_nbt%)));
                                
                                if(!%mouse_match%);
                                    return_boolean = True;
                                    break;
                                endif;
                            endif;
                        endif;
                    next;
                    return(%return_boolean%);
                endif;
                
                return(True);
            endif;
            return(False);
        endfunction;
    // info/index/hasTimeExceeded
        // Used to determine whether to timeout a function.
            // Params:
                // {number} <#start_time>        The start timestamp to subtract from current timestamp
                // {number} <#timeout_sec>       The amount of seconds to check if difference between now & start is >=.
                // {number} [do_timeout=true]    If false, will always return false (used as shorthand for functions that
                //                               use this function to determine whether or not they have timed out).
            // Returns a boolean indicating whether or not <#start_timestamp> was >= <#seconds> ago.
            // Example:
                //    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
        function hasTimeExceeded(#start_time,#timeout_sec,do_timeout=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:10
            #elapsed_sec   = %TIMESTAMP% - #start_time;
            return_boolean = ((%do_timeout%) && (#elapsed_sec >= #timeout_sec));
            return(%return_boolean%);
        endfunction;
    // gui/clickUntilUpdate/containerClick
        // Clicks on a Slot in a GUI until the GUI updates.
            // Params:
                // {number}  <#click_slot>          The Slot to Click on.
                // {number}  [#timeout_sec=30]      The Maximum Amount of Seconds to try to Click for before timing out.
                // {number}  [#tick_wait=20]        Ticks to wait between clicks.
                // {boolean} [check_items=false]    Whether or not to check items in the getContainerString and enteredNewGUI calls to
                //                                  help determine whether or not our GUI has updated.
                // {boolean} [right_click=false]    Whether or not to right click. Will left click if false.
                // {boolean} [shift_click=false]    Whether or not to shift click.
            // Returns a Boolean indicating whether or not we were able to get the GUI to update before timeout.
            // Example:
                //    updated_gui = containerClick(%#click_slot%,%#timeout_sec%,%#tick_wait%,%right_click%,%shift_click%);
        function containerClick(#click_slot,#timeout_sec=30,#tick_wait=20,check_items=false,right_click=false,shift_click=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/clickUntilUpdate.txt:13
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&7containerClick";
                do_timeout         = %#timeout_sec% > 0;
                #start_time        = %TIMESTAMP%;
            endif;
            
            // Loop until we have hit our return condition.
            if(true);
                if(%CONTAINERSLOTS% <= 0);
                    debug_error(%debug%,%&script_debug_name%,"Not in a clickable GUI at runtime!");
                    return(false);
                elseif(%right_click%);
                    &click_mode = "right";
                else;
                    &click_mode = "left";
                endif;
                
                &init_gui = getContainerString(%check_items%);
                do;
                    // Check for Function Timeout
                    if(%do_timeout%);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"Failed to update the GUI, function timed out.");
                            break;
                        endif;
                    endif;
                    
                    // Check if we are in a new GUI.
                    if(%clicked%);
                        gui_updated = enteredNewGUI(%&init_gui%,%check_items%);
                        if(%gui_updated%);
                            debug_log(%debug%,%&script_debug_name%,"gui has updated!");
                            break;
                        endif;
                        debug_log(%debug%,%&script_debug_name%,"gui has not yet updated");
                    endif;
                    
                    // Check if we can click the Slot again.
                    can_click = canDoInteraction(%#waited_ticks%,%#tick_wait%);
                    if(%can_click%);
                        slotclick(%#click_slot%,%&click_mode%,%shift_click%);
                        clicked = true;
                    endif;
                    
                    wait("1t");
                    inc(#waited_ticks);
                until((%gui_updated%) || (%GUI% == "NONE") || (%func_timeout%));
            endif;
            
            return(%gui_updated%);
        endfunction;
    // info/index/_matchExpressionNBT
        // Used by getItemName, getItemUUID, getItemSBID to extract a regular expression capture group from NBT Data.
            // Params:
            //      {string} <&haystack>    The string to extract the first capture group from.
            //      {string} <&expression>  The expression to test against <&haystack>, must have at least one capture group.
            //
            // Returns the first capture group's content from the <&expression> match, or an empty string if no match is found.
        function _matchExpressionNBT(&haystack,&expr);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:34
            &return_string = "";
            ifmatches(%&haystack%,%&expr%,&capture_group,1);
                &return_string = %&capture_group%;
            endif;
            return(%&return_string%);
        endfunction;
    // info/index/getItemUUID
        // Given the NBT Data of an Item, extracts the Item's UUID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item UUID from.
            //
            // Returns the Item's UUID, or an empty string if one is not found.
        function getItemUUID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:92
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"uuid:\"(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\"");
            return(%&return_string%);
        endfunction;
    // info/index/getItemSBID
        // Given the NBT Data of an Item, extracts the Item's SBID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item SBID from.
            //
            // Returns the Item's SBID, or an empty string if one is not found.
        function getItemSBID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:103
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"\bid\"?\s*:\"([A-Z_0-9:]+)\"");
            return(%&return_string%);
        endfunction;
    // info/index/getItemName
        // Given the NBT Data of an Item (and optionally it's base item), extracts the Display Name of the Item from the NBT Data.
            // Params:
            //      {string} <&nbt>         The NBT Data to extract the Name from.
            //      {string} [&item="air"]  The Item this NBT Data was collected from (only used in cases where the Item's Name cannot be found).
            //      {boolean} [strip=true]  Whether or not to strip formatting codes from the extracted Name.
            //
            // Returns the Display Name of the Item found from it's NBT Data, with formatting codes stripped if [strip] is true.
        function getItemName(&nbt,&item="air",strip=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:49
            ifmatches(%&nbt%,".*\bName\s*:\"\s*(.*?)\"",&found_name,1);
                if(%strip%);
                    &found_name = strip(%&found_name%);
                endif;
            elseif(%&item% == "air");
                &found_name = "Air";
            endif;
            return(%&found_name%);
        endfunction;
    // string/index/regexEscape
        // string/index.txt
        // Counts occurences of a given string within another string.
            // Params:
            //        <string> &source_string : The string to count occurences of &search_string in.
            //        <string> &search_string : The string to count occurences of.
            //
            // Returns the integer amount of occurences found.
        function countOccurencesInString(&source_string,&search_string);
            &script_debug_name  = "&9countOccurencesInString&7";
            debug               = false;
            ifcontains(%&source_string%,%&search_string%);
                &split_source_arr[] = split(%&search_string%,%&source_string%);
                #occurences         = arraysize(&split_source_arr[]);
                if(%#occurences% == 0); // source string exclusively held repetitions of the search string
                    #source_length = strlen(%&source_string%);
                    #search_length = strlen(%&search_string%);
                    #occurences    = %#source_length% / %#search_length%;
                endif;
            endif;
            return(%#occurences%);
        endfunction;
        
        // Checks if a string matches UUID regex.
            // Params:
            //        <string> &check_string : The string to check
            //
            // Returns a boolean.
            //
        function isStringUUID(&check_string);
            &script_debug_name = "&9isStringUUID&7";
            debug              = false;
            &split_uuid_expr   = "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$";
            &joint_uuid_expr   = "^[a-f0-9]{32}$";
            &uuid_exprs[]      = split(", ","%&split_uuid_expr%, %&joint_uuid_expr%");
            foreach(&uuid_exprs[],&uuid_expr);
                ifmatches(%&check_string%,%&uuid_expr%);
                    match_found = true;
                    break;
                endif;
            next;
            return(%match_found%);
        endfunction;
        
        // Checks if a string matches Boolean regex
            // Params:
                // {string} <&check_string>    The String to Check
            // Returns a Boolean
        function isStringBoolean(&check_string);
            &check_string_lcase = lcase(%&check_string%);
            &boolean_values[]   = split(", ","true, false, 1, 0");
            return_boolean      = arrayincludes(&boolean_values[],%&check_string_lcase%);
            return(%return_boolean%);
        endfunction;
        
        // Checks if a String is a valid Integer.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Integer.
        function isStringInteger(&check_string);
            ifmatches(%&check_string%,"^[0-9-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Float (without commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringFloat(&check_string);
            ifmatches(%&check_string%,"^[0-9-]*\.[0-9]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Float/Number (with commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Formatted Number.
        function isStringFormattedNumber(&check_string);
            ifmatches(%&check_string%,"^[\d-]+,[\d.,-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Number, coercable to a Float of some sort.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringNumber(&check_string);
            &call_functions[] = split(", ","isStringInteger, isStringFloat, isStringFormattedNumber");
            foreach(&call_functions[],&call_function,#cfi);
                if(%&call_function% == "isStringInteger");
                    return_boolean = isStringInteger(%&check_string%);
                elseif(%&call_function% == "isStringFloat");
                    return_boolean = isStringFloat(%&check_string%);
                elseif(%&call_function% == "isStringFormattedNumber");
                    return_boolean = isStringFormattedNumber(%&check_string%);
                endif;
                if(%return_boolean%);
                    break;
                endif;
            next;
            return(%return_boolean%);
        endfunction;
        
        // Coerces a given String to a Number (no decimal points).
            // Params:
                // {string} <&convert_string>    The String to Convert.
                // {number} [#precision=0]       Decimal Precision
            // Returns the Number result of the coercion.
        function stringToNumber(&convert_string,#precision=0);
            #convert_number = coerceNumber(%&convert_string%);
            return(%#convert_number%);
        endfunction;
        
        function isStringBoolean(&check_string);
            if(%&check_string% == "");
                return_boolean = true;
            else;
                &boolean_coercable[] = split(", ","0, 1, true, false, True, False");
                #boolean_index       = indexof(&boolean_coercable[],,%&check_string%);
                return_boolean       = %#boolean_index% != -1;
            endif;
            return(%return_boolean%);
        endfunction;
        
        function stringToBoolean(&convert_string);
            is_coercable = isStringBoolean(%&convert_string%);
            if(%is_coercable%);
                return_boolean := %&convert_string%;
            elseifmatches(%&convert_string%,"\S");
                return_boolean  = true;
            else;
                return_boolean  = false;
            endif;
            return(%return_boolean%);
        endfunction;
        
        function regexEscape(&input_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:141
            &split_array[]  = split("\\",%&input_string%);
            foreach(&split_array[],&curr_char,#curr_index);
                if(%&curr_char% == "\\");
                    #last_index = #curr_index - 1;
                    #next_index = #curr_index + 1;
                    &last_char  = %&split_array[%#last_index%]%;
                    &next_char  = %&split_array[%#next_index%]%;
                    
                    // If this backslash is escaped already (last char == '\'), then we do not need to escape this char.
                    // If the backslash is escaping another backslash (next char == '\'), then we do not need to escape this char.
                    if((%&last_char% != "\\") && (%&next_char% != "\\"));
                        &rejoin_array[] = "\\";
                    endif;
                    &rejoin_array[] = %&curr_char%;
                else;
                    &rejoin_array[] = %&curr_char%;
                endif;
            next;
            &rejoint_string = join("",&rejoin_array[]);
            &search_string  = "(?<!\\\\)(?:\+|\*|\?|\^|\$|\.|\[|\]|\{|\}|\(|\)|\||\/)";
            &escaped_string = regexreplace(&rejoint_string,%&search_string%,"\\\$0");
            return(%&escaped_string%);
        endfunction;
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/xEval
        // Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&expression>              The arithmetic expression to evaluate with `eval`.
                // {boolean} [coerce_integer=false]    If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
            // Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
        function xEval(&expression,coerce_integer=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:276
            debug              = false;
            &script_debug_name = "&9xEval&7";
            debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
            &return_string     = eval(%&expression%);
            debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
            &return_string     = convertENote(%&return_string%);
            debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
            if(%coerce_integer%);
                debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
                &return_string = formatnumber(%&return_string%,0,true);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
            return(%&return_string%);
        endfunction;
    // misc/index/miscValidate
        // Validates that <&search_term> is found in the <&array[]>, and/or if it is not found in the <&array[]>, the value of the element
        // found at [#default_idx=0] is returned. Set [#default_idx] to -1 to indicate that no default value should be used.
            // Params:
            //      {array} <&elements[]>       The Array to search for <&search_term> in.
            //      {string} <&search_term>     The Search Term to check if exists in <&elements[]>.
            //      {number} [#default_idx=0]   The Index of the Element in <&elements[]> to use as the default return value
            //                                  if <&search_term> is not found within the Array. If -1, will be taken as no default
            //                                  value should be used.
            //
            // Returns the element from the <&elements[]> Array that <&search_term> matches, or if no match was found and [#default_idx]
            // is not -1, the element at [#default_idx] in the <&elements[]> Array. If [#default_idx] is -1, an empty string is returned.
        function miscValidate(&search_term,#default_idx=0,...&elements[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:12
            #term_index = indexof(&elements[],,%&search_term%);
            if(%#term_index% != -1);
                &return_string = %&elements[%#term_index%]%;
            elseif(%#default_idx% != -1);
                &return_string = %&elements[%#default_idx%]%;
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/coerceNumber
        // Coerces an input number string into a valid integer. The input number string can be in E Notation, or contain
        // commas, or contain decimal values, or any mix of the above.
            // Params:
                // {string} <&number_string>                The Number String to Convert into a valid Integer.
                // {string} [&rounding_strategy="ROUND"]    String ENUM that dictates how to handle decimal values. Valid values are:
                //                                          FLOOR (towards negative infinity), CEILING|CEIL (towards positive infinity),
                //                                          TRUNCATE|TRUNC (rounds up or down towards 0), ROUND (towards nearest integer).
                //                                          Defaults to ROUND if omitted or an invalid input is provided.
            // Returns the Number coerced into a valid Integer (real-integer type, not string type. If the input string is not
            // coercable at all, 0 will be returned). If the final value before coercion to integer contains decimals, the coerced value
            // will be rounded according to the [&rounding_strategy] parameter.
            // Example:
                //    Converting a comma split, float string into an Integer
                    //    &number_string     = "100,000.9171";
                    //    &rounding_strategy = "ROUND";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
                    //    log("#number_integer: %#number_integer%"); // '#number_integer: 100001'
                //    Replace the content in the Parameters as needed:
                    //    &number_string     = "Can contain commas, decimals, e. notation, or mix of all three.";
                    //    &rounding_strategy = "One of: FLOOR, CEILING|CEIL, TRUNCATE|TRUNC, ROUND, or empty string.";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
        function coerceNumber(&number_string,&rounding_strategy="ROUND");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:343
            &number_string = replace(&number_string,",");
            &number_string = convertENote(%&number_string%);
            ifcontains(%&number_string%,".");
                &rounding_strategy = miscValidate(%&rounding_strategy%,0,"ROUND","FLOOR","CEILING","CEIL","TRUNCATE","TRUNC");
                if(%&rounding_strategy% == "ROUND");
                    // Round the decimal value to the nearest integer.
                    &return_string = formatnumber(%&number_string%,0,true);
                elseif((%&rounding_strategy% == "TRUNCATE") || (%&rounding_strategy% == "TRUNC"));
                    // Exclude the decimal value entirely.
                    &return_string = regexreplace(&number_string,"\.\d*$");
                else;
                    // Use xEval to evaluate the number_string with the corresponding rounding_term. Instruct
                    // xEval to coerce the value into an integer for us, so any trailing ".0" is stripped from it's
                    // return value.
                    if((%&rounding_strategy% == "CEILING") || (%&rounding_strategy% == "CEIL"));
                        &rounding_term = "ceil";
                    elseif(%&rounding_strategy% == "FLOOR");
                        &rounding_term = "floor";
                    endif;
                    &return_string = xEval("%&rounding_term%(%&number_string%)",true);
                endif;
            else;
                // The Number does not contain a decimal value to begin with, return as usual.
                &return_string = %&number_string%;
            endif;
            return(%&return_string%);
        endfunction;
    // gui/index/findItemContainer
        // Given any (or all, or any mix of) an Item's MCID, Name, SBID, and/or UUID, finds the Item in the Container and returns it's Slot.
            // Params:
                // {string} [...&filter_params[]]    An Array of Strings in format: [<PARAM_ENUM>: <FILTER>], where PARAM_ENUM can be any of:
                //                                   MCID|ITEM, DATA, STACK, NAME, SBID, NBT, or UUID. <FILTER> can be a Regular Expression or an Exact String.
                //                                   If Passing an Expression, prefix the Filter with 'r$'. All characters following the 'r$' will be used
                //                                   as the Expression.
                // {boolean} [return_arr=false]      If set to True, will return an Array of Slots matching the specified Filters. If set to False, will
                //                                   return the first Slot ID found that matches the Filters.
            // Returns the Slot ID(s) of the Item(s) found, or -1 if no Item(s) could be found. Will return -1 if CONTAINERSLOTS <= 0.
        function findItemContainer(return_arr=false,...&filter_params[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:1092
            #return_val = -1;
            
            // Setup Filter Parameters
            if(true);
                &valid_enums[] = split(", ","MCID, ITEM, DATA, STACK, NAME, SBID, UUID, NBT, SLOT");
                foreach(&filter_params[],&filter_param,#fpi);
                    ifmatches(%&filter_param%,"^(.+?):\s*(.+)$");
                        match(%&filter_param%,"^(.+?):\s*(.+)$",{&param_enum,&param_filter});
                        #enum_index = indexof(&valid_enums[],,%&param_enum%);
                        if(%#enum_index% != -1);
                            &param_enum = %&valid_enums[%#enum_index%]%;
                            if(%&param_enum% == "SLOT");
                                #prioritize_slot   = coerceNumber(%&param_filter%);
                                #prioritized_index = indexof(#prioritized_slots[],,%#prioritize_slot%);
                                if(%#prioritized_index% == -1);
                                    #prioritized_slots[] = %#prioritize_slot%;
                                endif;
                            else;
                                if(%&param_enum% == "ITEM");
                                    &param_enum = "MCID";
                                endif;
                                
                                ifmatches(%&param_filter%,"^r\$(.+)",&param_expression,1);
                                    &param_filter = %&param_expression%;
                                else;
                                    &param_filter = regexEscape(%&param_filter%);
                                    &param_filter = "^%&param_filter%$";
                                endif;
                                
                                &enum_array = lcase("&%&param_enum%_regex[]");
                                &enum_bool  = lcase("do_%&param_enum%");
                                push(%&enum_array%,%&param_filter%);
                                set(%&enum_bool%);
                            endif;
                        endif;
                    endif;
                next;
                
                foreach(&valid_enums[],&valid_enum);
                    if((%&valid_enum% != "SLOT") && (&valid_enum% != "ITEM"));
                        &enum_bool = lcase("do_%&valid_enum%");
                        enum_bool := "%%&enum_bool%%";
                        if(%enum_bool%);
                            &enum_array = lcase("&%&valid_enum%_regex[]");
                            &enum_value = join("|",%&enum_array%);
                            &enum_value = "(?:%&enum_value%)";
                            &enum_regex = lcase("&%&valid_enum%_regex");
                            set(%&enum_regex%,%&enum_value%);
                        endif;
                    endif;
                next;
                
                //    Array Name        |    Boolean Name    |    Regex String
                //    &mcid_regex[]     |    do_mcid         |    &mcid_regex
                //    &data_regex[]     |    do_data         |    &data_regex
                //    &stack_regex[]    |    do_stack        |    &stack_regex
                //    &name_regex[]     |    do_name         |    &name_regex
                //    &sbid_regex[]     |    do_sbid         |    &sbid_regex
                //    &uuid_regex[]     |    do_uuid         |    &uuid_regex
                //    &nbt_regex[]      |    do_nbt          |    &nbt_regex
            endif;
            
            // Iterate over Inventory Slots
            if(%CONTAINERSLOTS% >= 1);
                #r_start            = 0;
                #r_end              = %CONTAINERSLOTS% - 37;
                &r_filter[]         = split(", ","mcid, data, stack, name, sbid, uuid, nbt");
                
                #prioritize_slot_sz = arraysize(#prioritize_slot[]);
                if(%#prioritize_slot_sz% >= 1);
                    foreach(#prioritize_slot[],#prioritize_slot,#ps);
                        &f_mcid = getslotitemnbt(%#prioritize_slot%,,&f_stack,&f_data,&f_nbt);
                        &f_nbt  = strip(%&f_nbt%);
                        f_valid = true;
                        foreach(&r_filter[],&r_term,#rti);
                            &f_bool  = "do_%&r_term%";
                            f_bool  := "%%&f_bool%%";
                            if(%f_bool%);
                                if(%#rti% >= 3);
                                    if(%&r_term% == "name");
                                        &f_value = getItemName(%&f_nbt%,%&f_mcid%);
                                    elseif(%&r_term% == "sbid");
                                        &f_value = getItemSBID(%&f_nbt%);
                                    elseif(%&r_term% == "uuid");
                                        &f_value = getItemUUID(%&f_nbt%);
                                    elseif(%&r_term% == "nbt");
                                        &f_value = %&f_nbt%;
                                    endif;
                                else;
                                    &f_value = "&f_%&r_term%";
                                    &f_value = "%%&f_value%%";
                                endif;
                                &f_regex = "&%&r_term%_regex";
                                &f_regex = "%%&f_regex%%";
                                ifnotmatches(%&f_value%,%&f_regex%);
                                    // log("Term %&r_term% > No match between value %&f_value% and expression %&f_regex%");
                                    f_valid = false;
                                    break;
                                endif;
                            endif;
                        next;
                        
                        if(%f_valid%);
                            if(!%return_arr%);
                                #return_val = %#f_slot%;
                                break;
                            endif;
                            #return_val[] = %#f_slot%;
                        endif;
                    next;
                endif;
                for(#f_slot,%#r_start%,%#r_end%);
                    &f_mcid = getslotitemnbt(%#f_slot%,,&f_stack,&f_data,&f_nbt);
                    &f_nbt  = strip(%&f_nbt%);
                    f_valid = true;
                    foreach(&r_filter[],&r_term,#rti);
                        &f_bool  = "do_%&r_term%";
                        f_bool  := "%%&f_bool%%";
                        if(%f_bool%);
                            if(%#rti% >= 3);
                                if(%&r_term% == "name");
                                    &f_value = getItemName(%&f_nbt%,%&f_mcid%);
                                elseif(%&r_term% == "sbid");
                                    &f_value = getItemSBID(%&f_nbt%);
                                elseif(%&r_term% == "uuid");
                                    &f_value = getItemUUID(%&f_nbt%);
                                elseif(%&r_term% == "nbt");
                                    &f_value = %&f_nbt%;
                                endif;
                            else;
                                &f_value = "&f_%&r_term%";
                                &f_value = "%%&f_value%%";
                            endif;
                            &f_regex = "&%&r_term%_regex";
                            &f_regex = "%%&f_regex%%";
                            ifnotmatches(%&f_value%,%&f_regex%);
                                // log("Term %&r_term% > No match between value %&f_value% and expression %&f_regex%");
                                f_valid = false;
                                break;
                            endif;
                        endif;
                    next;
                    
                    if(%f_valid%);
                        if(!%return_arr%);
                            #return_val = %#f_slot%;
                            break;
                        elseif(%#prioritize_slot_sz% <= 0);
                            #return_val[] = %#f_slot%;
                        else;
                            #return_index = indexof(#return_val[],,%#f_slot%);
                            if(%#return_index% == -1);
                                #return_val[] = %#f_slot%;
                            endif;
                        endif;
                    endif;
                next;
            endif;
            
            if(%return_arr%);
                #return_val_sz = arraysize(#return_val[]);
                if(%#return_val_sz% == 0);
                    #return_val[] = -1;
                endif;
                return(#return_val[]);
            endif;
            return(%#return_val%);
        endfunction;
    // gui/index/localGUI
        // Changes the current GUI to a local GUI.
            // Params:
            //      {string} [&target_gui="NONE"]         - The Target GUI to switch to. Can be any of the following strings:
            //                                              "NONE", "GUIINVENTORY", "GUICHAT".
            //      {number} [#wait_ticks=@#def_wait_ticks]- Amount of ticks (1t = 50ms) to wait between each action (press/GUI).
            //
            // Returns a boolean indicating whether or not GUI == <&target_gui> at end of function.
        function localGUI(&target_gui="NONE",#wait_ticks=20);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:11
            &valid_guis[] = split(", ","NONE, GUIINVENTORY, GUICHAT");
            #valid_gui    = indexof(&valid_guis[],,%&target_gui%);
            if(#valid_gui == -1);
                #valid_gui = 0;
            endif;
            &target_gui = ucase(%&valid_guis[%#valid_gui%]%);
            
            do;
                if(%GUI% == %&target_gui%);
                    break;
                elseif(%GUI% != "NONE");
                    press("escape");
                    do(%#wait_ticks%);
                        wait("1t");
                    until(%GUI% == "NONE");
                else;
                    if(%&target_gui% == "GUIINVENTORY");
                        gui("inventory");
                    elseif(%&target_gui% == "GUICHAT");
                        gui("chat");
                    endif;
                    
                    do(%#wait_ticks%);
                        wait("1t");
                    until(%GUI% != "NONE");
                endif;
            until(%GUI% == %&target_gui%);
            return_boolean = %GUI% == %&target_gui%;
            return(%return_boolean%);
        endfunction;
    // movement/index/splitCoordString
        // Given a coordinate string, splits it up by tunnel characters and returns an integer array.
            // Params:
            //      {string} [&coord_string="%XPOS%|%YPOS%|%ZPOS%"] The coordinate string to split up
            //
            // Returns an Array where the 0th element is the XPOS, 1st is YPOS, and 2nd is ZPOS.
        function splitCoordString(&coord_string="%XPOS%|%YPOS%|%ZPOS%");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:6
            &pos[] = split("|",%&coord_string%);
            &x     = %&pos[0]%;
            &y     = %&pos[1]%;
            &z     = %&pos[2]%;
            &arr[] = split(", ","%&x%, %&y%, %&z%");
            return(&arr[]);
        endfunction;
    // movement/index/fnCalcYawTo
        // Given an X, Y, Z value (and/or coordinate string), calculates the yaw and pitch values required to look at the value.
            // Params:
            //      {string} <&coordinate_string>   The Coordinate String, or X position.
            //      {string} [&y_pos]               The Y position (only required if <&coordinate_string> is a single value).
            //      {string} [&z_pos]               The Z position (only required if <&coordinate_string> is a single value).
            //
            // Returns an Array where element 0 = yaw, element 1 = dist, element 2 = pitch.
        function fnCalcYawTo(&coordinate_string,&y_pos,&z_pos);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:34
            &x_pos = %&coordinate_string%;
            ifmatches(%&coordinate_string%,"(.+)\|(.+)\|(.+)");
                &split_pos[] = splitCoordString(%&coordinate_string%);
                &x_pos       = %&split_pos[0]%;
                &y_pos       = %&split_pos[1]%;
                &z_pos       = %&split_pos[2]%;
            endif;
            
            calcyawto(%&x_pos%,%&y_pos%,%&z_pos%,#calc_yaw,#calc_dist,#calc_pitch);
            #calc_yaw = %#calc_yaw% + 180;
            if(%#calc_yaw% > 360);
                #calc_yaw = %#calc_yaw% - 360;
            elseif(%#calc_yaw% == 360);
                #calc_yaw = 0;
            endif;
            
            return(%#calc_yaw%,%#calc_dist%,%#calc_pitch%);
        endfunction;
    // info/index/getEntityPos
        // Given an Entity Name expression (and optionally the Entity Type and/or Range), uses the Entities Iterator to find them and return their position.
            // Params:
            //      {string} <&entity_expr>         A regular expression to use in the iterator filter
            //      {string} [&entity_type]         Optional entity type to use in the iterator filter
            //      {string} [&entity_range]        Optional max range to use in the iterator filter
            //      {boolean} [return_float=false]  If set to true, will return the entity's XPOSF, YPOSF, ZPOSF instead of integers.
            //
            // Returns an Array where element 0 = XPOS[F], 1 = YPOS[F], 2 = ZPOS[F]. Will return a string array no matter what,
            // if cannot find entity the first value of this array will be an empty string.
        function getEntityPos(&entity_expr,&entity_type="",&entity_range="",return_float=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:610
            &filter_terms[] = "name:%&entity_expr%";
            if(%&entity_type% != "");
                &filter_terms[] = "type:%&entity_expr%";
            endif;
            &filter_terms = join(",",&filter_terms[]);
            &filter_terms = "filter:{%&filter_terms%}"
            if(%&entity_range% != "");
                &filter_terms = "%&filter_terms%,range:%&entity_range%";
            endif;
            
            foreach("entities(%&filter_terms%)");
                if(%return_float%);
                    &out_arr[] = %ENTITYXPOSF%;
                    &out_arr[] = %ENTITYYPOSF%;
                    &out_arr[] = %ENTITYZPOSF%;
                else;
                    &out_arr[] = %ENTITYXPOS%;
                    &out_arr[] = %ENTITYYPOS%;
                    &out_arr[] = %ENTITYZPOS%;
                endif;
                found = true;
                break;
            next;
            
            if(!%found%);
                &out_arr[0] = "";
            endif;
            return(&out_arr[]);
        endfunction;
    // movement/index/isStalled
        // Used to check if the player is "stalled" (not moving more than [#stall_break] absolute distance)
        // for more than [#seconds] seconds.
            // Params:
            //      {number} #start_timestamp   The timestamp the last known 'unstalled' position was recorded at
            //      {string} &start_position    The coordinate string of the last known 'unstalled' position
            //      {number} [#seconds=5]       Amount of seconds required to have passed with no more than [#stall_break]
            //                                  blocks of absolute movement to consider as a stall
            //      {number} [#stall_break=3]   Blocks of absolute movement required to consider as having moved
            //
            // Returns an Array where element 0 is a boolean indicating whether or not the Player is stalled, and
            // element 1 is a boolean indicating whether or not to update the stall position / timestamp.
        function isStalled(#start_timestamp=%TIMESTAMP%,&start_position="%XPOS%|%YPOS%|%ZPOS%",#seconds=5,#stall_break=3);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:65
            #last_pos[] = splitCoordString(%&start_position%);
            #curr_pos[] = splitCoordString();
            #abs_diff   = xEval("sqrt((%#last_pos[0]% - %#curr_pos[0]%)^2) + sqrt((%#last_pos[1]% - %#curr_pos[1]%)^2) + sqrt((%#last_pos[2]% - %#curr_pos[2]%)^2)",true);
            
            update_pos = #abs_diff >= #stall_break;
            is_stalled = !%update_pos%;
            if(%is_stalled%);
                is_stalled = hasTimeExceeded(%#start_timestamp%,%#seconds%);
            endif;
            return(%over_limit%,%update_pos%);
        endfunction;
    // info/index/withinBounds
        // Checks if a number is <= min && >= max.
            // Params:
            //      {number} <#number>  The number to check if is between min && max.
            //      {number} <#min>     The minimum value for <#number>
            //      {number} <#max>     The maximum value for <#number>
            //
            // Returns a boolean indicating whether or not the number is between the specified values.
        function withinBounds(#number,#min,#max);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:23
            return_boolean = ((#number >= #min) && (#number <= #max));
            return(%return_boolean%);
        endfunction;
    // movement/index/getCoordString
        // Generates a coordinate string from the input numbers
            // Params:
            //      {number} [#x=%XPOS%]    The X Position
            //      {number} [#x=%YPOS%]    The Y Position
            //      {number} [#x=%ZPOS%]    The Z Position
            //
            // Returns the coordinate string.
        function getCoordString(#x=%XPOS%,#y=%YPOS%,#z=%ZPOS%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:22
            &coord_string = "%XPOS%|%YPOS%|%ZPOS%";
            return(%&coord_string%);
        endfunction;
    // movement/index/baritoneGoto
        // Takes input of a coordinate position in the world to move to, as well as optional setting pairs to pass along
        // to baritone, then instructs Baritone to move to the position in the world.
            // Params:
            //      {string} <&target_position>     The Coordinate string to move to (X|Y|Z).
            //      {string} [&coord_bounds[]]      An optional array of coordinate bounds (idx 0 = min coord bound, idx 1 = max coord bound)
            //                                      strings. If provided, will exit the function and kill Baritone should the Player exit
            //                                      these bounds.
            //      {number} [#timeout_sec=300]     Maximum amount of seconds for the function to wait before timing out and exiting. Set to -1
            //                                      to disable timeouts.
            //      {number} [#stall_sec=5]         Maximum amount of seconds for the function to be stalled in nearly the same X/Y/Z position (no more
            //                                      than 3 blocks of absolute distance) before timing out and exiting. Set to -1 to disable stall timeouts.
            //      {string} [...&setting_pairs[]]  An optional array of key value Baritone Setting pairs to pass through to
            //                                      Baritone before executing the movement. By default, this function will always
            //                                      use the settings defined below. If you pass in these settings' keys, your values
            //                                      will be used instead of the defaults. You can pass in other settings as well, if
            //                                      needed. The format to pass key value pairs in is: '<key>|<value>'.
                // Baritone Settings Used:
                //  allowPlace              : false
                //  allowBreak              : false
                //  allowSprint             : true
                //  allowDiagonalDescend    : true
                //  allowDiagonalAscend     : true
                //  allowParkour            : true
                //  allowParkourAscend      : true
                //  antiCheatCompatibility  : true
                //  allowWalkOnBottomSlab   : true
                //  allowWaterBucketFall    : false
                //  blocksToAvoid           : spruce_fence,spruce_fence_gate,birch_fence,birch_fence_gate,jungle_fence,jungle_fence_gate,acacia_fence,acacia_fence_gate,dark_oak_fence,dark_oak_fence_gate,nether_brick_fence,cobblestone_wall
                //  freeLook                : false
                //  overshootTraverse       : true
                //  randomLooking           : 0.03
                //  sprintAscends           : true
                //  sprintInWater           : false
        function baritoneGoto(&target_position,&coord_bounds[],#timeout_sec=300,#stall_sec=5,...&setting_pairs[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:150
            log("baritoneGoto : target_position = %&target_position%");
            // Validate input parameters
            if(true);
                // Issue Baritone Settings
                if(true);
                    // Default Settings
                        &baritone_keys[] = "allowBreak";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "allowPlace";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "allowSprint";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowDiagonalDescend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowDiagonalAscend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowParkour";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowParkourAscend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "antiCheatCompatibility";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowWalkOnBottomSlab";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowWaterBucketFall";
                        &baritone_vals[] = "false";
                        
                        &baritone_keys[] = "blocksToAvoid";
                        &baritone_vals[] = "spruce_fence,spruce_fence_gate,birch_fence,birch_fence_gate,jungle_fence,jungle_fence_gate,acacia_fence,acacia_fence_gate,dark_oak_fence,dark_oak_fence_gate,nether_brick_fence,cobblestone_wall";
        
                        &baritone_keys[] = "freeLook";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "overshootTraverse";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "randomLooking";
                        &baritone_vals[] = "0.03";
        
                        &baritone_keys[] = "sprintAscends";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "sprintInWater";
                        &baritone_vals[] = "false";
                    foreach(&setting_pairs[],&setting_pair,#spi);
                        &setting_pair[] = split("|",%&setting_pair%);
                        &setting_key    = %&setting_pair[0]%;
                        if(%&setting_key% != "");
                            &setting_val = %&setting_pair[1]%;
                            #setting_idx = indexof(&baritone_keys[],,%&setting_key%);
                            if(#setting_idx != -1);
                                &baritone_vals[%#setting_idx%] = %&setting_val%;
                            else;
                                &baritone_keys[] = %&setting_key%;
                                &baritone_vals[] = %&setting_val%;
                            endif;
                        endif;
                    next;
                    
                    foreach(&baritone_keys[],&baritone_key,#bki);
                        &baritone_val = %&baritone_vals[%#bki%]%;
                        baritonecommand("set %&baritone_key% %&baritone_val%");
                    next;
                endif;
                
                // Setup bounds and exit conditions
                if(true);
                    foreach(&coord_bounds[],&coord_bound,#cbi);
                        ifmatches(%&coord_bound%,"(.+)\|(.+)\|(.+)");
                            #coords[]   = splitCoordString(%&coord_bound%);
                            #bounds_x[] = %#coord[0]%;
                            #bounds_y[] = %#coord[1]%;
                            #bounds_z[] = %#coord[2]%;
                        endif;
                    next;
                    #bounds_x = arraysize(#bounds_x[]);
                    do_coord_bound = #bounds_x >= 2;
                    if(%do_coord_bound%);
                        #final_idx = #bounds_x - 1;
                        sort("ASC",#bounds_x[]);
                        sort("ASC",#bounds_y[]);
                        sort("ASC",#bounds_z[]);
                        #min_bound_x = %#bounds_x[0]%;
                        #min_bound_y = %#bounds_y[0]%;
                        #min_bound_z = %#bounds_z[0]%;
                        #max_bound_x = %#bounds_x[%#final_idx%]%;
                        #max_bound_y = %#bounds_y[%#final_idx%]%;
                        #max_bound_z = %#bounds_z[%#final_idx%]%;
                    endif;
                    
                    #target_pos[] = splitCoordString(%&target_position%);
                    #target_x    := %#target_pos[0]%;
                    #target_y    := %#target_pos[1]%;
                    #target_z    := %#target_pos[2]%;
                endif;
                
                do_timeout  = #timeout_sec != -1;
                do_stall    = #stall_sec != -1;
                #start_time = %TIMESTAMP%;
                
                if(%do_stall%);
                    #stall_time = #start_time;
                    &stall_pos  = getCoordString();
                endif;
            endif;
            
            // Start moving to the position.
            localGUI("NONE");
            baritonecommand("goto %#target_x% %#target_y% %#target_z%");
            do;
                // Exit any GUI if we are in one.
                if(%GUI% != "NONE");
                    localGUI("NONE");
                endif;
                
                // Check if we have timed out
                break_condition = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                if(%break_condition%);
                    break;
                endif;
                
                // Check if we have exited the boundaries
                if(%do_coord_bound%);
                    wait("1t");
                    in_bounds_x     = withinBounds(%XPOS%,%#min_bound_x%,%#max_bound_x%);
                    in_bounds_y     = withinBounds(%YPOS%,%#min_bound_y%,%#max_bound_y%);
                    in_bounds_z     = withinBounds(%ZPOS%,%#min_bound_z%,%#max_bound_z%);
                    break_condition = !((%in_bounds_x%) && (%in_bounds_y%) && (%in_bounds_z%));
                    if(%break_condition%);
                        break;
                    endif;
                endif;
                
                // Check if we are on the correct position
                return_boolean = ((%XPOS% == #target_x) && (%YPOS% == #target_y) && (%ZPOS% == #target_z));
                if(%return_boolean%);
                    break;
                endif;
                
                // Check if we have stalled out
                if(%do_stall%);
                    wait("1t");
                    stall_data[]    = isStalled(%#start_time%,%&start_pos%,%#stall_sec%);
                    break_condition = %stall_data[0]%;
                    update_stall    = %stall_data[1]%;
                    if(%break_condition%);
                        break;
                    elseif(%update_stall%);
                        #stall_time = %TIMESTAMP%;
                        &stall_pos  = getCoordString();
                    endif;
                endif;
                
                wait("1t");
            until((!%BARITONEWORKING%) || (%break_condition%) || (%return_boolean%));
            
            if((!%BARITONEWORKING%) && (!%break_condition%));
                return_boolean = ((%XPOS% == #target_x) && (%YPOS% == #target_y) && (%ZPOS% == #target_z));
            elseif(%BARITONEWORKING%);
                baritonecommand("stop");
            endif;
            return(%return_boolean%);
        endfunction;
    // math/index/absDiff
        // Given input of two numbers, finds the absolute difference between them.
            // Params:
            //      {string} <&first_number>    The first number (can be integer or float)
            //      {string} <&second_number>   The second number (can be integer or float)
            //
            // Returns the absolute difference between the two numbers. If either number is a float,
            // a float number is returned. Otherwise, an integer is returned.
        function absDiff(&first_number,&second_number);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:8
            ifmatches(%&first_number%,"\.");
                float = true;
            elseifmatches(%&second_number%,"\.");
                float = true;
            endif;
            
            if(%float%);
                &diff = xEval("%&first_number% - %&second_number%");
                ifmatches(%&diff%,"-");
                    &diff = xEval("%&diff% * -1");
                endif;
                return(%&diff%);
            else;
                #first  := %&first_number%;
                #second := %&second_number%;
                #diff    = %#first% - %#second%;
                if(#diff < 0);
                    #diff = #diff * -1;
                endif;
                return(%#diff%);
            endif;
        endfunction;
    // gui/index/regexTest
        // Tests if the regular expression <&expression> matches against <&input_string>.
            // Params:
            //      {string} <&input_string>    The input string to test against <&expression>.
            //      {string} <&expression>      The regular expression to test against <&input_string>.
            //
            // Returns a boolean indicating whether or not the <&expression> matches against the <&input_string>.
        function regexTest(&input_string,&expression);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:49
            ifmatches(%&input_string%,%&expression%);
                return_bool = true;
            endif;
            return(%return_bool%);
        endfunction;
    // info/index/getSkyblockAreaFromWTFMAP
        // Attempts to read the SkyBlock Area from the /wtfmap command + chatfilter.
            // Params:
            //      {number} [#timeout_sec=30]  Max amount of seconds to wait for Chat Filter to read the wtfmap output.
            //                                  Set to -1 to disable timeout.
            //      {number} [#wait_ticks=60]   Amount of ticks to wait between attempts to issue the command.
            //
            // Returns the String returned from the Command (i.e. "SkyBlock Dynamic"), or "-1" if cannot be found/timed out.
        function getSkyblockAreaFromWTFMAP(#timeout_sec=30,#wait_ticks=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:422
            debug              = true;
            &script_debug_name = "&3getSkyBlockAreaFromWTFMAP&7";
            
            @cannot_use_wtfmap = false;
            @&wtfmap           = "";
            #start_time        = %TIMESTAMP%;
            do_timeout         = #timeout_sec != -1;
            &return_string     = "-1";
            do;
                func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                if(%func_timeout%);
                    break;
                endif;
                    
                debug_log(%debug%,%&script_debug_name%,"echoing '/wtfmap'...");
                echo("/wtfmap");
                do(%#wait_ticks%);
                    wait("1t");
                    got_response   = ((%@&wtfmap% != "") || (%@cannot_use_wtfmap%));
                until(%got_response%);
                if((%got_response%) && (%@&wtfmap% != ""));
                    &return_string = %@&wtfmap%;
                    break;
                endif;
            until((%got_response%) || (%func_timeout%));
            return(%&return_string%);
        endfunction;
    // info/index/getScoreboardSkyBlockArea
        // Attempts to read the Scoreboard to find the Player's AREA on Hypixel SkyBlock (i.e. 'Private Island', 'Hub', 'Bank', etc).
            // Params:
            //      None
            //
            // Returns the string found on the Scoreboard following the Gem Character, or "-1" if not able to be parsed.
        function getScoreboardSkyBlockArea();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:456
            &return_string = -1;
            foreach("teams");
                &joint_team = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                &joint_team = trim(%&joint_team%);
                &joint_team = regexreplace(&joint_team,"^\s*","");
                ifmatches(%&joint_team%,"\u23E3 (.+)",&found_area,1);
                    &return_string = %&found_area%;
                endif;
            next;
            return(%&return_string%);
        endfunction;
    // info/index/getSkyBlockPlayerListInfo
        // Returns an Array of information extracted from the Hypixel SkyBlock PlayerList.
            // Params:
            //      {string} [...&extract_vars[]]   The variables to extract from the Player List. Valid values are:
            //                                      'AREA', 'SERVER', 'PROFILE', 'BANK', 'SKILLS', 'SPEED', 'STRENGTH',
            //                                      'CRIT_CHANCE', 'CRIT_DAMAGE', 'ATTACK_SPEED'. If no values are provided,
            //                                      will return variables 'AREA', and 'PROFILE' by default.
            //
            // Returns an Array of the extracted variables indexed in the order they were passed to the Function,
            // or if no variables were able to be extracted, the first element of this Array will be -1.
        function getSkyBlockPlayerListInfo(...&extract_vars[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:258
            // Setup valid variables
            if(true);
                &valid_vars[]  = split(", ","AREA, SERVER, PROFILE, BANK, SKILLS, SPEED, STRENGTH, CRIT_CHANCE, CRIT_DAMAGE, ATTACK_SPEED");
                #extract_len   = arraysize(&extract_vars[]);
                assign_default = #extract_len == 0;
                if(!%assign_default%);
                    foreach(&valid_vars[],&valid_var);
                        #extract_idx = indexof(&extract_vars[],,%&valid_var%);
                        if(#extract_idx != -1);
                            &use_out_vars[] = %&valid_var%;
                            #use_out_idxs[] = %#extract_idx%;
                            matched[]       = false;
                        endif;
                    next;
                    #use_out_len   = arraysize(&use_out_vars[]);
                    assign_default = #use_out_len == 0;
                endif;
                
                if(!%assign_default%);
                    sort("ASC",#use_out_idxs[],&use_out_vars[]);
                else;
                    &use_out_vars[] = split(", ","AREA, PROFILE");
                    matched[]       = split(", ","false, false");
                endif;
            endif;
            
            // Compile matches
            if(true);
                #return_index = indexof(&use_out_vars[],,"AREA");
                if(#index_area != -1);
                    &match_names[] = "!C-b";
                    &match_exprs[] = "Area: (.+)"; // Area: Private Island
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SERVER");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!C-c";
                    &match_exprs[%#return_index%] = "Server: (.+)"; // Server: mini787Q
                endif;
                
                #return_index = indexof(&use_out_vars[],,"PROFILE");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-b";
                    &match_exprs[%#return_index%] = "Profile: (.+)"; // Profile: Pineapple
                endif;
                
                #return_index = indexof(&use_out_vars[],,"BANK");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-d";
                    &match_exprs[%#return_index%] = "Bank: (.+)"; // Bank: 50/50
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SKILLS");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-g";
                    &match_exprs[%#return_index%] = "Skills: (.+)"; // Skills: Foraging 17: 24.1%
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SPEED");
                if(#return_index != -1);
                    &tmp_expr_char                = char("10022");
                    &match_names[%#return_index%] = "!D-h";
                    &match_exprs[%#return_index%] = "Speed: %&tmp_expr_char%(.+)"; // Speed: ✦220
                endif;
                
                #return_index = indexof(&use_out_vars[],,"STRENGTH");
                if(#return_index != -1);
                    &tmp_expr_char                = char("10049");
                    &match_names[%#return_index%] = "!D-i";
                    &match_exprs[%#return_index%] = "Strength: %&tmp_expr_char%(.+)"; // Strength: ❁149
                endif;
                
                #return_index = indexof(&use_out_vars[],,"CRIT_CHANCE");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9763");
                    &match_names[%#return_index%] = "!D-j";
                    &match_exprs[%#return_index%] = "Crit Chance: %&tmp_expr_char%(.+)"; // Crit Chance: ☣64
                endif;
                
                #return_index  = indexof(&use_out_vars[],,"CRIT_DAMAGE");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9760");
                    &match_names[%#return_index%] = "!D-k";
                    &match_exprs[%#return_index%] = "Crit Damage: %&tmp_expr_char%(.+)"; // Crit Damage: ☠130
                endif;
                
                #return_index  = indexof(&use_out_vars[],,"ATTACK_SPEED");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9876");
                    &match_names[%#return_index%] = "!D-l";
                    &match_exprs[%#return_index%] = "Attack Speed: %&tmp_expr_char%(.+)"; // Attack Speed: ⚔0
                endif;
            endif;
            
            foreach("players");
                #line_index = indexof(&match_names[],,%PLAYERNAME%);
                if(#line_index != -1);
                    matched[%#line_index%] = true;
                    &line_text             = strip(%PLAYERDISPLAYNAME%);
                    &line_text             = trim(%&line_text%);
                    ifmatches(%&line_text%,%&match_exprs[%#line_index%]%,&capture_group,1);
                        &return_array[%#line_index%] = %&capture_group%;
                        #non_matched_var_index       = indexof(matched[],,false);
                        if(#non_matched_var_index == -1);
                            break;
                        endif;
                    endif;
                endif;
            next;
            
            #return_len = arraysize(&return_array[]);
            if(#return_len == 0);
                &return_array[] = -1;
            endif;
            return(&return_array[]);
        endfunction;
    // info/index/getSkyBlockArea
        // Gets the SkyBlock Server Type that we are currently connected to. Returns SKYBLOCK_HUB, SKYBLOCK_HOME, or OTHER. OTHER is only returned if
        // the Function cannot determine whether it is on a SkyBlock Server, or if it is not on a SkyBlock Server.
            // Params:
            //      None
            //
            // Returns one of the following strings: 'SKYBLOCK_HUB', 'SKYBLOCK_HOME', 'OTHER'. 'OTHER' is returned if none of the functions return any
            // parseable values.
        function getSkyBlockArea();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:577
            &playerlist_area = getSkyBlockPlayerListInfo("AREA");
            if(%&playerlist_area% == "-1");
                &scoreboard_area = getScoreboardSkyBlockArea();
                if(%&scoreboard_area% == "-1");
                    &wtfmap_area = getSkyBlockAreaFromWTFMAP();
                    if(%&wtfmap_area% == "SkyBlock Hub");
                        return("SKYBLOCK_HUB");
                    elseif(%&wtfmap_area% == "SkyBlock Dynamic");
                        return("SKYBLOCK_HOME");
                    endif;
                    return("OTHER");
                elseif(%&playerlist_area% == "Your Island");
                    return("SKYBLOCK_HOME");
                else;
                    return("SKYBLOCK_HUB");
                endif;
            elseif(%&playerlist_area% == "Private Island");
                return("SKYBLOCK_HOME");
            else;
                return("SKYBLOCK_HUB");
            endif;
        endfunction;
    // info/index/isInLimbo
        // Checks if the Player is in Limbo by reading the Dimension, as well as checking to see if there are any signs at the sign positions
        // where they normally are in Limbo.
            // Params:
            //      None
            //
            // Returns a boolean indicating whether or not the Player is in Limbo.
        function isInLimbo();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:475
            if((%YPOS% > 35) || (%DIMENSION% != "END"));
                return(False);
            endif;
            
            #limbo_x = -20;
            #limbo_y = 32;
            #limbo_z = 21;
            
            if((%XPOS% == #limbo_x) && (%YPOS% == #limbo_y) && (%ZPOS% == #limbo_z));
                return(True);
            endif;
            
            &armor_vars[] = split(", ","ITEM, BOOTSID, LEGGINGSID, CHESTPLATEID, HELMID");
            all_air       = true;
            foreach(&armor_vars[],&armor_var);
                &armor_val = "%%&armor_var%%";
                if(%&armor_val% != "air");
                    all_air = false;
                    break;
                endif;
            next;
            if((%SLOTSFULL% == 0) && (%all_air%));
                return(True);
            endif;
            
            #sign_x   = -21;
            #sign_y[] = split(", ","31, 32, 33");
            #sign_z[] = split(", ","20, 21, 22");
            foreach(#sign_y[],#sign_y);
                foreach(#sign_z[],#sign_z);
                    &block_id = getid(%#sign_x%,%#sign_y%,%#sign_z%);
                    if(&block_id == "wall_sign");
                        in_limbo = true;
                        break;
                    endif;
                next;
            next;
        endfunction;
    // info/index/getHypixelGamemodeFromScoreboard
        // Attempts to read the Scoreboard (foreach("teams") ... prefix + suffix ... next) to find the Player's location on Hypixel
            // Params:
            //      None
            //
            // Returns one of the following strings: 'LOBBY', 'SKYBLOCK', or 'OTHER'. 'OTHER' indicates that the function
            // was not able to determine which area the Player is located in.
        function getHypixelGamemodeFromScoreboard();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:382
            &return_string = "OTHER";
            
            // Setup indicator strings
            if(true);
                &match_expr[] = "Games in this lobby are"; // Only shown in Prototype Lobby Servers
                &match_area[] = "LOBBY";
                
                &match_expr[] = "^Achievements: .+$"; // Only shown in Hypixel Main Lobby Servers
                &match_area[] = "LOBBY";
                
                &match_expr[] = "^Purse: [0-9,.]+"; // Only shown in SkyBlock Servers
                &match_area[] = "SKYBLOCK";
                
                &match_expr[] = "^Bits: [0-9,.]+"; // Only shown in SkyBlock Servers
                &match_area[] = "SKYBLOCK";
            endif;
            
            foreach("teams");
                &joint_team = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                &joint_team = trim(%&joint_team%);
                &joint_team = regexreplace(&joint_team,"^\s*","");
                foreach(&match_expr[],&match_expr,#mei);
                    ifmatches(%&joint_team%,%&match_expr%);
                        &return_string = %&match_area[%#mei%]%;
                        break;
                    endif;
                next;
            next;
            
            return(%&return_string%);
        endfunction;
    // info/index/getHypixelGamemode
        // Gets the current Gamemode / Gametype that the Player is in by reading the Scoreboard, etc.
        // Params:
        //      None
        //
        // Returns one of: 'LOBBY', 'LIMBO', 'SKYBLOCK', or 'OTHER'.
        function getHypixelGamemode();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:520
            if(true);
                do(3);
                    // Check to see if we can read the Gamemode from the 9th Hotbar Slot.
                    if(true);
                        #static_hb_end = 44;
                        &found_item    = getslotiteminv(%#static_hb_end%,,#found_stack,#found_data,&found_nbt);
                        &found_nbt     = strip(%&found_nbt%);
                        &found_name    = getItemName(%&found_nbt%,%&found_item%);
                        
                        &known_names[] = split(", ","Lobby Selector (Right Click), SkyBlock Menu (Right Click)");
                        &known_areas[] = split(", ","LOBBY, SKYBLOCK");
                        #known_index   = indexof(&known_names[],,%&found_name%);
                        if(%#known_index% != -1);
                            &return_string = %&known_areas[%#known_index%]%;
                            break;
                        endif;
                    endif;
                    
                    // Cant find the Gamemode from the 9th Hotbar Slot, have to read additional Data. Check to see if we can find any Data from the Playerlist.
                    &skyblock_area = getSkyBlockPlayerListInfo("AREA");
                    if(%&skyblock_area% != "-1");
                        &return_string = "SKYBLOCK";
                        break;
                    endif;
                    
                    // Try to read the location from the Scoreboard.
                    &scoreboard_location = getHypixelGamemodeFromScoreboard();
                    if(%&scoreboard_location% != "OTHER");
                        &return_string = %&scoreboard_location%;
                        break;
                    endif;
                    
                    // Check if we are in Limbo as a last resort
                    in_limbo = isInLimbo();
                    if(%in_limbo%);
                        &return_string = "LIMBO";
                        break;
                    endif;
                    
                    wait("1000ms");
                loop;
            endif;
            
            if(%&return_string% != "");
                return(%&return_string%);
            endif;
            return("OTHER");
        endfunction;
    // movement/index/gotoServer
        // Given a Server type to get to, gets to the Server type from wherever we are. Returns a boolean indicating
        // whether or not the action was successful.
            // Params:
            //      {string} [&target_server="SKYBLOCK_HOME"]   The target server to get to. Valid values are: 'SKYBLOCK',
            //                                                  'SKYBLOCK_HUB', 'SKYBLOCK_HOME. Defaults to 'SKYBLOCK_HOME'.
            //                                                  If set to 'SKYBLOCK', will accept any SkyBlock server.
            //      {number} [#command_wait_ticks=100]          Amount of ticks to wait between issuing each command needed.
            //      {number} [#timeout_sec=300]                 Amount of seconds to attempt this action before timing out and
            //                                                  returning false. Set to -1 to make the action try to go on indefinitely.
            //                                                  Defaults to 300 (5 minutes).
            //      {boolean} [force_cmd=false]                 If set to true, will force the function to send a command to try and
            //                                                  get to the correct server regardless of whether or not it is already on it
            //                                                  at time of function call.
            //
            // Returns a boolean indicating whether or not the Player is on the [&target_server] at the time of function exit.
        function gotoServer(&target_server="SKYBLOCK_HOME",#command_wait_ticks=100,#timeout_sec=300,force_cmd=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:339
            debug              = true;
            &script_debug_name = "&4gotoServer";
            
            &target_server = miscValidate(%&target_server%,0,"SKYBLOCK_HOME","SKYBLOCK_HUB","SKYBLOCK");
            do_timeout     = #timeout_sec > 0;
            #start_time    = %TIMESTAMP%;
            &encode_vars[] = split(", ","@&auto-restarts-case, @world_changed, BIOME, DIMENSION, XPOS, YPOS, ZPOS"); // Variables used to detect a world change event.
            first_loop     = false;
            #min_tick_wait = %#command_wait_ticks% / 2; // used to ensure we do not spam requests if we switch servers quickly
            
            do;
                if(%do_timeout%);
                    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                    if(%func_timeout%);
                        debug_error(%debug%,%&script_debug_name%,"Function timed out.");
                        break;
                    endif;
                endif;
                
                // Figure out what type of command we are going to need to issue.
                if(!%do_override%);
                    &hypixel_gamemode = getHypixelGamemode(); // 'LOBBY', 'LIMBO', 'SKYBLOCK', or 'OTHER'.
                    debug_log(%debug%,%&script_debug_name%,"force_cmd: %force_cmd%, target_server: %&target_server%, hypixel_gamemode: %&hypixel_gamemode%");
                    if(%&hypixel_gamemode% == "SKYBLOCK");
                        return_boolean = %&target_server% == "SKYBLOCK";
                        if((%return_boolean%) && ((!%force_cmd%) || (%first_loop%)));
                            debug_log(%debug%,%&script_debug_name%,"Got to target_server 'SKYBLOCK'.");
                            break;
                        endif;
                        
                        &skyblock_area = getSkyBlockArea(); // 'SKYBLOCK_HUB', 'SKYBLOCK_HOME', 'OTHER'
                        debug_log(%debug%,%&script_debug_name%,"force_cmd: %force_cmd%, target_server: %&target_server%, hypixel_gamemode: %&hypixel_gamemode%, skyblock_area: %&skyblock_area%");
                        return_boolean = %&target_server% == %&skyblock_area%;
                        if((%return_boolean%) && ((!%force_cmd%) || (%first_loop%)));
                            debug_log(%debug%,%&script_debug_name%,"Got to target_server '%&skyblock_area%'.");
                            break;
                        endif;
                        
                        if(%&skyblock_area% == "SKYBLOCK_HUB");
                            if((%force_cmd%) && (%&target_server% == "SKYBLOCK_HUB"));
                                &echo_command = "/warp hub";
                            else;
                                &echo_command = "/warp home";
                            endif;
                        elseif(%&skyblock_area% == "SKYBLOCK_HOME");
                            &echo_command = "/warp hub";
                        elseif(%&skyblock_area% == "OTHER");
                            &echo_command = "/lobby";
                        endif;
                    elseif(%&hypixel_gamemode% == "LIMBO");
                        &echo_command = "/lobby";
                    elseif(%&hypixel_gamemode% == "LOBBY");
                        &echo_command = "/play skyblock";
                    elseif(%&hypixel_gamemode% == "OTHER");
                        &echo_command = "/lobby";
                    endif;
                else;
                    // Issue the override "/lobby" command to break out of the "Cannot send chat message" loop.
                    &echo_command = "/lobby";
                    do_override   = false;
                endif;
                debug_log(%debug%,%&script_debug_name%,"echo_command: &d%&echo_command%");
                
                // Issue the command and wait for an update in our environment variables.
                if(true);
                    if((#waited_ticks > 0) && (#waited_ticks < #command_wait_ticks));
                        do;
                            wait("1t");
                            inc(#waited_ticks);
                        until(%#waited_ticks% >= %#command_wait_ticks%);
                    endif;
                
                    foreach(&encode_vars[],&encode_var,#evi);
                        ifmatches(%&encode_var%,"(?-i:[a-z])"); // Unset any global variables, i.e. '@world_changed'.
                            unset(%&encode_var%);
                        endif;
                        &initial_vals[%#evi%] = "%%&encode_var%%";
                    next;
                    
                    debug_log(%debug%,%&script_debug_name%,"running %&echo_command%");
                    echo(%&echo_command%);
                    env_updated   = false;
                    #waited_ticks = 0;
                    do(%#command_wait_ticks%);
                        wait("1t");
                        inc(#waited_ticks);
                        foreach(&encode_vars[],&encode_var,#evi);
                            &encode_val = "%%&encode_var%%";
                            if(%&initial_vals[%#evi%]% != %&encode_val%);
                                env_updated = true; // Break early as soon as we detect some sort of change in our environment.
                                break;
                            endif;
                        next;
                    until(%env_updated%);
                    
                    // Check to see if we hit the @&auto-restarts-case ("Cannot send chat message")
                    if(%@&auto-restarts-case% != "");
                        do_override = true;
                    endif;
                endif;
                
                first_loop = true;
            until((%func_timeout%) || ((%return_boolean%) && ((!%force_cmd%) || (%first_loop%))));
            
            return(%return_boolean%);
        endfunction;
    // movement/index/getMiddlePointCoordRange
        // Given a minimum and maximum coordinate string, splits both of them, then finds the middle most value.
            // Params:
            //      {string} <&min_coord_string>    The minimum coordinate string
            //      {string} <&max_coord_string>    The maximum coordinate string
            //
            // Returns an Array where the 0th element is the XPOS, 1st is YPOS, and 2nd is ZPOS. The value is the
            // middle point (min X + max X / 2, etc) of each coordinate point.
        function getMiddlePointCoordRange(&min_coord_string,&max_coord_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:105
            #min_coord[] = splitCoordString(%&min_coord_string%);
            #max_coord[] = splitCoordString(%&max_coord_string%);
            
            #avg_pos_x   = (%#min_coord[0]% + %#max_coord[0]%) / 2;
            #avg_pos_y   = (%#min_coord[1]% + %#max_coord[1]%) / 2;
            #avg_pos_z   = (%#min_coord[2]% + %#max_coord[2]%) / 2;
            
            log("getMiddlePointCoordRange: avg x %#avg_pos_x%, avg y %#avg_pos_y%, avg z %#avg_pos_z%");
            return(%#avg_pos_x%,%#avg_pos_y%,%#avg_pos_z%);
        endfunction;
    // movement/index/expandCoordStringToRange
        // Given a coordinate string, splits it up by tunnel characters and returns the minimum and maximum
        // coordinate strings, evaluated by +/- [#expand_by] to each coordinate point.
            // Params:
            //      {string} [&coord_string="%XPOS%|%YPOS%|%ZPOS%"] The coordinate string to split up
            //      {number} [#expand_by=1]                         The offset to apply to each coordinate point
            //
            // Returns an Array where the first element is the minimum string and second element is maximum string.
        function expandCoordStringToRange(&coord_string="%XPOS%|%YPOS%|%ZPOS%",#expand_by=1);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:85
            #expand_greater = %#expand_by%;
            #expand_lesser  = %#expand_by% * -1;
            #coord_array[]  = splitCoordString(%&coord_string%);
            foreach(#coord_array[],#coord_pos,#cpi);
                #min_coord[%#cpi%] = %#coord_pos% + %#expand_lesser%;
                #max_coord[%#cpi%] = %#coord_pos% + %#expand_greater%;
            next;
            &min_string = join("|",#min_coord[]);
            &max_string = join("|",#max_coord[]);
            return(%&min_string%,%&max_string%);
        endfunction;
    // movement/index/goto
        // Given a position string (and/or a server and coordinate string), gets the Player to the
        // required Server then moves them to the required position.
            // Params:
            //      {string} [&position]        The name of the pre-defined position to move to. Valid strings are:
                //  'HUB'                   : SkyBlock Hub
                //  'HOME'                  : SkyBlock Home (Private Island)
                //  'BANKER'                : SkyBlock Hub => Banker NPC
                //  'BAZAAR'                : SkyBlock Hub => Bazaar NPC
                // Note that in order to use the 'BAZAAR' or 'BAZAAR_AGENT' term, Chat Filter must be setup with 'You need level 7 in Farming, Foraging and Mining to access this feature!'
                // in order to cancel the function in the event that the User is not yet level 10.
                //  'BUILDER'               : SkyBlock Hub => Builder NPC
                //  'MAD_REDSTONE_ENGINEER' : SkyBlock Hub => Builder NPC => Downstairs Redstone NPC (alt. strings: 'REDSTONE_ENGINEER', 'REDSTONE_MERCHANT')
                //  'BITS'                  : SkyBlock Hub => Elizabeth NPC (Community Center)
                //  'ALCHEMIST'             : SkyBlock Hub => Alchemist NPC
                //  'AUCTION'               : SkyBlock Hub => Auction NPC
                //  'JACOB'                 : SkyBlock Hub => Jacob NPC
                //  Note that in order to use the 'JACOB' term, Chat Filter must be setup with '\[NPC\] Jacob: You need Farming 10 to participate!' in order to cancel
                //  the function in the event that the User is not yet level 10.
                //  'ANITA'                 : SkyBlock Hub => Anita NPC
                //  'ANVIL'                 : SkyBlock Hub => Anvil (at Blacksmith)
                //  'REFORGE_ANVIL'         : SkyBlock Hub => Reforge Anvil (at Blacksmith / Smithmonger)
                //  'ENCHANTMENT_TABLE'     : SkyBlock Hub => Enchantment Table Building (Library)
                //  'LIBRARIAN'             : SkyBlock Hub => Librarian NPC
                //  'FREE_COOKIE'           : SkyBlock Hub => Community Center => City Project
                //  'WHEAT_FIELDS'          : SkyBlock Hub => Wheat Fields
                //  'COAL_MINE'             : SkyBlock Hub => Coal Mine
                //  'GOLD_MINE'             : SkyBlock Hub => Coal Mine => Gold Mine
                //  'FOREST'                : SkyBlock Hub => Forest
                //  'HUB_SECLUDED'          : SkyBlock Hub => Random secluded location
                //  'HUB_SELECTOR'          : SkyBlock Hub => Hub Selector NPC (alt. strings              : 'SELECTOR')
                //  'FARM_MERCHANT'         : SkyBlock Hub => Farm Merchant NPC (alt. strings             : 'FARM', 'FARM MERCHANT', 'FARMER', 'FARMER MERCHANT')
                //  'MINE_MERCHANT'         : SkyBlock Hub => Mine Merchant NPC (alt. strings             : 'MINE', 'MINE MERCHANT', 'MINER', 'MINER MERCHANT')
                //  'LUMBER_MERCHANT'       : SkyBlock Hub => Lumber Merchant NPC (alt. strings           : 'LUMBER', 'LUMBER MERCHANT')
            //      {boolean} [open_gui=false]  Whether or not to open the GUI this Position is bound to once we have
            //                                  arrived.
            //      {number} [#timeout_sec=300] Amount of seconds to continue to attempt to execute this movement for before
            //                                  timing out and returning false. If set to -1, will take it as no timeout, do it
            //                                  forever until successful completion.
            //      {string} [&server]          The name of the Server the position exists on. Only required if
            //                                  [&position] is omitted. Valid values are 'HUB', 'HOME'.
            //      {string} [&coord_string]    The coordinate string of the position to move to in format X|Y|Z.
            //                                  Only required if [&position] is omitted and [&server] is provided.
            //
            // Returns a boolean indicating whether or not the movement was successful.
        function goto(&position,open_gui=false,#timeout_sec=300,&server,&coord_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:491
            // Check if need to setup position string indexes
            if(true);
                #pos_param_len = arraysize(@&goto_pos_params[]);
                #last_build    = %@#goto_pos_last_build%;
                &curr_config   = %CONFIG%;
                &curr_config   = regexreplace(&curr_config,"-dev$","");
                #curr_build    = getbuild(%&curr_config%);
                refresh_index  = ((#pos_param_len == 0) || (#last_build == 0) || ((#last_build != #curr_build) && (#curr_build != -1)));
                
                if(%refresh_index%);
                    unset(@&goto_pos_params[]);         // parameters used to select a position to go to
                    unset(@&goto_pos_min[]);            // min coordinate bound strings
                    unset(@&goto_pos_max[]);            // max coordinate bound strings
                    unset(@&goto_pos_server[]);         // server type (hub, home)
                    unset(@&goto_pos_entity[]);         // entity name for use in foreach ... entities or NULL if no entity
                    unset(@&goto_pos_container[]);      // name of container if entity or goto_pos_override_look
                    unset(@&goto_pos_override_look[]);  // coordinate string to calcyawto & look at if not entity
                    unset(@&goto_pos_chat_cancel[]);    // pointer to global bool var to unset before actions, if turns true while running, cancel
                    
                    if(true);
                        // Home / Private Island
                            @&goto_pos_params[]        = "HOME";
                            @&goto_pos_min[]           = "NULL";
                            @&goto_pos_max[]           = "NULL";
                            @&goto_pos_server[]        = "SKYBLOCK_HOME";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Hub Spawnpoint @ Hub
                            @&goto_pos_params[]        = "HUB";
                            @&goto_pos_min[]           = "-4|69|-71";
                            @&goto_pos_max[]           = "-2|71|-69";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Hub Selector @ Village
                            @&goto_pos_params[]        = "HUB_SELECTOR, SELECTOR, SERVER_SELECTOR, SERVER SELECTOR, HUB SELECTOR";
                            @&goto_pos_min[]           = "-12|69|-70";
                            @&goto_pos_max[]           = "-10|71|-68";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Hub Selector";
                            @&goto_pos_container[]     = "SkyBlock Hub Selector";
                            @&goto_pos_override_look[] = "-10.0|71.5|-67.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Banker @ Bank
                            @&goto_pos_params[]        = "BANKER";
                            @&goto_pos_min[]           = "-26|70|-62";
                            @&goto_pos_max[]           = "-24|72|-60";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Banker";
                            @&goto_pos_container[]     = "^(?:Bank|Personal Bank Account)$";
                            @&goto_pos_override_look[] = "-24.5|72.5|-58.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bazaar @ Bazaar Alley
                            &char_unicode_escaped      = "\u279C"; // bazaar fat arrow
                            @&goto_pos_params[]        = "BAZAAR";
                            @&goto_pos_min[]           = "-32|69|-77";
                            @&goto_pos_max[]           = "-30|71|-75";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bazaar";
                            @&goto_pos_container[]     = "Bazaar %&char_unicode_escaped% (?:Farming|Mining|Combat|Woods & Fishes|Oddities)";
                            @&goto_pos_override_look[] = "-32.5|72.5|-76.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_bazaar";
                        // Lumber Merchant @ Village
                            @&goto_pos_params[]        = "LUMBER_MERCHANT, LUMBER, LUMBER MERCHANT";
                            @&goto_pos_min[]           = "-51|69|-72";
                            @&goto_pos_max[]           = "-49|71|-70";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Lumber Merchant";
                            @&goto_pos_container[]     = "Lumber Merchant";
                            @&goto_pos_override_look[] = "-49.5|71.5|-68.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Builder @ Builder's House
                            @&goto_pos_params[]        = "BUILDER";
                            @&goto_pos_min[]           = "-53|70|-31";
                            @&goto_pos_max[]           = "-51|72|-29";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Builder";
                            @&goto_pos_container[]     = "Builder";
                            @&goto_pos_override_look[] = "-51.0|72.5|-27.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Wool Weaver @ Builder's House
                            @&goto_pos_params[]        = "WOOL_WEAVER, WOOL WEAVER, WOOL";
                            @&goto_pos_min[]           = "-48|73|-34";
                            @&goto_pos_max[]           = "-46|75|-32";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Wool Weaver";
                            @&goto_pos_container[]     = "Wool Weaver";
                            @&goto_pos_override_look[] = "-47.0|75.5|-30.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Mad Redstone Engineer @ Builder's House
                            @&goto_pos_params[]        = "MAD_REDSTONE_ENGINEER, REDSTONE_ENGINEER, REDSTONE_MERCHANT, MAD RESTONE ENGINEER, REDSTONE ENGINEER, REDSTONE MERCHANT, REDSTONE";
                            @&goto_pos_min[]           = "-54|64|-32";
                            @&goto_pos_max[]           = "-52|66|-30";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Mad Redstone Engineer";
                            @&goto_pos_container[]     = "Mad Redstone Engineer";
                            @&goto_pos_override_look[] = "-52.0|66.5|-29.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Lumberjack @ Forest
                            @&goto_pos_params[]        = "LUMBERJACK, FOREST";
                            @&goto_pos_min[]           = "-113|73|-37";
                            @&goto_pos_max[]           = "-111|75|-35";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Lumberjack";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "-112.5|75.5|-36.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Adventurer @ Village
                            @&goto_pos_params[]        = "ADVENTURER, ADVENTURER_MERCHANT";
                            @&goto_pos_min[]           = "-43|69|-68";
                            @&goto_pos_max[]           = "-41|71|-66";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Adventurer";
                            @&goto_pos_container[]     = "Adventurer";
                            @&goto_pos_override_look[] = "-41.5|71.5|-64.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bazaar Agent @ Bazaar Alley
                            &char_unicode_escaped      = "\u279C"; // bazaar fat arrow
                            @&goto_pos_params[]        = "BAZAAR_AGENT";
                            @&goto_pos_min[]           = "-41|69|-79";
                            @&goto_pos_max[]           = "-39|71|-77";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bazaar Agent";
                            @&goto_pos_container[]     = "Bazaar %&char_unicode_escaped% (?:Farming|Mining|Combat|Woods & Fishes|Oddities)";
                            @&goto_pos_override_look[] = "-39.5|71.5|-78.90625";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_bazaar";
                        // Vault @ Bank
                            @&goto_pos_params[]        = "VAULT";
                            @&goto_pos_min[]           = "-29|70|-63";
                            @&goto_pos_max[]           = "-27|72|-61";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Vault";
                            @&goto_pos_container[]     = "^(?:Unlock Bank|Personal) Vault\??$";
                            @&goto_pos_override_look[] = "-28.5|72.8125|-61.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Alchemist @ Village
                            @&goto_pos_params[]        = "ALCHEMIST";
                            @&goto_pos_min[]           = "41|69|-63";
                            @&goto_pos_max[]           = "43|71|-61";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Alchemist";
                            @&goto_pos_container[]     = "Alchemist";
                            @&goto_pos_override_look[] = "41.5|71.5|-63.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Fish Merchant @ Village
                            @&goto_pos_params[]        = "FISH_MERCHANT, FISH MERCHANT, FISH";
                            @&goto_pos_min[]           = "49|67|-84";
                            @&goto_pos_max[]           = "51|69|-82";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Fish Merchant";
                            @&goto_pos_container[]     = "Fish Merchant";
                            @&goto_pos_override_look[] = "52.5|69.5|-82.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Plumber Joe @ Village
                            @&goto_pos_params[]        = "PLUMBER_JOE, PLUMBER JOE, PLUMBER";
                            @&goto_pos_min[]           = "56|69|-80";
                            @&goto_pos_max[]           = "58|71|-78";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Plumber Joe";
                            @&goto_pos_container[]     = "Plumber Joe";
                            @&goto_pos_override_look[] = "56.5|71.59375|-77.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Kat @ Village
                            @&goto_pos_params[]        = "KAT";
                            @&goto_pos_min[]           = "32|70|-102";
                            @&goto_pos_max[]           = "34|72|-100";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Kat";
                            @&goto_pos_container[]     = "Pet Sitter";
                            @&goto_pos_override_look[] = "34.5|72.59375|-100.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Zog @ Village
                            @&goto_pos_params[]        = "ZOG";
                            @&goto_pos_min[]           = "32|69|-95";
                            @&goto_pos_max[]           = "34|71|-93";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Zog";
                            @&goto_pos_container[]     = "Zog";
                            @&goto_pos_override_look[] = "33.5|71.5|-95.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bea @ Village
                            @&goto_pos_params[]        = "BEA";
                            @&goto_pos_min[]           = "27|69|-92";
                            @&goto_pos_max[]           = "29|71|-90";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bea";
                            @&goto_pos_container[]     = "Bea";
                            @&goto_pos_override_look[] = "30.5|71.5|-90.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // George @ Village
                            @&goto_pos_params[]        = "GEORGE";
                            @&goto_pos_min[]           = "31|76|-93";
                            @&goto_pos_max[]           = "33|78|-91";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "George";
                            @&goto_pos_container[]     = "Offer Pets";
                            @&goto_pos_override_look[] = "32.5|78.5|-93.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Jacob @ Farmhouse
                            @&goto_pos_params[]        = "JACOB";
                            @&goto_pos_min[]           = "21|70|-69";
                            @&goto_pos_max[]           = "23|72|-67";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Jacob";
                            @&goto_pos_container[]     = "Jacob's Farming Contests";
                            @&goto_pos_override_look[] = "23.0|72.5|-69.0";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_jacob";
                        // Anita @ Farmhouse
                            @&goto_pos_params[]        = "ANITA";
                            @&goto_pos_min[]           = "23|76|-71";
                            @&goto_pos_max[]           = "25|78|-69";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Anita";
                            @&goto_pos_container[]     = "Anita";
                            @&goto_pos_override_look[] = "23.0|78.5|-69.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Farm Merchant @ Village
                            @&goto_pos_params[]        = "FARM_MERCHANT, FARM MERCHANT, FARMER_MERCHANT, FARMER MERCHANT, FARMER, FARM";
                            @&goto_pos_min[]           = "13|69|-73";
                            @&goto_pos_max[]           = "15|71|-71";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Farm Merchant";
                            @&goto_pos_container[]     = "Farm Merchant";
                            @&goto_pos_override_look[] = "15.5|71.5|-71.78125";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Elizabeth @ Community Center
                            @&goto_pos_params[]        = "ELIZABETH, BITS";
                            @&goto_pos_min[]           = "0|70|-103";
                            @&goto_pos_max[]           = "2|72|-101";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Elizabeth";
                            @&goto_pos_container[]     = "Community Shop";
                            @&goto_pos_override_look[] = "0.0|72.5|-101.0";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_elizabeth";
                        // City Project @ Community Center
                            @&goto_pos_params[]        = "FREE_COOKIE, CITY_PROJECT";
                            @&goto_pos_min[]           = "8|72|-110";
                            @&goto_pos_max[]           = "10|74|-108";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "CITY PROJECT";
                            @&goto_pos_container[]     = "Project";
                            @&goto_pos_override_look[] = "12.0|73.53125|-108.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Auction Agent @ Auction House
                            @&goto_pos_params[]        = "AUCTIONS, AUCTION, AUCTION_HOUSE, AUCTION HOUSE, AH";
                            @&goto_pos_min[]           = "-32|71|-89";
                            @&goto_pos_max[]           = "-30|73|-87";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Auction Agent";
                            @&goto_pos_container[]     = "(?:Co-op )?Auction House";
                            @&goto_pos_override_look[] = "-31.0|74.5|-85.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_ah";
                        // Librarian @ Library
                            @&goto_pos_params[]        = "LIBRARIAN, LIBRARY, LIBRARIAN_MERCHANT, LIBRARY_MERCHANT, LIBRARIAN MERCHANT, LIBRARY MERCHANT";
                            @&goto_pos_min[]           = "-36|68|-113";
                            @&goto_pos_max[]           = "-34|70|-111";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Librarian";
                            @&goto_pos_container[]     = "Librarian";
                            @&goto_pos_override_look[] = "-35.5|70.59375|-112.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Enchanting Table @ Library
                            @&goto_pos_params[]        = "ENCHANTMENT_TABLE, ENCHANTMENT TABLE, ENCHANTMENT, ENCHANTING_TABLE, ENCHANTING TABLE, ENCHANTING, ENCHANT_TABLE, ENCHANT TABLE, ENCHANT";
                            @&goto_pos_min[]           = "-36|68|-113";
                            @&goto_pos_max[]           = "-34|70|-111";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Enchant Item";
                            @&goto_pos_override_look[] = "-37|69|-111";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Mine Merchant @ Coal Mine
                            @&goto_pos_params[]        = "MINE_MERCHANT, MINE MERCHANT, MINER_MERCHANT, MINER MERCHANT, MINE, MINER";
                            @&goto_pos_min[]           = "-10|67|-124";
                            @&goto_pos_max[]           = "-8|69|-122";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Mine Merchant";
                            @&goto_pos_container[]     = "Mine Merchant";
                            @&goto_pos_override_look[] = "-9.0|69.5|-125.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Blacksmith @ Blacksmith
                            @&goto_pos_params[]        = "ANVIL";
                            @&goto_pos_min[]           = "-29|68|-128";
                            @&goto_pos_max[]           = "-27|70|-126";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Anvil";
                            @&goto_pos_override_look[] = "-28|69|-129";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Smithmonger @ Blacksmith
                            @&goto_pos_params[]        = "SMITHMONGER";
                            @&goto_pos_min[]           = "-32|68|-137";
                            @&goto_pos_max[]           = "-30|70|-135";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Smithmonger";
                            @&goto_pos_container[]     = "Smithmonger";
                            @&goto_pos_override_look[] = "-32.5|70.59375|-135.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_smithmonger";
                        // Reforge Anvil @ Blacksmith/Smithmonger
                            @&goto_pos_params[]        = "REFORGE_ANVIL, REFORGE ANVIL, REFORGE";
                            @&goto_pos_min[]           = "-32|68|-137";
                            @&goto_pos_max[]           = "-30|70|-135";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Reforge Item \(Advanced\)";
                            @&goto_pos_override_look[] = "-29|69|-137";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Wheat Fields @ Farm in Hub
                            @&goto_pos_params[]        = "WHEAT_FIELDS, WHEAT FIELDS, WHEAT, FIELDS";
                            @&goto_pos_min[]           = "42|70|-144";
                            @&goto_pos_max[]           = "44|72|-142";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Coal Mine @ Coal Mine in Hub
                            @&goto_pos_params[]        = "COAL_MINE, COAL MINE, COAL";
                            @&goto_pos_min[]           = "-21|70|-166";
                            @&goto_pos_max[]           = "-19|72|-164";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                    endif;
                    
                    @#goto_pos_last_build = %#curr_build%;
                endif;
            endif;
            
            // Find the position we are going to need to go to.
            if(true);
                #position_index = -1;
                if(%&position% != "");
                    foreach(@&goto_pos_params[],&goto_pos_params,#gpi);
                        &goto_pos_params[] = split(", ",%&goto_pos_params%);
                        #goto_pos_index    = indexof(&goto_pos_params[],,%&position%);
                        if(#goto_pos_index != -1);
                            debug_log(%@fn_debug%,%&script_debug_name%,"goto > pos found in %&goto_pos_params% (%&goto_pos_params[%#goto_pos_index%]%)");
                            #position_index = #gpi;
                            break;
                        endif;
                    next;
                endif;
                if(#position_index != -1);
                    #auction_index          = indexof(&goto_pos_params[],,"AUCTION");
                    if(#auction_index != -1);
                        #auction_y      =  72;
                        #auction_min_x  = -39;
                        #auction_max_x  = -29;
                        #auction_row_z1 = -88;
                        #auction_row_z2 = -94;
                        
                        
                    else;
                        &goto_pos_min = %@&goto_pos_min[%#position_index%]%;
                        &goto_pos_max = %@&goto_pos_max[%#position_index%]%;
                    endif;
                    &goto_pos_server        = %@&goto_pos_server[%#position_index%]%;
                    &goto_pos_entity        = %@&goto_pos_entity[%#position_index%]%;
                    &goto_pos_container     = %@&goto_pos_container[%#position_index%]%;
                    &goto_pos_override_look = %@&goto_pos_override_look[%#position_index%]%;
                    &goto_pos_chat_cancel   = %@&goto_pos_chat_cancel[%#position_index%]%;
                elseif((%&server% != "") && (%&coord_string% != ""));
                    &goto_pos_arr[]         = expandCoordStringToRange(%&coord_string%);
                    &goto_pos_min           = %&goto_pos_arr[0]%;
                    &goto_pos_max           = %&goto_pos_arr[1]%;
                    &goto_pos_server        = %&server%;
                    &goto_pos_entity        = "NULL";
                    &goto_pos_container     = "NULL";
                    &goto_pos_override_look = "NULL";
                    &goto_pos_chat_cancel   = "NULL";
                endif;
            endif;
            
            // Start moving towards the position we need to go to.
            if(true);
                // Setup loop variables
                if(true);
                    do_timeout      = #timeout_sec != -1;
                    #start_time     = %TIMESTAMP%;
                    #fn_timeout     = -1
                    do_open_gui     = ((%open_gui%) && (%&goto_pos_container% != "") && (%&goto_pos_container% != "NULL"));
                    log("do_open_gui : %do_open_gui%")
                    do_coord_bound  = ((%&goto_pos_min% != "NULL") && (%&goto_pos_max% != "NULL"));
                    if(%do_coord_bound%);
                        log("goto_pos_min %&goto_pos_min%, goto_pos_max %&goto_pos_max%")
                        #goto_pos_avg[] = getMiddlePointCoordRange(%&goto_pos_min%,%&goto_pos_max%);
                        #goto_pos_min[] = splitCoordString(%&goto_pos_min%);
                        #goto_pos_max[] = splitCoordString(%&goto_pos_max%);
                        
                        // Setup coordinate position points
                        if(true);
                            #goto_pos_min_x = %#goto_pos_min[0]%;
                            #goto_pos_min_y = %#goto_pos_min[1]%;
                            #goto_pos_min_z = %#goto_pos_min[2]%;
                            
                            #goto_pos_max_x = %#goto_pos_max[0]%;
                            #goto_pos_max_y = %#goto_pos_max[1]%;
                            #goto_pos_max_z = %#goto_pos_max[2]%;
                            
                            #goto_pos_avg_x = %#goto_pos_avg[0]%;
                            #goto_pos_avg_y = %#goto_pos_avg[1]%;
                            #goto_pos_avg_z = %#goto_pos_avg[2]%;
                            &goto_pos_avg   = "%#goto_pos_avg_x%|%#goto_pos_avg_y%|%#goto_pos_avg_z%";
                        endif;
                    endif;
                    
                    use_override_look = ((%do_open_gui%) && (%&goto_pos_override_look% != "NULL"));
                    if(%use_override_look%);
                        &override_look_pos[] = splitCoordString(%&goto_pos_override_look%);
                        &calc_look_x         = %&override_look_pos[0]%;
                        &calc_look_y         = %&override_look_pos[1]%;
                        &calc_look_z         = %&override_look_pos[2]%;
                    endif;
                    
                    use_chat_cancel = ((%do_open_gui%) && (%&goto_pos_chat_cancel% != "NULL"));
                    if(%use_chat_cancel%);
                        unset(%&goto_pos_chat_cancel%);
                    endif;
                    
                    #static_hub_x = -3;
                    #static_hub_y = 70;
                    #static_hub_z = -70;
                endif;
                do;
                    // Check if we should timeout and exit early
                    if(true);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            break;
                        elseif(%do_timeout%);
                            #elapsed_sec = %TIMESTAMP% - #start_time;
                            #fn_timeout  = #timeout_sec - #elapsed_sec;
                        endif;
                    endif;
                    
                    on_server = gotoServer(%&goto_pos_server%,100,%#fn_timeout%);
                    if(%on_server%);
                        // If we are on the correct server, check to see if we can exit now, or if we need to do more stuff.
                        pos_condition = !%do_coord_bound%;
                        if(%do_coord_bound%);
                            in_bounds_x   = withinBounds(%XPOS%,%#goto_pos_min_x%,%#goto_pos_max_x%);
                            in_bounds_y   = withinBounds(%YPOS%,%#goto_pos_min_y%,%#goto_pos_max_y%);
                            in_bounds_z   = withinBounds(%ZPOS%,%#goto_pos_min_z%,%#goto_pos_max_z%);
                            pos_condition = ((%in_bounds_x%) && (%in_bounds_y%) && (%in_bounds_z%));
                            debug_log(%@fn_debug%,%&script_debug_name%,"goto > in_bounds_x : %in_bounds_x%, in_bounds_y = %in_bounds_y%, in_bounds_z = %in_bounds_z%");
                        endif;
                        
                        gui_condition = !%do_open_gui%;
                        if(%do_open_gui%);
                            gui_condition = regexTest(%CONTAINERNAME%,%&goto_pos_container%);
                            log("gui_condition : %gui_condition% (%CONTAINERNAME%, %&goto_pos_container%)");
                            if(%use_chat_cancel%);
                                chat_cancel_val := "%%&goto_pos_chat_cancel%%";
                                if(%chat_cancel_val%);
                                    log("chat cancelled")
                                    break;
                                endif;
                            endif;
                        endif;
                        
                        return_boolean = ((%pos_condition%) && (%gui_condition%));
                        log("return_boolean: %return_boolean%")
                        if(!%return_boolean%);
                            if(!%pos_condition%);
                                use_baritone = %&goto_pos_server% != "SKYBLOCK_HUB";
                                
                                // If the server is HUB, check to see if it would be faster for us to /warp hub => navigate instead of just going there using Baritone.
                                if(%&goto_pos_server% == "SKYBLOCK_HUB");
                                    #curr_dist_x   = absDiff(%#goto_pos_avg_x%,%XPOS%);
                                    #curr_dist_y   = absDiff(%#goto_pos_avg_y%,%YPOS%);
                                    #curr_dist_z   = absDiff(%#goto_pos_avg_z%,%ZPOS%);
                                    #curr_sum_dist = #curr_dist_x + #curr_dist_y + #curr_dist_z;
                                    #hub_dist_x    = absDiff(%#goto_pos_avg_x%,%#static_hub_x%);
                                    #hub_dist_y    = absDiff(%#goto_pos_avg_y%,%#static_hub_y%);
                                    #hub_dist_z    = absDiff(%#goto_pos_avg_z%,%#static_hub_z%);
                                    #hub_sum_dist  = #hub_dist_x + #hub_dist_y + #hub_dist_z;
                                    use_baritone   = #hub_sum_dist >= #curr_sum_dist;
                                    
                                    &log_vars[] = split(", ","#curr_dist_x, #curr_dist_y, #curr_dist_z, #curr_sum_dist, #hub_dist_x, #hub_dist_y, #hub_dist_z, #hub_sum_dist, use_baritone");
                                    foreach(&log_vars[],&log_var,#lvi);
                                        &log_val = "%%&log_var%%";
                                        log("&7%#lvi% > %&log_var% : &d%&log_val%");
                                    next;
                                    
                                    if(!%use_baritone%);
                                        if(%do_timeout%);
                                            #elapsed_sec = %TIMESTAMP% - #start_time;
                                            #fn_timeout  = #timeout_sec - #elapsed_sec;
                                        endif;
                                        on_server = gotoServer("SKYBLOCK_HUB",100,%#fn_timeout%,true);
                                    endif;
                                endif;
                                
                                if(%use_baritone%);
                                    // Use Baritone to navigate to the "average" position.
                                    log("goto > 2154 goto_pos_avg : %&goto_pos_avg%")
                                    baritone_outcome = baritoneGoto(%&goto_pos_avg%,,%#fn_timeout%);
                                    if((%gui_condition%) && (%baritone_outcome%));
                                        return_boolean = true;
                                        break;
                                    endif;
                                endif;
                            elseif(!%gui_condition%);
                                // Attempt to open the correct Container.
                                if(!%use_override_look%);
                                    &entity_pos[] = getEntityPos(".*%&goto_pos_entity%",,5,true);
                                    &calc_look_x  = %&entity_pos[0]%;
                                    if(%&calc_look_x% == "");
                                        log("&4Unexpected Error in movement/index.txt fn#Goto: Cannot find entity with name &e%&goto_pos_entity%&4!")
                                        break;
                                    endif;
                                    &calc_look_y  = %&entity_pos[1]%;
                                    &calc_look_z  = %&entity_pos[2]%;
                                endif;
                                #calc_vars[] = fnCalcYawTo(%&calc_look_x%,%&calc_look_y%,%&calc_look_z%);
                                #calc_yaw    = %#calc_vars[0]%;
                                #calc_dist   = %#calc_vars[1]%;
                                #calc_pitch  = %#calc_vars[2]%;
                                localGUI("NONE");
                                
                                looks(%#calc_yaw%,%#calc_pitch%,"0.500");
                                key("use");
                                &init_container_string = getContainerString();
                                do(20);
                                    new_gui = enteredNewGUI(%&init_container_string%);
                                    wait("1t");
                                until(%new_gui%);
                            endif;
                        endif;
                    else;
                        // Not on Server, not really sure how to fix this ...
                        log("&4Unexpected Error in movement/index.txt fn#Goto: Not on correct Hypixel Server after attempting fn#GotoServer")
                        break;
                    endif;
                until((%return_boolean%) || (%func_timeout%));
            endif;
            
            return(%return_boolean%);
        endfunction;
    // tablist/index/getGodPotionExpiryTimestamp
        // Reads the Tab List to find whether or not the Player has a God Potion effect enabled. If so,
        // returns the Seconds Timestamp of when that God Potion will expire. If not, returns -1.
            // Params:
            //      None
            //
            // Returns the Seconds Timestamp of when the Effect expires, or -1 if the Effect is not active.
        function getGodPotionExpiryTimestamp();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:26
            &time_expression = "You have a God Potion active! (?:(\d+):)?(?:(\d+):)?(?:(\d+))";
            #expiry_ts       = -1;
            foreach("tablist");
                ifmatches(%CLEANLINE%,%&time_expression%);
                    match(%CLEANLINE%,%&time_expression%,{#hours,#minutes,#seconds});
                    #expiry_ts = %TIMESTAMP% + ((#days * 86400) + (#hours * 3600) + (#minutes * 60) + #seconds);
                    log("%#hours% hours, %#minutes% minutes, %#seconds% seconds")
                    break;
                endif;
            next;
            return(#expiry_ts);
        endfunction;
    // tablist/index/getCookieExpiryTimestamp
        // Reads the Tab List to find whether or not the Player has a Booster Cookie effect enabled. If so,
        // returns the Seconds Timestamp of when that Booster Cookie will expire. If not, returns -1.
            // Params:
            //      None
            //
            // Returns the Seconds Timestamp of when the Effect expires, or -1 if the Effect is not active.
        function getCookieExpiryTimestamp();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:7
            &time_expression = "(?:(\d+)d\s*)?(?:(\d+)h\s*)?(?:(\d+)m\s*)?(?:(\d+)s)";
            #expiry_ts       = -1;
            foreach("tablist");
                ifmatches(%CLEANLINE%,"Cookie Buff\n(.+)",&cookie_buff_time,1);
                    match(%&cookie_buff_time%,%&time_expression%,{#days,#hours,#minutes,#seconds});
                    #expiry_ts = %TIMESTAMP% + ((#days * 86400) + (#hours * 3600) + (#minutes * 60) + #seconds);
                    break;
                endif;
            next;
            return(#expiry_ts);
        endfunction;
    // tablist/index/getEffectExpiryTimestamp
        // Wrapper that dynamically calls getCookieExpiryTimestamp or getGodPotionExpiryTimestamp based on input.
            // Params:
            //      {string} [&type="COOKIE"]   The Effect Type to get the Expiry Timestamp of. One of: 'COOKIE', 'GODPOT'.
            //
            // Returns the Seconds Timestamp of when the Effect expires, or -1 if the Effect is not active.
        function getEffectExpiryTimestamp(&type="COOKIE");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:73
            &type      = miscValidate(%&type%,0,"COOKIE","GODPOT");
            #expiry_ts = -1;
            if(%&type% == "COOKIE");
                #expiry_ts = getCookieExpiryTimestamp();
            elseif(%&type% == "GODPOT");
                #expiry_ts = getGodPotionExpiryTimestamp();
            endif;
            return(%#expiry_ts%);
        endfunction;
    // tablist/index/isEffectEnabled
        // Wrapper that dynamically calls isCookieEnabled or isGodPotionEnabled based on input.
            // Params:
            //      {string} [&type="COOKIE"]       The Effect Type to get the Expiry Timestamp of. One of: 'COOKIE', 'GODPOT'.
            //      {number} [#expiry_offset_sec=0] An offset in seconds to apply to the real expiry timestamp used
            //                                      to report whether the effect should be considered 'active' or not.
            //                                      For example, if set to 300, if the cookie expires within 300 seconds / 5 min,
            //                                      will return false (when otherwise, it would return true.)
            //
            // Returns the Seconds Timestamp of when the Effect expires, or -1 if the Effect is not active.
        function isEffectEnabled(&type="COOKIE",#expiry_offset_sec=0);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:93
            #effect_expiry_ts = getEffectExpiryTimestamp(%&type%);
            effect_enabled    = %TIMESTAMP% < (#effect_expiry_ts - #expiry_offset_sec);
            return(%effect_enabled%);
        endfunction;
    // gui/index/remoteGUI
        // Changes the current GUI to a remote GUI.
        // NOTE: For /viewcollection commands to work, CHATFILTER must include:
            // Expression:
                //    ifmatches(%CHATCLEAN%,"^You haven't found this item yet!$");
                //        @remote_gui_collection_unlock_exception = true;
                //    endif;
            // Params:
                // {string}    <&target_gui>                     String ENUM. List of available GUIs below.
                // {number}    [#wait_ticks=@#def_wait_ticks]    Amount of time to wait for in ticks (1t = 50ms)
                // {number}    [#timeout_sec=60]                 Maximum amount of seconds to spend attempting to enter the specified
                //                                               GUI. If this function takes more than or equal to this amount of seconds
                //                                               to complete, the function will exit and return False. Set to -1 for infinite.
            // Returns a Boolean indicating whether or not we were able to enter the specified GUI.
            // Example                       : in_gui = remoteGUI("SB_MENU");
            // Valid ENUMs for <&target_gui> :
                //  'SB_MENU'              : /sbmenu
                //  'TRADES'               : /sbmenu => emerald item
                //  'BOOSTER'              : /sbmenu => cookie item
                //  'STATS'                : /sbmenu => skull item (stats menu)
                //    'ACCESSORY_BAG'        : /sbmenu => accessory bag item (slot 53)
                //  'CALENDAR'             : /calendar
                //  'STORAGE'              : /storage
                //  'ENDERCHEST'           : /enderchest
                //  'PROFILES'             : /profiles
                //  'EFFECTS'              : /effects (note; cannot disable effects from this GUI)
                //  'CRAFT_ITEM'           : /craft
                //  'ANVIL'                : /anvil (only works if booster cookie effect is applied)
                //  'BAZAAR'               : /bazaar (only works if booster cookie effect is applied)
                //  'AUCTION_HOUSE'        : /auctions (only works if booster cookie effect is applied)
                //  'ENCHANTING'           : /enchantingtable (only works if booster cookie effect is applied)
                //  'SKILLS'               : /skills
                    //  'SKILLS_FARMING'       : /skills => farming
                    //  'SKILLS_MINING'        : /skills => mining
                    //  'SKILLS_COMBAT'        : /skills => combat
                    //  'SKILLS_FORAGING'      : /skills => foraging
                    //  'SKILLS_FISHING'       : /skills => fishing
                    //  'SKILLS_ENCHANTING'    : /skills => enchanting
                    //  'SKILLS_ALCHEMY'       : /skills => alchemy
                    //  'SKILLS_RUNECRAFTING'  : /skills => runecrafting
                    //  'SKILLS_SOCIAL'        : /skills => social
                    //  'SKILLS_TAMING'        : /skills => taming
                    //  'SKILLS_DUNGEONEERING' : /skills => dungeoneering
                //  'SB_SETTINGS'          : /viewsettings
                    //  'SB_SETTINGS_PERSONAL' : /viewsettings => personal
                    //  'SB_SETTINGS_COMMS'    : /viewsettings => comms
                    //  'SB_SETTINGS_IS'       : /viewsettings => island
                    //  'SB_SETTINGS_API'      : /viewsettings => api
                    //  'SB_SETTINGS_IS_MGMT'  : /viewsettings => island management
                //  'HY_SETTINGS'          : /settings
                    //  'HY_SETTINGS_GAME'     : /settings => game
                    //  'HY_SETTINGS_CHAT'     : /settings => chat
                    //  'HY_SETTINGS_SOCIAL'   : /settings => social
                    //  'HY_SETTINGS_LOBBY'    : /settings => lobby
                    //  'HY_SETTINGS_API'      : /settings => api
                    //  'HY_SETTINGS_GUILD'    : /settings => guild
                //  'COLLECTIONS'          : /collections
                    //  'COLLECTIONS_INK_SACK:3'             : /viewcollection INK_SACK:3             (Cocoa Beans)
                    //  'COLLECTIONS_CARROT_ITEM'            : /viewcollection CARROT_ITEM            (Carrot)
                    //  'COLLECTIONS_CACTUS'                 : /viewcollection CACTUS                 (Cactus)
                    //  'COLLECTIONS_RAW_CHICKEN'            : /viewcollection RAW_CHICKEN            (Raw Chicken)
                    //  'COLLECTIONS_SUGAR_CANE'             : /viewcollection SUGAR_CANE             (Sugar Cane)
                    //  'COLLECTIONS_PUMPKIN'                : /viewcollection PUMPKIN                (Pumpkin)
                    //  'COLLECTIONS_WHEAT'                  : /viewcollection WHEAT                  (Wheat)
                    //  'COLLECTIONS_SEEDS'                  : /viewcollection SEEDS                  (Seeds)
                    //  'COLLECTIONS_MUSHROOM_COLLECTION'    : /viewcollection MUSHROOM_COLLECTION    (Mushroom)
                    //  'COLLECTIONS_RABBIT'                 : /viewcollection RABBIT                 (Raw Rabbit)
                    //  'COLLECTIONS_NETHER_STALK'           : /viewcollection NETHER_STALK           (Nether Wart)
                    //  'COLLECTIONS_MUTTON'                 : /viewcollection MUTTON                 (Mutton)
                    //  'COLLECTIONS_MELON'                  : /viewcollection MELON                  (Melon)
                    //  'COLLECTIONS_POTATO_ITEM'            : /viewcollection POTATO_ITEM            (Potato)
                    //  'COLLECTIONS_LEATHER'                : /viewcollection LEATHER                (Leather)
                    //  'COLLECTIONS_PORK'                   : /viewcollection PORK                   (Raw Porkchop)
                    //  'COLLECTIONS_FEATHER'                : /viewcollection FEATHER                (Feather)
                    //  'COLLECTIONS_INK_SACK:4'             : /viewcollection INK_SACK:4             (Lapis Lazuli)
                    //  'COLLECTIONS_REDSTONE'               : /viewcollection REDSTONE               (Redstone)
                    //  'COLLECTIONS_COAL'                   : /viewcollection COAL                   (Coal)
                    //  'COLLECTIONS_ENDER_STONE'            : /viewcollection ENDER_STONE            (End Stone)
                    //  'COLLECTIONS_QUARTZ'                 : /viewcollection QUARTZ                 (Nether Quartz)
                    //  'COLLECTIONS_SAND'                   : /viewcollection SAND                   (Sand)
                    //  'COLLECTIONS_IRON_INGOT'             : /viewcollection IRON_INGOT             (Iron Ingot)
                    //  'COLLECTIONS_GEMSTONE_COLLECTION'    : /viewcollection GEMSTONE_COLLECTION    (Gemstone)
                    //  'COLLECTIONS_OBSIDIAN'               : /viewcollection OBSIDIAN               (Obsidian)
                    //  'COLLECTIONS_DIAMOND'                : /viewcollection DIAMOND                (Diamond)
                    //  'COLLECTIONS_COBBLESTONE'            : /viewcollection COBBLESTONE            (Cobblestone)
                    //  'COLLECTIONS_GLOWSTONE_DUST'         : /viewcollection GLOWSTONE_DUST         (Glowstone Dust)
                    //  'COLLECTIONS_GOLD_INGOT'             : /viewcollection GOLD_INGOT             (Gold Ingot)
                    //  'COLLECTIONS_GRAVEL'                 : /viewcollection GRAVEL                 (Gravel)
                    //  'COLLECTIONS_HARD_STONE'             : /viewcollection HARD_STONE             (Hard Stone)
                    //  'COLLECTIONS_MITHRIL_ORE'            : /viewcollection MITHRIL_ORE            (Mithril)
                    //  'COLLECTIONS_EMERALD'                : /viewcollection EMERALD                (Emerald)
                    //  'COLLECTIONS_ICE'                    : /viewcollection ICE                    (Ice)
                    //  'COLLECTIONS_NETHERRACK'             : /viewcollection NETHERRACK             (Netherrack)
                    //  'COLLECTIONS_ENDER_PEARL'            : /viewcollection ENDER_PEARL            (Ender Pearl)
                    //  'COLLECTIONS_SLIME_BALL'             : /viewcollection SLIME_BALL             (Slimeball)
                    //  'COLLECTIONS_MAGMA_CREAM'            : /viewcollection MAGMA_CREAM            (Magma Cream)
                    //  'COLLECTIONS_GHAST_TEAR'             : /viewcollection GHAST_TEAR             (Ghast Tear)
                    //  'COLLECTIONS_SULPHUR'                : /viewcollection SULPHUR                (Gunpowder)
                    //  'COLLECTIONS_ROTTEN_FLESH'           : /viewcollection ROTTEN_FLESH           (Rotten Flesh)
                    //  'COLLECTIONS_SPIDER_EYE'             : /viewcollection SPIDER_EYE             (Spider Eye)
                    //  'COLLECTIONS_BONE'                   : /viewcollection BONE                   (Bone)
                    //  'COLLECTIONS_BLAZE_ROD'              : /viewcollection BLAZE_ROD              (Blaze Rod)
                    //  'COLLECTIONS_STRING'                 : /viewcollection STRING                 (String)
                    //  'COLLECTIONS_LOG_2'                  : /viewcollection LOG_2                  (Acacia Wood)
                    //  'COLLECTIONS_LOG:1'                  : /viewcollection LOG:1                  (Spruce Wood)
                    //  'COLLECTIONS_LOG:3'                  : /viewcollection LOG:3                  (Jungle Wood)
                    //  'COLLECTIONS_LOG:2'                  : /viewcollection LOG:2                  (Birch Wood)
                    //  'COLLECTIONS_LOG'                    : /viewcollection LOG                    (Oak Wood)
                    //  'COLLECTIONS_LOG_2:1'                : /viewcollection LOG_2:1                (Dark Oak Wood)
                    //  'COLLECTIONS_WATER_LILY'             : /viewcollection WATER_LILY             (Lily Pad)
                    //  'COLLECTIONS_PRISMARINE_SHARD'       : /viewcollection PRISMARINE_SHARD       (Prismarine Shard)
                    //  'COLLECTIONS_INK_SACK'               : /viewcollection INK_SACK               (Ink Sack)
                    //  'COLLECTIONS_RAW_FISH'               : /viewcollection RAW_FISH               (Raw Fish)
                    //  'COLLECTIONS_RAW_FISH:3'             : /viewcollection RAW_FISH:3             (Pufferfish)
                    //  'COLLECTIONS_RAW_FISH:2'             : /viewcollection RAW_FISH:2             (Clownfish)
                    //  'COLLECTIONS_RAW_FISH:1'             : /viewcollection RAW_FISH:1             (Raw Salmon)
                    //  'COLLECTIONS_PRISMARINE_CRYSTALS'    : /viewcollection PRISMARINE_CRYSTALS    (Prismarine Crystals)
                    //  'COLLECTIONS_CLAY'                   : /viewcollection CLAY                   (Clay)
                    //  'COLLECTIONS_SPONGE'                 : /viewcollection SPONGE                 (Sponge)
        function remoteGUI(&target_gui,#tick_wait=20,#timeout_sec=60);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:489
            &script_debug_name = "&9remoteGUI";
            debug              = true;
            do_timeout         = #timeout_sec > 0;
            #start_time        = %TIMESTAMP%;
            
            // Validate input
            if(true);
                &valid_guis[] = split(", ","SB_MENU, TRADES, ACCESSORY_BAG, BOOSTER, STATS, CALENDAR, STORAGE, ENDERCHEST, PROFILES, EFFECTS, CRAFT_ITEM, ANVIL, BAZAAR, AUCTION_HOUSE, ENCHANTING, SKILLS, SKILLS_FARMING, SKILLS_MINING, SKILLS_COMBAT, SKILLS_FORAGING, SKILLS_FISHING, SKILLS_ENCHANTING, SKILLS_ALCHEMY, SKILLS_RUNECRAFTING, SKILLS_SOCIAL, SKILLS_TAMING, SKILLS_DUNGEONEERING, SB_SETTINGS, SB_SETTINGS_PERSONAL, SB_SETTINGS_COMMS, SB_SETTINGS_IS, SB_SETTINGS_API, SB_SETTINGS_IS_MGMT, HY_SETTINGS, HY_SETTINGS_GAME, HY_SETTINGS_CHAT, HY_SETTINGS_SOCIAL, HY_SETTINGS_LOBBY, HY_SETTINGS_API, HY_SETTINGS_GUILD, COLLECTIONS, COLLECTIONS_INK_SACK:3, COLLECTIONS_CARROT_ITEM, COLLECTIONS_CACTUS, COLLECTIONS_RAW_CHICKEN, COLLECTIONS_SUGAR_CANE, COLLECTIONS_PUMPKIN, COLLECTIONS_WHEAT, COLLECTIONS_SEEDS, COLLECTIONS_MUSHROOM_COLLECTION, COLLECTIONS_RABBIT, COLLECTIONS_NETHER_STALK, COLLECTIONS_MUTTON, COLLECTIONS_MELON, COLLECTIONS_POTATO_ITEM, COLLECTIONS_LEATHER, COLLECTIONS_PORK, COLLECTIONS_FEATHER, COLLECTIONS_INK_SACK:4, COLLECTIONS_REDSTONE, COLLECTIONS_COAL, COLLECTIONS_ENDER_STONE, COLLECTIONS_QUARTZ, COLLECTIONS_SAND, COLLECTIONS_IRON_INGOT, COLLECTIONS_GEMSTONE_COLLECTION, COLLECTIONS_OBSIDIAN, COLLECTIONS_DIAMOND, COLLECTIONS_COBBLESTONE, COLLECTIONS_GLOWSTONE_DUST, COLLECTIONS_GOLD_INGOT, COLLECTIONS_GRAVEL, COLLECTIONS_HARD_STONE, COLLECTIONS_MITHRIL_ORE, COLLECTIONS_EMERALD, COLLECTIONS_ICE, COLLECTIONS_NETHERRACK, COLLECTIONS_ENDER_PEARL, COLLECTIONS_SLIME_BALL, COLLECTIONS_MAGMA_CREAM, COLLECTIONS_GHAST_TEAR, COLLECTIONS_SULPHUR, COLLECTIONS_ROTTEN_FLESH, COLLECTIONS_SPIDER_EYE, COLLECTIONS_BONE, COLLECTIONS_BLAZE_ROD, COLLECTIONS_STRING, COLLECTIONS_LOG_2, COLLECTIONS_LOG:1, COLLECTIONS_LOG:3, COLLECTIONS_LOG:2, COLLECTIONS_LOG, COLLECTIONS_LOG_2:1, COLLECTIONS_WATER_LILY, COLLECTIONS_PRISMARINE_SHARD, COLLECTIONS_INK_SACK, COLLECTIONS_RAW_FISH, COLLECTIONS_RAW_FISH:3, COLLECTIONS_RAW_FISH:2, COLLECTIONS_RAW_FISH:1, COLLECTIONS_PRISMARINE_CRYSTALS, COLLECTIONS_CLAY, COLLECTIONS_SPONGE");
                #valid_index  = indexof(&valid_guis[],,%&target_gui%);
                &target_gui   = ucase(%&valid_guis[%#valid_index%]%);
                if(%#valid_index% == -1);
                    debug_error(%debug%,%&script_debug_name%,"Invalid TargetGUI &4%&target_gui%&7 passed.");
                    return(False);
                endif;
                debug_log(%debug%,%&script_debug_name%,"TargetGUI: %&target_gui%");
            endif;
            
            // Define different GUI types.
            if(true);
                // SkyBlock Command GUIs (has a shortcut command, no caveats as to when the command can be used).
                if(true);
                    // GUI Parameter Terms
                    &command_guis[] = split(", ","HY_SETTINGS, SB_SETTINGS, SB_MENU, CALENDAR, STORAGE, ENDERCHEST, PROFILES, EFFECTS, CRAFT_ITEM, SKILLS, COLLECTIONS, COLLECTIONS_INK_SACK:3, COLLECTIONS_CARROT_ITEM, COLLECTIONS_CACTUS, COLLECTIONS_RAW_CHICKEN, COLLECTIONS_SUGAR_CANE, COLLECTIONS_PUMPKIN, COLLECTIONS_WHEAT, COLLECTIONS_SEEDS, COLLECTIONS_MUSHROOM_COLLECTION, COLLECTIONS_RABBIT, COLLECTIONS_NETHER_STALK, COLLECTIONS_MUTTON, COLLECTIONS_MELON, COLLECTIONS_POTATO_ITEM, COLLECTIONS_LEATHER, COLLECTIONS_PORK, COLLECTIONS_FEATHER, COLLECTIONS_INK_SACK:4, COLLECTIONS_REDSTONE, COLLECTIONS_COAL, COLLECTIONS_ENDER_STONE, COLLECTIONS_QUARTZ, COLLECTIONS_SAND, COLLECTIONS_IRON_INGOT, COLLECTIONS_GEMSTONE_COLLECTION, COLLECTIONS_OBSIDIAN, COLLECTIONS_DIAMOND, COLLECTIONS_COBBLESTONE, COLLECTIONS_GLOWSTONE_DUST, COLLECTIONS_GOLD_INGOT, COLLECTIONS_GRAVEL, COLLECTIONS_HARD_STONE, COLLECTIONS_MITHRIL_ORE, COLLECTIONS_EMERALD, COLLECTIONS_ICE, COLLECTIONS_NETHERRACK, COLLECTIONS_ENDER_PEARL, COLLECTIONS_SLIME_BALL, COLLECTIONS_MAGMA_CREAM, COLLECTIONS_GHAST_TEAR, COLLECTIONS_SULPHUR, COLLECTIONS_ROTTEN_FLESH, COLLECTIONS_SPIDER_EYE, COLLECTIONS_BONE, COLLECTIONS_BLAZE_ROD, COLLECTIONS_STRING, COLLECTIONS_LOG_2, COLLECTIONS_LOG:1, COLLECTIONS_LOG:3, COLLECTIONS_LOG:2, COLLECTIONS_LOG, COLLECTIONS_LOG_2:1, COLLECTIONS_WATER_LILY, COLLECTIONS_PRISMARINE_SHARD, COLLECTIONS_INK_SACK, COLLECTIONS_RAW_FISH, COLLECTIONS_RAW_FISH:3, COLLECTIONS_RAW_FISH:2, COLLECTIONS_RAW_FISH:1, COLLECTIONS_PRISMARINE_CRYSTALS, COLLECTIONS_CLAY, COLLECTIONS_SPONGE");
                    
                    // Commands to issue to enter the correct GUI while on SkyBlock.
                    &command_text[] = split(", ","/settings, /viewsettings, /sbmenu, /calendar, /storage, /enderchest, /profiles, /effects, /craft, /skills, /collections, /viewcollection INK_SACK:3, /viewcollection CARROT_ITEM, /viewcollection CACTUS, /viewcollection RAW_CHICKEN, /viewcollection SUGAR_CANE, /viewcollection PUMPKIN, /viewcollection WHEAT, /viewcollection SEEDS, /viewcollection MUSHROOM_COLLECTION, /viewcollection RABBIT, /viewcollection NETHER_STALK, /viewcollection MUTTON, /viewcollection MELON, /viewcollection POTATO_ITEM, /viewcollection LEATHER, /viewcollection PORK, /viewcollection FEATHER, /viewcollection INK_SACK:4, /viewcollection REDSTONE, /viewcollection COAL, /viewcollection ENDER_STONE, /viewcollection QUARTZ, /viewcollection SAND, /viewcollection IRON_INGOT, /viewcollection GEMSTONE_COLLECTION, /viewcollection OBSIDIAN, /viewcollection DIAMOND, /viewcollection COBBLESTONE, /viewcollection GLOWSTONE_DUST, /viewcollection GOLD_INGOT, /viewcollection GRAVEL, /viewcollection HARD_STONE, /viewcollection MITHRIL_ORE, /viewcollection EMERALD, /viewcollection ICE, /viewcollection NETHERRACK, /viewcollection ENDER_PEARL, /viewcollection SLIME_BALL, /viewcollection MAGMA_CREAM, /viewcollection GHAST_TEAR, /viewcollection SULPHUR, /viewcollection ROTTEN_FLESH, /viewcollection SPIDER_EYE, /viewcollection BONE, /viewcollection BLAZE_ROD, /viewcollection STRING, /viewcollection LOG_2, /viewcollection LOG:1, /viewcollection LOG:3, /viewcollection LOG:2, /viewcollection LOG, /viewcollection LOG_2:1, /viewcollection WATER_LILY, /viewcollection PRISMARINE_SHARD, /viewcollection INK_SACK, /viewcollection RAW_FISH, /viewcollection RAW_FISH:3, /viewcollection RAW_FISH:2, /viewcollection RAW_FISH:1, /viewcollection PRISMARINE_CRYSTALS, /viewcollection CLAY, /viewcollection SPONGE");
                    
                    // Regular Expression to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &command_expr[] = split(", ","Game Settings, Settings, SkyBlock Menu, Calendar and Events, Storage, Ender Chest, Profile Management, Active Effects, Craft Item, Your Skills, ^Collection$, ^Cocoa Beans Collection$, ^Carrot Collection$, ^Cactus Collection$, ^Raw Chicken Collection$, ^Sugar Cane Collection$, ^Pumpkin Collection$, ^Wheat Collection$, ^Seeds Collection$, ^Mushroom Collection$, ^Raw Rabbit Collection$, ^Nether Wart Collection$, ^Mutton Collection$, ^Melon Collection$, ^Potato Collection$, ^Leather Collection$, ^Raw Porkchop Collection$, ^Feather Collection$, ^Lapis Lazuli Collection$, ^Redstone Collection$, ^Coal Collection$, ^End Stone Collection$, ^Nether Quartz Collection$, ^Sand Collection$, ^Iron Ingot Collection$, ^Gemstone Collection$, ^Obsidian Collection$, ^Diamond Collection$, ^Cobblestone Collection$, ^Glowstone Dust Collection$, ^Gold Ingot Collection$, ^Gravel Collection$, ^Hard Stone Collection$, ^Mithril Collection$, ^Emerald Collection$, ^Ice Collection$, ^Netherrack Collection$, ^Ender Pearl Collection$, ^Slimeball Collection$, ^Magma Cream Collection$, ^Ghast Tear Collection$, ^Gunpowder Collection$, ^Rotten Flesh Collection$, ^Spider Eye Collection$, ^Bone Collection$, ^Blaze Rod Collection$, ^String Collection$, ^Acacia Wood Collection$, ^Spruce Wood Collection$, ^Jungle Wood Collection$, ^Birch Wood Collection$, ^Oak Wood Collection$, ^Dark Oak Wood Collection$, ^Lily Pad Collection$, ^Prismarine Shard Collection$, ^Ink Sack Collection$, ^Raw Fish Collection$, ^Pufferfish Collection$, ^Clownfish Collection$, ^Raw Salmon Collection$, ^Prismarine Crystals Collection$, ^Clay Collection$, ^Sponge Collection$");
                    
                    // SkyBlock Skill GUIs
                    if(true);
                        // GUI Parameter Terms
                        &sb_skill_guis[] = split(", ","SKILLS_FARMING, SKILLS_MINING, SKILLS_COMBAT, SKILLS_FORAGING, SKILLS_FISHING, SKILLS_ENCHANTING, SKILLS_ALCHEMY, SKILLS_RUNECRAFTING, SKILLS_SOCIAL, SKILLS_TAMING, SKILLS_DUNGEONEERING");
                        
                        // Commands to issue to enter the correct GUI while on SkyBlock.
                        &sb_skill_text[] = split(", ","/viewskill FARMING, /viewskill MINING, /viewskill COMBAT, /viewskill FORAGING, /viewskill FISHING, /viewskill ENCHANTING, /viewskill ALCHEMY, /viewskill RUNECRAFTING, /viewskill SOCIAL, /viewskill TAMING, /viewskill DUNGEONEERING");
                        
                        // Regular Expression to match against CONTAINERNAME to determine whether we are in the correct GUI.
                        &sb_skill_expr[] = split(", ","Farming Skill, Mining Skill, Combat Skill, Foraging Skill, Fishing Skill, Enchanting Skill, Alchemy Skill, Runecrafting Skill, Social Skill, Taming Skill, Dungeoneering");
                        
                        push(&command_guis[],&sb_skill_guis[*]);
                        push(&command_text[],&sb_skill_text[*]);
                        push(&command_expr[],&sb_skill_expr[*]);
                    endif;
                endif;
                
                // SBMENU GUIs (must type /sbmenu before continuing).
                if(true);
                    // GUI Parameter Terms
                    &sbmenu_guis[] = split(", ","TRADES, BOOSTER, STATS, ACCESSORY_BAG");
                    
                    // Item Base Items to look for in SBMENU to click on to progress
                    &sbmenu_item[] = split(", ","emerald, cookie, skull, skull");
                    
                    // Item Display Names to look for in SBMENU to click on to progress
                    &sbmenu_name[] = split(", ","Trades, Booster Cookie, Your SkyBlock Profile, Accessory Bag");
                    
                    // Regular Expressions to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &sbmenu_expr[] = split(", ","Trades, Booster Cookie, Your SkyBlock Profile, Accessory Bag");
                endif;
                
                // SkyBlock Setting GUIs (must type /viewsettings before continuing).
                if(true);
                    // GUI Parameter Terms
                    &sbsetting_guis[] = split(", ","SB_SETTINGS_PERSONAL, SB_SETTINGS_COMMS, SB_SETTINGS_IS, SB_SETTINGS_API, SB_SETTINGS_IS_MGMT");
                    
                    // Item Base Items to look for in SB_SETTINGS to click on to progress
                    &sbsetting_item[] = split(", ","skull, sign, repeater, comparator, grass");
                    
                    // Item Display Names to look for in SB_SETTINGS to click on to progress
                    &sbsetting_name[] = split(", ","Personal, Comms, Island Settings, API Settings, Island Management");
                    
                    // Regular Expressions to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &sbsetting_expr[] = split(", ","Settings - Personal, Settings - Comms, Settings - Island Settings, Settings - API, Island Management");
                endif;
                
                // Hypixel Setting GUIs (must type /settings before continuing).
                if(true);
                    // GUI Parameter Terms
                    &hysetting_guis[] = split(", ","HY_SETTINGS_GAME, HY_SETTINGS_CHAT, HY_SETTINGS_SOCIAL, HY_SETTINGS_LOBBY, HY_SETTINGS_API, HY_SETTINGS_GUILD");
                    
                    // Item Base Items to look for in HY_SETTINGS to click on to progress
                    &hysetting_item[] = split(", ","comparator, paper, iron_bars, nether_star, web, dye");
                    
                    // Item Display Names to look for in HY_SETTINGS to click on to progress
                    &hysetting_name[] = split(", ","Game Settings, Chat Settings, Social Settings, Lobby Settings, API Settings, Personal Guild Settings");
                    
                    // Regular Expressions to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &hysetting_expr[] = split(", ","Game Settings, Chat Settings, Social Settings, Lobby Settings, API Settings, Personal Guild Settings");
                endif;
                
                // Booster Cookie Effect GUIs (must have Booster Cookie Effect enabled).
                if(true);
                    // GUI Parameter Terms
                    &booster_guis[] = split(", ","BOOSTER, ANVIL, BAZAAR, AUCTION_HOUSE, ENCHANTING");
                    
                    // Commands to issue to enter the correct GUI while on SkyBlock.
                    &booster_text[] = split(", ","/sbmenu, /av, /bz, /ah, /et");
                    
                    // Item Base Items to look for in SBMENU to Progress (only required for 'BOOSTER' exception)
                    &booster_item[] = split(", ","cookie");
                    
                    // Item Display Names to look for in SBMENU to click on to progress (only required for 'BOOSTER' exception)
                    &booster_name[] = split(", ","Booster Cookie");
                    
                    &baz_strings = "(?:Farming|Mining|Combat|Woods & Fishes|Oddities)";
                    
                    // Regular Expression to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &booster_expr[] = split(", ","Booster Cookie, Anvil, Bazaar \u279C %&baz_strings%, ^(?:Co-op )?Auction House$, ^Enchant Item$");
                endif;
            endif;
            
            // Find the type of GUI we are entering.
            if(true);
                #command_index    = indexof(&command_guis[],,%&target_gui%);
                #sbmenu_index     = indexof(&sbmenu_guis[],,%&target_gui%);
                #sbsetting_index  = indexof(&sbsetting_guis[],,%&target_gui%);
                #hysetting_index  = indexof(&hysetting_guis[],,%&target_gui%);
                #booster_index    = indexof(&booster_guis[],,%&target_gui%);
                #collection_index = indexof(&collection_guis[],,%&target_gui%);
                
                // For any of the GUIs categorized under command_guis, sbmenu_guis, sbsetting_guis, and booster_guis,
                // we have to be on some sort of SkyBlock Server for them to work. So, if we are entering a GUI found
                // in any of those arrays, get onto a SkyBlock Server beforehand.
                if((#collection_index != -1) || (#command_index != -1) || (#sbmenu_index != -1) || (#sbsetting_index != -1) || (#booster_index != -1));
                    debug_log(%debug%,%&script_debug_name%,"Using a SkyBlock Only command, making sure we are on SkyBlock before command execution...");
                    #goto_server_timeout = -1;
                    do;
                        if(%do_timeout%);
                            #goto_server_timeout = %#timeout_sec% - (%TIMESTAMP% - %#start_time%);
                        endif;
                        on_server = call("gotoServer","SKYBLOCK",100,%#goto_server_timeout%);
                        if(%on_server%);
                            break;
                        endif;
                        wait("1t");
                        
                        func_timeout = ((%do_timeout%) && ((%TIMESTAMP% - %#start_time%) >= %#timeout_sec%));
                    until((%func_timeout%) || (%on_server%));
                    if(%func_timeout%);
                        #elapsed_sec  = %TIMESTAMP% - %#start_time%;
                        &elapsed_time = sectotime(%#elapsed_sec%);
                        debug_error(%debug%,%&script_debug_name%,"Function timed out during gotoServer calls (elapsed time: &4%&elapsed_time%&7).");
                        return(False);
                    endif;
                    debug_log(%debug%,%&script_debug_name%,"On a valid SkyBlock Server, continuing on...");
                endif;
                
                // Handle Booster stuff beforehand if needed (check if effect is applied).
                if(%#booster_index% != -1);
                    debug_log(%debug%,%&script_debug_name%,"Using a Booster Cookie function");
                    booster_enabled = isEffectEnabled("COOKIE");
                    if(!%booster_enabled%);
                        debug_error(%debug%,%&script_debug_name%,"Booster Cookie effect required for TargetGUI: &4%&target_gui%&7.");
                        return(False);
                    endif;
                endif;
                
                // Handle the unique actions required of each remote GUI type.
                if(true);
                    if((%#booster_index% != -1) || (%#command_index% != -1));
                        // Can just issue commands, no need to open GUIs beforehand.
                        if(%#booster_index% != -1);
                            &command_text     = %&booster_text[%#booster_index%]%;
                            &exit_expr        = %&booster_expr[%#booster_index%]%;
                            booster_exception = %&target_gui% == "BOOSTER";
                            if(%booster_exception%);
                                init_gui   = true;
                                &init_gui  = "SB_MENU";
                                &next_item = %&booster_item[%#booster_index%]%;
                                &next_name = %&booster_name[%#booster_index%]%;
                            endif;
                        elseif(%#command_index% != -1);
                            &command_text     = %&command_text[%#command_index%]%;
                            &exit_expr        = %&command_expr[%#command_index%]%;
                        endif;
                    else;
                        init_gui = true;
                        // Must enter some holding menu before continuing.
                        if(%#sbmenu_index% != -1);
                            // Must enter the 'SkyBlock Menu' (SB_MENU) GUI before continuing.
                            &init_gui  = "SB_MENU";
                            &next_item = %&sbmenu_item[%#sbmenu_index%]%;
                            &next_name = %&sbmenu_name[%#sbmenu_index%]%;
                            &exit_expr = %&sbmenu_expr[%#sbmenu_index%]%;
                        elseif(%#sbsetting_index% != -1);
                            // Must enter the 'SkyBlock Settings' (SB_SETTINGS) GUI before continuing.
                            &init_gui  = "SB_SETTINGS";
                            &next_item = %&sbsetting_item[%#sbsetting_index%]%;
                            &next_name = %&sbsetting_name[%#sbsetting_index%]%;
                            &exit_expr = %&sbsetting_expr[%#sbsetting_index%]%;
                        elseif(%#hysetting_index% != -1);
                            // Must enter the 'Hypixel Settings' (HY_SETTINGS) GUI before continuing.
                            &init_gui  = "HY_SETTINGS";
                            &next_item = %&hysetting_item[%#hysetting_index%]%;
                            &next_name = %&hysetting_name[%#hysetting_index%]%;
                            &exit_expr = %&hysetting_expr[%#hysetting_index%]%;
                        endif;
                    endif;
                    
                    do;
                        ifmatches(%CONTAINERNAME%,%&exit_expr%);
                            debug_log(%debug%,%&script_debug_name%,"Breaking, containername matches exit expr (%CONTAINERNAME%, %&exit_expr%)");
                            break;
                        endif;
                        
                        // Check for function timeout
                        if(%do_timeout%);
                            func_timeout = ((%TIMESTAMP% - %#start_time%) >= %#timeout_sec%);
                            if(%func_timeout%);
                                debug_error(%debug%,%&script_debug_name%,"Function timed out while attempting to open a GUI Container.");
                                break;
                            endif;
                        endif;
                        
                        // Execute GUI actions depending on what type of GUI we are currently in and where we need to go.
                        if(true);
                            // Enter the "pre-requisite" GUI, or echo the Command needed to enter the GUI we want to enter.
                            if(%GUI% == "NONE");
                                in_init_gui = false;
                                // Enter the "pre-requisite" GUI.
                                if(%init_gui%);
                                    in_init_gui = call("remoteGUI",%&init_gui%,%#tick_wait%);
                                else;
                                    // Echo the Command needed to enter the GUI we want to enter.
                                    debug_log(%debug%,%&script_debug_name%,"echoing command %&command_text%...");
                                    unset(@remote_gui_collection_unlock_exception);
                                    echo("%&command_text%");
                                    do(%#tick_wait%);
                                        wait("1t");
                                    while((%GUI% == "NONE") && (!%@remote_gui_collection_unlock_exception%));
                                    if(%@remote_gui_collection_unlock_exception%);
                                        debug_error(%debug%,%&script_debug_name%,"Do not have collection '%&target_gui%' unlocked yet!");
                                        break;
                                    endif;
                                endif;
                            elseif((%init_gui%) && (%in_init_gui%));
                                // In the "pre-requisite" GUI, find the item we want to click.
                                if(true);
                                    // Iterate over Dynamic Container Slots
                                    if(true);
                                        #found_slot = -1;
                                        #r_start    = 0;
                                        #r_end      = %CONTAINERSLOTS% - 37;
                                        &r_item     = "%&next_item%";
                                        &r_name     = "%&next_name%";
                                        for(#r_slot,%#r_start%,%#r_end%);
                                            #f_slot = %#r_slot%;
                                            if(%&r_item%);
                                                getslot(%&r_item%,#f_slot,%#r_offset%);
                                            endif;
                                            
                                            if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                                                #r_offset = %#f_slot% + 1;
                                                &f_item   = getslotitemnbt(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                                                &f_nbt    = strip(%&f_nbt%);
                                                &f_name   = getItemName(%&f_nbt%,%&f_item%);
                                                &f_sbid   = getItemSBID(%&f_nbt%);
                                                m_item    = ((!%&r_item%) || (%&r_item% == %&f_item%));
                                                m_name    = ((!%&r_name%) || (%&r_name% == %&f_name%));
                                                m_sbid    = ((!%&r_sbid%) || (%&r_sbid% == %&f_sbid%));
                                                m_match   = ((%m_item%) && (%m_name%) && (%m_sbid%));
                                                if(%m_match%);
                                                    #found_slot = %#f_slot%;
                                                    break;
                                                endif;
                                            else;
                                                break;
                                            endif;
                                        next;
                                    endif;
                                    
                                    if(%#found_slot% != -1);
                                        &init_gui_string = getContainerString();
                                        entered_new_gui  = false;
                                        do;
                                            slotclick(%#found_slot%);
                                            do(%#tick_wait%);
                                                wait("1t");
                                                entered_new_gui = enteredNewGUI(%&init_gui_string%);
                                            while(!%entered_new_gui%);
                                        while(!%entered_new_gui%);
                                        in_init_gui = !%entered_new_gui%;
                                    else;
                                        debug_error(%debug%,%&script_debug_name%,"Cannot find 'next' item (base: %&next_item%, name: %&next_name%). GUI: %GUI%, CONTAINERNAME: %CONTAINERNAME%, CONTAINERSLOTS: %CONTAINERSLOTS%.");
                                        break;
                                    endif;
                                endif;
                            else;
                                // In a GUI that is not "NONE", have to leave it.
                                exited_gui = localGUI("NONE",%#tick_wait%);
                            endif;
                        endif;
                    untilmatches(%CONTAINERNAME%,%&exit_expr%);
                endif;
            endif;
            
            ifmatches(%CONTAINERNAME%,%&exit_expr%);
                debug_log(%debug%,%&script_debug_name%,"Success!");
                return_boolean = true;
            else;
                debug_log(%debug%,%&script_debug_name%,"Failure!");
            endif;
            return(%return_boolean%);
        endfunction;
    // misc/index/getNewTimeoutSec
        // Adjusts <#timeout_sec> to be <#timeout_sec> minus amount of seconds elapsed since <#start_time>.
            // Params:
                // {number} <#start_time>         Timestamp of fn start in caller script
                // {number} <#timeout_sec>        Timeout seconds passed to caller script
                // {boolean} [do_timeout=true]    Whether or not the timeout is active (if it is, the function will always
                //                                return a positive number. If it is not, it will allow <= 0 numbers).
            // Returns the new Timeout in Seconds
            // Example:
                //    #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
        function getNewTimeoutSec(#start_time,#timeout_sec,do_timeout=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:59
            #recursive_timeout = %#timeout_sec%;
            if(%do_timeout%);
                #recursive_timeout = %#timeout_sec% - (%TIMESTAMP% - %#start_time%);
                if(%#recursive_timeout% <= 0);
                    #recursive_timeout = 1;
                endif;
            endif;
            return(%#recursive_timeout%);
        endfunction;
    // banking/index/bankingActionInternalOpenBank
        // Opens the Banking GUI up by first trying to check if the User has access to (and is off cooldown of)
        // the Personal Bank Item, and if so, uses it. If not, and/or the User does not have access to the Item,
        // goes to the Banker NPC in person and opens the GUI up.
            // Params:
                // {number}  [#timeout_sec=30]       The maximum amount of Seconds that this Function can run for. If set to <= 0,
                //                                   Function will run on a loop until it is successful, without ever timing out.
                // {number}  [#tick_wait=20]         The amount of Ticks to wait between looping repeated actions.
                // {boolean} [personal_bank=true]    Whether or not to try to use the Personal Bank Item.
            // Returns a Boolean indicating whether or not we were able to open the Bank GUI up.
            // Examples:
                // in_bank = bankingActionInternalOpenBank(%#timeout_sec%,%#tick_wait%,%personal_bank%);
        function bankingActionInternalOpenBank(#timeout_sec=30,#tick_wait=20,personal_bank=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:828
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6bankingOpenBank";
                do_timeout         = %#timeout_sec% > 0;
                #start_time        = %TIMESTAMP%;
        
                // Setup where we expect to find the Item, and what the Item is
                if(true);
                    #f_slot = 33;
                    &f_item = "skull";
                    #f_data = 3;
                    &f_name = "Personal Bank";
                endif;
            endif;
        
            // Start looping until we know whether or not we have access to the Personal Bank Item.
            if(true);
                return_boolean      = false;
                &expected_container = "^(?:Bank|Personal Bank Account)$";
                do;
                    // 1. Check for Function Timeout
                    if(%do_timeout%);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"Function Timed out");
                            break;
                        endif;
                    endif;
        
                    // 2. Open up the SBMENU GUI.
                    if((%personal_bank%) && (!%personal_unavailable%));
                        #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                        sbmenu_gui         = remoteGUI("SB_MENU",%#tick_wait%,%#recursive_timeout%);
                        if(!%sbmenu_gui%);
                            debug_error(%debug%,%&script_debug_name%,"Could not enter the SBMENU GUI!");
                            break;
                        endif;
        
                        // 2a. Check if we can find the Piggy Bank Item.
                        if(true);
                            #bank_slot = findItemContainer(false,"SLOT: %#f_slot%","MCID: %&f_item%","DATA: %#f_data%","NAME: %&f_name%");
                            if(%#bank_slot% != -1);
                                &bank_item = getslotitemnbt(%#bank_slot%,,#bank_stack,#bank_data,&bank_nbt);
                                &bank_nbt  = strip(%&bank_nbt%);
                                ifmatches(%&bank_nbt%,"(?:Available|No Cooldown)");
                                    #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                                    debug_log(%debug%,%&script_debug_name%,"calling containerClick(%#bank_slot%,%#recursive_timeout%,%#tick_wait%,false,false,false)");
                                    entered_new_gui    = containerClick(%#bank_slot%,%#recursive_timeout%,%#tick_wait%,false,false,false);
                                    debug_log(%debug%,%&script_debug_name%,"got return value %entered_new_gui% from containerClick(%#bank_slot%,%#recursive_timeout%,%#tick_wait%,false,false,false);");
                                    if(%entered_new_gui%);
                                        ifmatches(%CONTAINERNAME%,%&expected_container%);
                                            debug_log(%debug%,%&script_debug_name%,"used bank item successfully");
                                            return_boolean = true;
                                            break;
                                        endif;
                                    endif;
                                else;
                                    personal_unavailable = true
                                endif;
                            else;
                                personal_unavailable = true;
                            endif;
                        endif;
                    endif;
        
                    // 3. SBMENU -> Personal Bank didn't work, so let's try going to the Banker in Person instead.
                    if(true);
                        #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                        return_boolean     = goto("BANKER",true,%#recursive_timeout%);
                        if(%return_boolean%);
                            break;
                        else;
                            debug_error(%debug%,%&script_debug_name%,"GOTO failed to get us into the Banker GUI?");
                        endif;
                    endif;
                until(%return_boolean%);
            endif;
        
            debug_log(%debug%,%&script_debug_name%,"outcome of attempt to open bank was: '%return_boolean%' (returning this to caller)");
            return(%return_boolean%);
        endfunction;
    // banking/index/bankingInfoInternalGetGuiType
        // Gets the String ENUM of Banking GUI Type that is currently open.
            // Returns a String ENUM:
                //    UPGRADES         The GUI for upgrading the Bank's Limits
                //    CHOICE           The First Menu GUI for a Coop Profile (can click to choose Coop or Solo Account from here). Solo
                //                     Profiles will be put into the SOLO GUI Type instead of this GUI for their Main Menu.
                //    COOP             The GUI for depositing or withdrawing into a Coop Account
                //    SOLO             The GUI for depositing or withdrawing into a Solo Account
                //    COOP_DEPOSIT     The GUI for depositing into a Coop Account
                //    SOLO_DEPOSIT     The GUI for depositing into a Solo Account
                //    SIGN_DEPOSIT     The GUI for depositing a Custom Amount into an Account (Type would not be known since cannot get GUI Items)
                //    COOP_WITHDRAW    The GUI for withdrawing from a Coop Account
                //    SOLO_WITHDRAW    The GUI for withdrawing from a Solo Account
                //    SIGN_WITHDRAW    The GUI for withdrawing a Custom Amount from an Account (Type would not be known since cannot get GUI Items)
                //    NONE             A Banking GUI is not open.
            // Example:
                //    &bank_gui_type = bankingInfoInternalGetGuiType();
                //    if(%&bank_gui_type% == "NONE");
                //    elseif(%&bank_gui_type% == "UPGRADES");
                //    elseif(%&bank_gui_type% == "CHOICE");
                //    elseif(%&bank_gui_type% == "COOP");
                //    elseif(%&bank_gui_type% == "SOLO");
                //    elseif(%&bank_gui_type% == "COOP_DEPOSIT");
                //    elseif(%&bank_gui_type% == "SOLO_DEPOSIT");
                //    elseif(%&bank_gui_type% == "SIGN_DEPOSIT");
                //    elseif(%&bank_gui_type% == "COOP_WITHDRAW");
                //    elseif(%&bank_gui_type% == "SOLO_WITHDRAW");
                //    elseif(%&bank_gui_type% == "SIGN_WITHDRAW");
                //    endif;
        function bankingInfoInternalGetGuiType();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:158
            // Setup Function Variables
            if(true);
                debug               = true;
                &script_debug_name  = "&6bankingGetGuiType";
                &enum_upgrades      = "UPGRADES";
                &enum_choice        = "CHOICE";
                &enum_coop          = "COOP";
                &enum_solo          = "SOLO";
                &enum_coop_deposit  = "COOP_DEPOSIT";
                &enum_solo_deposit  = "SOLO_DEPOSIT";
                &enum_sign_deposit  = "SIGN_DEPOSIT";
                &enum_coop_withdraw = "COOP_WITHDRAW";
                &enum_solo_withdraw = "SOLO_WITHDRAW";
                &enum_sign_withdraw = "SIGN_WITHDRAW";
                &enum_none          = "NONE";
                &return_string      = %&enum_none%;
        
                // Setup CONTAINERNAME to ENUM Maps
                if(true);
                    &enum_map_enums[]      = %&enum_choice%;
                    &enum_map_containers[] = "Bank";
        
                    &enum_map_enums[]      = %&enum_upgrades%;
                    &enum_map_containers[] = "Bank Account Upgrades";
        
                    &enum_map_enums[]      = %&enum_coop%;
                    &enum_map_containers[] = "Co-op Bank Account";
        
                    &enum_map_enums[]      = %&enum_solo%;
                    &enum_map_containers[] = "Personal Bank Account";
        
                    // Find Type ('COOP' or 'SOLO') Containers
                    &typed_containers[] = split(", ","Bank Deposit, Bank Withdrawal");
                    &typed_suffixes[]   = split(", ","DEPOSIT, WITHDRAW");
                endif;
            endif;
        
            &check_gui       = %GUI%;
            &check_container = %CONTAINERNAME%;
        
            // If we are in a valid GUI, find the GUI ENUM for the Container.
            if((%&check_gui% == "GUICHEST") || (%&check_gui% == "GUIEDITSIGN"));
                #enum_map_index = indexof(&enum_map_containers[],,%&check_container%);
                #typed_index    = indexof(&typed_containers[],,%&check_container%);
                if(%#enum_map_index% != -1);
                    &return_string = %&enum_map_enums[%#enum_map_index%]%;
                elseif(%#typed_index% != -1);
                    &return_suffix = %&typed_suffixes[%#typed_index%]%;
                    &return_prefix = "SIGN";
                    if(%&check_gui% == "GUICHEST");
                        // Find the Type of the Container by finding the 'Go Back' Button and grabbing the 'To (Co-op|Personal) Bank Account'
                        // String from the NBT.
                        #go_back_slot = findItemContainer(false,"MCID: arrow","NAME: Go Back","SLOT: 31","NBT: r$To (Co-op|Personal) Bank Account");
                        if(%#go_back_slot% != -1);
                            &go_back_item = getslotitemnbt(%#go_back_slot%,,#go_back_stack,#go_back_data,&go_back_nbt);
                            &go_back_nbt  = strip(%&go_back_nbt%);
                            ifmatches(%&go_back_nbt%,"To (Co-op|Personal) Bank Account",&capture_group,1);
                                &return_prefix = "COOP";
                                &capture_group = lcase(%&capture_group%);
                                if(%&capture_group% == "personal");
                                    &return_prefix = "SOLO";
                                endif;
                            endif;
                        endif;
                    endif;
                    &return_string = "%&return_prefix%_%&return_suffix%";
                endif;
            endif;
        
            debug_log(%debug%,%&script_debug_name%,"Returning Banking GUI Type: '&d%&return_string%&7' from GUI '&d%&check_gui%&7', CONTAINERNAME '&d%&check_container%&7'.");
            return(%&return_string%);
        endfunction;
    // array/index/arrayLength
        // Returns the zero-indexed length of an Array.
            // Params:
            //        <array> <&array[]>    The Array to measure the length of.
            //
            // Returns the zero-indexed length of the Array (arraysize - 1).
        function arrayLength(&array[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:6
            #array_size   = arraysize(&array[]);
            #array_length = #array_size - 1;
            return(%#array_length%);
        endfunction;
    // array/index/arrayDelete
        // Removes the Element at <#index> from <&array[]> (different from calling unset, completely clears the entry from the Array).
            // Params:
            //        {array} <&array[]>    The Array to unset the specified index from.
            //        {number} <#index>     The Index to unset in the Source Array. If negative, will be taken
            //                              as an offset from the end of the Array (i.e. -1 = array.length - 1).
            //                              If the Index is greater than the length of the Source Array, no element
            //                              will be removed.
        function arrayDelete(&array[],#index);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:295
            #array_size = arraysize(&array[]);
            #array_len  = #array_size - 1;
            if(%#array_size% == 0);
                return(&array[]);
            else;
                if(%#index% < 0);
                    #index = #array_len + #index;
                endif;
                
                if((%#index% >= 0) && (%#index% <= %#array_len%));
                    foreach(&array[],&element,#i);
                        if(%#i% != %#index%);
                            &out_array[] = %&element%;
                        endif;
                    next;
                endif;
            endif;
            return(&out_array[]);
        endfunction;
    // string/index/xJsonGet
        // Identical to original `jsonget`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&string_a>    The Key to get in the JSON Object, or the JSON Object itself.
                // {string} <&string_b> The Key to get in the JSON Object, or the JSON Object itself. Must be the other value compared to <&string_a>
            // Returns the value provided by `jsonget`, processed thru `convertENote`. Identical results, only difference is preservation of silently coerced Numbers.
        function xJsonGet(&string_a,&string_b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:265
            &return_string = jsonget(%&string_a%,%&string_b%);
            &return_string = convertENote(%&return_string%);
            return(%&return_string%);
        endfunction;
    // api/minecraft/getMinecraftProfileCacheIndex
        // Checks if a Minecraft Profile is available in the Cached Arrays (@&cached_mc_ [split_ids, joint_ids, usernames, change_ts]).
        // If it is, and the Cache is not invalid, the index the entry can be found at is returned. Otherwise, -1 is returned.
                // Params:
                //        <string>  &search_term   : The term to search for. Can be the username, dashed UUID, or joint UUID.
                //      [boolean] check_validity : True to return the index only if it is valid, false to return the index regardless of it's validity.
                //
                // Returns the index the Profile can be found at in the Cache.
        function getMinecraftProfileCacheIndex(&search_term,check_validity=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/minecraft.txt:8
            &script_debug_name = "&9getMinecraftProfileCacheIndex&7";
            debug              = true;
        
            // Check if the search term can be found in any of the caches.
            if(true);
                #lookup_index  = -1;
                #cache_index[] = indexof(@&cached_mc_split_uuids[],,%&search_term%);
                #cache_index[] = indexof(@&cached_mc_joint_uuids[],,%&search_term%);
                #cache_index[] = indexof(@&cached_mc_usernames[],,%&search_term%);
                foreach(#cache_index[],#cache_index);
                    if(%#cache_index% != -1);
                        #lookup_index = %#cache_index%;
                        break;
                    endif;
                next;
        
                // If we hit a valid cache entry, check if it is valid.
                if(%#lookup_index% != -1);
                    #valid_before = %@#cached_mc_valid_until[%#lookup_index%]%;
                    if((!%check_validity%) || (%#valid_before% >= %TIMESTAMP%));
                        // Player can't change name yet, the cache is valid.
                        return(%#lookup_index%);
                    endif;
                endif;
            endif;
        
            return(-1);
        endfunction;
    // api/minecraft/getMinecraftProfile
        // Gets a User's Minecraft Profile from playerdb.co.
            // Params:
                // {string} &search_term : The term to search for. Can be the username, dashed UUID, or joint UUID.
                //
            // Returns an Array:
                // 0 {boolean} success     : Whether or not the request was successful
                // 1 {string}  &username   : The player's username
                // 2 {string}  &joint_uuid : The player's joint UUID
                // 3 {string}  &split_uuid : The player's split UUID
            // Example:
                //    &minecraft_profile[]   = getMinecraftProfile(%&search_term%);
                //    minecraft_profile     := %&minecraft_profile[0]%;
                //    &minecraft_username    = %&minecraft_profile[1]%;
                //    &minecraft_joint_uuid  = %&minecraft_profile[2]%;
                //    &minecraft_split_uuid  = %&minecraft_profile[3]%;
        function getMinecraftProfile(&search_term);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/minecraft.txt:53
            &script_debug_name = "&9getMinecraftProfile&7";
            debug              = false;
        
            // If we are checking the current player, we can skip requests altogether.
            &player_split_uuid = %UUID%;
            &player_joint_uuid = regexreplace(&player_split_uuid,"-","");
            &player_identity[] = split(", ","%&player_split_uuid%, %&player_joint_uuid%, %PLAYER%");
            #player_index      = indexof(&player_identity[],,%&search_term%);
            if(%#player_index% != -1);
                &player_username   = %PLAYER%;
                &player_joint_uuid = %&player_joint_uuid%;
                &player_split_uuid = %UUID%;
                success            = true;
            else;
                // Not checking current player, do API calls.
                #cache_index  = getMinecraftProfileCacheIndex(%&search_term%,false);
                #valid_before = %@#cached_mc_valid_until[%#cache_index%]%;
                if((%#valid_before% >= %TIMESTAMP%) && (%#cache_index% != -1));
                    // Entry is cached, we can skip the request.
                    &player_username   = %@&cached_mc_usernames[%#cache_index%]%;
                    &player_joint_uuid = %@&cached_mc_joint_uuids[%#cache_index%]%;
                    &player_split_uuid = %@&cached_mc_split_uuids[%#cache_index%]%;
                    success            = true;
                else;
                    // Search term is not cached, try the API.
                    if(true);
                        setrequestheader("accept","application/json");
                        setrequestheader("user-agent","MC_API")
                        &api_url  = "https://playerdb.co/api/player/minecraft/%&search_term%";
                        &api_resp = httpget(%&api_url%,,#api_code);
                        &api_code = jsonget("code",%&api_resp%);
                        if(%&api_code% == "player.found");
                            &player_username   = jsonget("data.player.username",%&api_resp%);
                            &player_joint_uuid = jsonget("data.player.raw_id",%&api_resp%);
                            &player_split_uuid = jsonget("data.player.id",%&api_resp%);
                            success            = true;
                        elseif(%debug%);
                            &vars[] = split(" ","&api_url &api_resp &api_code #api_code");
                            foreach(&vars[],&var,#v);
                                &var_ = regexreplace(&var,"&","&&");
                                &val  = "%%&var%%";
                            next;
                        endif;
                    endif;
        
                    // Update the cache entry.
                    if(true);
                        if(%success%);
                            // Search term (could be UUID or Username) was valid and found on a Player.
                            // Update or initialize the Cache entry for the UUID.
                            &player_name_hist      = jsonget("data.player.meta.name_history",%&api_resp%);
                            &player_name_changes[] = getjsonasarray(%&player_name_hist%);
                            #player_name_changes   = arraylength(&player_name_changes[]);
                            if(%#player_name_changes% == 1);
                                &latest_change_time = 0;
                            else;
                                &latest_change_time = xJsonGet("changedToAt",%&player_name_changes[%#player_name_changes%]%);
                                &latest_change_time = match(%&latest_change_time%,"(^.{10})",1);
                            endif;
        
                            // A player can change their name every 30 days since their most recent name change.
                            // Set the 'cache invalidation' timestamp for this entry to be the latest change time + ms in 30 days.
                            #latest_change_time := %&latest_change_time%;
                            #can_change_name_at  = %#latest_change_time% + (60 * 60 * 24 * 30);
                            
                            #uuid_index = indexof(@&cached_mc_split_uuids[],,%&player_split_uuid%);
                            if(%#uuid_index% == -1);
                                @&cached_mc_split_uuids[] = %&player_split_uuid%;
                                @&cached_mc_joint_uuids[] = %&player_joint_uuid%;
                                @&cached_mc_usernames[]   = %&player_username%;
                                @#cached_mc_valid_until[] = %#can_change_name_at%;
                            else;
                                @&cached_mc_usernames[%#uuid_index%]   = %&player_username%;
                                @#cached_mc_valid_until[%#uuid_index%] = %#can_change_name_at%;
                            endif;
                        elseif(%#cache_index% != -1);
                            // Search term (has to be Username) was a previously valid Username on another User, but they have since
                            // changed their Username. We can be certain of this because the Cache was hit successfully, but the request
                            // did not pull up any valid Account.
                            //
                            // Clear the invalid entry from the Cache.
                            //
                            
                            @&cached_mc_split_uuids[] = arrayDelete(@&cached_mc_split_uuids[],%#cache_index%);
                            @&cached_mc_joint_uuids[] = arrayDelete(@&cached_mc_joint_uuids[],%#cache_index%);
                            @&cached_mc_usernames[]   = arrayDelete(@&cached_mc_usernames[],%#cache_index%);
                            @#cached_mc_valid_until[] = arrayDelete(@#cached_mc_valid_until[],%#cache_index%);
                        endif;
                    endif;
                endif;
            endif;
            return(%success%,%&player_username%,%&player_joint_uuid%,%&player_split_uuid%);
        endfunction;
    // api/slothpixel/slothpixelGetSkyBlockProfiles
        // Gets a player's Hypixel SkyBlock Profiles from Slothpixel's API.
            // Params:
            //        {string} [&search_term=%UUID%]    The player username/UUID to search for. If left blank, defaults to player's UUID.
            //
            // Returns an array:
            //    0         {boolean}    success       Whether or not we were able to get any data from the API (false if request fails)
            //    1, ...    {string}     &profile[]    The JSON Objects of the Profiles. Only provided if success == true and profiles !== null.
        function slothpixelGetSkyBlockProfiles(&search_term=%UUID%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/slothpixel.txt:8
            &player_data[]   = getMinecraftProfile(%&search_term%);
            player_success  := %&player_data[0]%;
            &return_array[0] = "False";
            if(%player_success%);
                &player_joint_uuid = %&player_data[2]%;
                &api_endpoint      = "https://api.slothpixel.me/api/skyblock/profiles/%&player_joint_uuid%";
                &api_response      = httpget(%&api_endpoint%,,#api_code);
                if(%#api_code% == 200);
                    &return_array[0] = "True";
                    &profile_ids[]   = getjsonkeys(%&api_response%);
                    foreach(&profile_ids[],&profile_id,#pii);
                        &return_array[] = jsonget(%&profile_id%,%&api_response%);
                    next;
                endif;
            endif;
            return(&return_array[]);
        endfunction;
    // api/index/getHypixelAPIRequestLimit
        // Gets the limiting variables for the current Player.
            // Params:
            //        None
            //
            // Returns an Array:
            //        0 <integer> #reqs_in_last_min : Total requests in the last 60 seconds.
            //        1 <integer> #reqs_avail_now   : Total requests available now before hitting throttle.
            //        2 <integer> #wait_timestamp   : Timestamp to wait till before making the next request to avoid being throttled.
        function getHypixelAPIRequestLimit();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:45
            &script_debug_name = "&9getHypixelAPIRequestLimit&7";
            debug              = true;
            #max_req_per_min   = 120;
        
            #api_reqs = arraysize(@#api_req_ts[]);
            if(%#api_reqs% >= 1);
                #array_end = %#api_reqs% - 1;
                for(#i,%#array_end%,0);
                    #api_req_ts  = %@#api_req_ts[%#i%]%;
                    #elapsed_sec = %TIMESTAMP% - %#api_req_ts%;
                    if(%#elapsed_sec% <= 120);
                        #save_timestamps[] = %#api_req_ts%;
                    endif;
                next;
        
                unset(@#api_req_ts[]);
                push(@#api_req_ts[],#save_timestamps[*]);
        
            endif;
        
            #reqs_in_last_min = arraysize(#save_timestamps[]);
            #reqs_avail_now   = 120 - %#reqs_in_last_min%;
            #wait_timestamp   = %TIMESTAMP% + ((%#reqs_in_last_min% - 120) / 2);
            return(%#reqs_in_last_min%,%#reqs_avail_now%,%#wait_timestamp%);
        endfunction;
    // string/index/isStringUUID
        // Checks if a string matches UUID regex.
            // Params:
            //        <string> &check_string : The string to check
            //
            // Returns a boolean.
            //
        function isStringUUID(&check_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:28
            &script_debug_name = "&9isStringUUID&7";
            debug              = false;
            &split_uuid_expr   = "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$";
            &joint_uuid_expr   = "^[a-f0-9]{32}$";
            &uuid_exprs[]      = split(", ","%&split_uuid_expr%, %&joint_uuid_expr%");
            foreach(&uuid_exprs[],&uuid_expr);
                ifmatches(%&check_string%,%&uuid_expr%);
                    match_found = true;
                    break;
                endif;
            next;
            return(%match_found%);
        endfunction;
    // api/index/getHypixelAPIKey
        // Gets a new Hypixel API Key.
            // Params:
            //        None
            //
            // Returns the new API Key String.
        function getHypixelAPIKey();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:6
            &script_debug_name = "&9getHypixelAPIKey&7";
            debug              = false;
            &old_api_key       = %@&api_key%;
            
            // Check if we need to get onto a Hypixel Server (not in Limbo) before execution.
            &hy_gamemode = getHypixelGamemode();
            if(%&hy_gamemode% == "LIMBO");
                do;
                    on_server = gotoServer("SKYBLOCK");
                    if(%on_server%);
                        break;
                    endif;
                    wait("1t");
                until(%on_server%);
            endif;
            
            do;
                echo("/api new");
                do(20);
                    wait("1t");
                until(%&old_api_key% != %@&api_key%);
                if(%&old_api_key% != %@&api_key%);
                    &new_api_key  = %@&api_key%;
                    new_valid_key = isStringUUID(%&new_api_key%);
                    &old_api_key  = %&new_api_key%;
                endif;
            until(%new_valid_key%);
            return(%&new_api_key%);
        endfunction;
    // api/index/hypixelAPICall
        // Makes a Hypixel API Call.
            // Params:
                // {string}  <&api_url>                The endpoint to call
                // {string}  [&api_key=%@&api_key%]    The API Key to use with the request. Defaults to @&api_key
                // {boolean} [recursion=false]         True if this function was called by itself. Defaults to false
            // Returns an Array:
                // 0 {boolean}    req_success    True if we received response from API, false if we got throttled by CF.
                // 1 {boolean}    api_success    The value of the 'success' key in the API response.
                // 2 {integer}    #api_code      The HTTP Response Code from the API Request.
                // 3 {string}     &api_resp      The raw JSON data returned from the Server.
            // Example:
                // &api_data[]  = hypixelAPICall(%&api_url%);
                // req_success := %&api_data[0]%; // True if we received response from API, false if we got throttled by CF.
                // api_success := %&api_data[1]%; // The value of the 'success' key in the API response.
                // #api_code   := %&api_data[2]%; // The HTTP Response Code from the API Request.
                // &api_resp    = %&api_data[3]%; // The raw JSON data returned from the Server.
        function hypixelAPICall(&api_url,&api_key=%@&api_key%,recursion=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:88
            &script_debug_name = "&9hypixelAPICall&7";
            debug              = true;
            
            // Setup variables
            if(true);
                key_needed     = true;
                req_success    = false;
                api_success    = false;
                #api_code      = -1;
                &api_resp      = "";
                #retry_codes[] = split(", ","403, 429, 503"); // 403: invalid api key, 429: throttled, 503: data unavailable right now
        
                // Setup known API Endpoints
                if(true);
                    &api_endpoints[] = "false|skyblock/auctions_ended";
                    &api_endpoints[] = "true|skyblock/auctions";
                    &api_endpoints[] = "true|skyblock/profiles";
                    &api_endpoints[] = "true|skyblock/auction";
                    &api_endpoints[] = "true|skyblock/profile";
                    &api_endpoints[] = "false|skyblock/bazaar";
                    &api_endpoints[] = "true|punishmentstats";
                    &api_endpoints[] = "true|skyblock/news";
                    &api_endpoints[] = "true|leaderboards";
                    &api_endpoints[] = "true|recentgames";
                    &api_endpoints[] = "false|resources";
                    &api_endpoints[] = "true|boosters";
                    &api_endpoints[] = "true|friends";
                    &api_endpoints[] = "true|player";
                    &api_endpoints[] = "true|status";
                    &api_endpoints[] = "true|counts";
                    &api_endpoints[] = "true|guild";
                    &api_endpoints[] = "true|key";
                endif;
        
                // Find the endpoint we are hitting
                if(true);
                    &api_uri = regexreplace(&api_url,"https://api.hypixel.net/","");
                    &use_uri = "";
                    foreach(&api_endpoints[],&api_endpoint,#aei);
                        &this_data[]   = split("|",%&api_endpoint%);
                        this_key_req  := %&this_data[0]%;
                        &this_endpoint = %&this_data[1]%;
                        ifmatches(%&api_uri%,"^%&this_endpoint%");
                            &use_uri   = %&this_endpoint%;
                            key_needed = %this_key_req%;
                            break;
                        endif;
                    next;
                    skip_req = %&use_uri% == "";
                endif;
            endif;
        
            // Validate the API Key passed to the function, if we are going to be using one.
            if((!%skip_req%) && (%key_needed%));
                key_test = isStringUUID(%&api_key%);
                if(!%key_test%);
                    debug_error(%debug%,%&script_debug_name%,"Parameter 'api_key' is invalid UUID: &4%&api_key%&7. Attempting to fix");
                    global_test = isStringUUID(%@&api_key%);
                    if(%global_test%);
                        &api_key = %@&api_key%;
                        debug_log(%debug%,%&script_debug_name%,"Using environment api_key instead (&a%@&api_key%&7).");
                    else;
                        &new_key  = getHypixelAPIKey();
                        new_valid = isStringUUID(%&new_key%);
                        if(%new_valid%);
                            debug_log(%debug%,%&script_debug_name%,"Using new api_key instead (&a%&new_key%&7).");
                            &api_key = %&new_key%;
                        else;
                            debug_error(%debug%,%&script_debug_name%,"Failed to get a new valid API key to use.");
                        endif;
                    endif;
                    key_test = isStringUUID(%&api_key%);
                    skip_req = !%key_test%;
                endif;
            endif;
        
            // Make the request, if we are making the request.
            if(true);
                if(!%skip_req%);
                    if(%key_needed%);
                        setrequestheader("API-Key",%&api_key%);
                        #throttle_vars[]  = getHypixelAPIRequestLimit();
                        #reqs_in_last_min = %#throttle_vars[0]%;
                        #reqs_avail_now   = %#throttle_vars[1]%;
                        #wait_timestamp   = %#throttle_vars[2]%;
        
                        if(%#reqs_avail_now% <= 0);
                            #wait_seconds = %#wait_timestamp% - %TIMESTAMP%;
                            debug_log(%debug%,%&script_debug_name%,"Delaying request by &d%#wait_seconds% seconds&7 to avoid being limited by Hypixel API.");
                            wait("%#wait_seconds%s");
                            &return_array[] = call("hypixelAPICall",%&api_url%,%&api_key%);
                            return(&return_array[]);
                        endif;
                    endif;
        
                    // Add the base URL to the request URL if it was not provided.
                    ifmatches(%&api_url%,"^https://api.hypixel.net");else;
                        &api_parts[] = "https://api.hypixel.net"
                        ifmatches(%&api_url%,"^/");else;
                            &api_parts[] = "/";
                        endif;
                        &api_parts[] = %&api_url%;
                        &api_url     = join("",&api_parts[]);
                    endif;
        
                    @#api_req_ts[] = %TIMESTAMP%;
                    &api_resp      = httpget(%&api_url%,,#api_code);
                    &success       = jsonget("success",%&api_resp%);
                    ifmatches(%&success%,"ERROR_"); // If we got an unexpected error, it normally means we got throttled by CloudFlare.
                        &req_uuid      = %UNIQUEID%;
                        &log_strings[] = "-----"
                        &log_strings[] = "Request Date: %DATETIME%";
                        &log_strings[] = "Request UUID: %&req_uuid%";
                        &log_strings[] = "Request URL : %&api_url%";
                        &log_strings[] = "Request Key : %&api_key%";
                        &log_strings[] = " ";
                        &log_strings[] = "Response Code: %#api_code%";
                        &log_strings[] = "Response Body: %&api_resp%";
                        &log_strings[] = " ";
                        &log_strings[] = " ";
                        &log_path[]    = split(%FILESEPARATOR%,%MACROSCONFIGDIR%);
                        &log_path[]    = "logs";
                        &log_path[]    = "bad_requests.txt";
                        &log_path      = join(%FILESEPARATOR%,&log_path[]);
                        writefile(%&log_path%,&log_strings[],true);
                        debug_error(%debug%,%&script_debug_name%,"Got a bad request from the API call, response logged to file:");
                        &vars[] = split(" ","&req_uuid &log_path #api_code");
                        foreach(&vars[],&var,#v);
                            &_var = regexreplace(&var,"&","&&");
                            &val  = "%%&var%%";
                            debug_log(%debug%,%&script_debug_name%,"%#v% > %&_var%: &d%&val%&7.");
                        next;
                    else;
                        req_success  = true;
                        api_success := %&success%;
                        #retry_index = indexof(#retry_codes[],,%#api_code%);
        
                        // If the request was unsuccessful and the Response Code is an error that we can fix, attempt to do so.
                        if((!%api_success%) && (%#retry_index% != -1) && (!%recursion%));
                            if(%#api_code% == 403); // invalid api key
                                &api_key = getHypixelAPIKey();
                            elseif((%#api_code% == 429) || (%#api_code% == 503)); // throttled = 429, 503 = data unavailable right now
                                wait("10000ms");
                            endif;
        
                            skip_return_arr = true;
                            &return_array[] = call("hypixelAPICall",%&api_url%,%&api_key%,true);
                        endif;
                    endif;
                elseif(%&use_uri% == "");
                    debug_error(%debug%,%&script_debug_name%,"Could not find API Endpoint from URL: &4%&api_url%&7.");
                endif;
            endif;
        
            // Populate the return array, unless it was already populated.
            if(!%skip_return_arr%);
                &return_array[] = %req_success%;
                &return_array[] = %api_success%;
                &return_array[] = %#api_code%;
                &return_array[] = %&api_resp%;
            endif;
            return(&return_array[]);
        endfunction;
    // api/index/getSkyBlockProfile
        // Fetches a given SkyBlock Profile from Hypixel's API.
            // Params:
            //        {string} <&profile_id>            The Profile ID to fetch
            //        {string} [&api_key=%@&api_key]    The API Key to make Requests with. If left blank, defaults to @&api_key
            //
            // Returns an array:
            //    0    {boolean} success    Whether or not we were able to get any data from the API (false if request fails)
            //    1    {string} &profile    The JSON Data of the Profile
        function getSkyBlockProfile(&profile_id,&api_key=%@&api_key%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:364
            &script_debug_name = "&9getSkyBlockProfile&7";
            debug              = true;
            test_profile_id    = isStringUUID(%&profile_id%);
            if(!%test_profile_id%);
                debug_error(%debug%,%&script_debug_name%,"Invalid formatted Profile ID passed: &4%&profile_id%&7.");
                return(false,"");
            endif;
        
            // Make the API request.
            if(true);
                &api_url     = "skyblock/profile?profile=%&profile_id%";
                &api_data[]  = hypixelAPICall(%&api_url%);
                req_success := %&api_data[0]%;
                api_success := %&api_data[1]%;
                #api_code   := %&api_data[2]%;
                &api_resp    = %&api_data[3]%;
        
                if(%api_success%);
                    &profile = jsonget("profile",%&api_resp%);
                    ifmatches(%&profile%,"^(?:ERROR_.*|null)$");
                        debug_error(%debug%,%&script_debug_name%,"Profile with ID &4%&profile_id%&7 does not exist.");
                        return(false,"");
                    endif;
                    debug_log(%debug%,%&script_debug_name%,"&aFound Profile, returning.");
                    return(true,%&profile%);
                else;
                    debug_error(%debug%,%&script_debug_name%,"API Call failed!");
                    return(false,"");
                endif;
            endif;
        endfunction;
    // api/index/getSkyBlockProfiles
        // Fetches a player's SkyBlock Profiles from Hypixel's API.
            // Params:
            //        {string} [&search_term=%UUID%]     The player username/UUID to search for. If left blank, defaults to player's UUID.
            //        {string} [&api_key=%@&api_key%]    The API Key to make Requests with. If left blank, defaults to @&api_key
            //
            // Returns an array:
            //    0         {boolean}    success       Whether or not we were able to get any data from the API (false if request fails)
            //    1, ...    {string}     &profile[]    The JSON Objects of the Profiles. Only provided if success == true and profiles !== null.
        function getSkyBlockProfiles(&search_term=%UUID%,&api_key=%@&api_key%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:261
            &script_debug_name = "&9getSkyBlockProfiles&7";
            debug              = false;
        
            &player_identity[] = getMinecraftProfile(%&search_term%);
            identity_found    := %&player_identity[0]%;
            &player_username   = %&player_identity[1]%;
            &player_joint_uuid = %&player_identity[2]%;
            &player_split_uuid = %&player_identity[3]%;
            if(%identity_found%);
                &api_url     = "skyblock/profiles?uuid=%&player_split_uuid%";
                &api_data[]  = hypixelAPICall(%&api_url%);
                req_success := %&api_data[0]%;
                api_success := %&api_data[1]%;
                #api_code   := %&api_data[2]%;
                &api_resp    = %&api_data[3]%;
                success      = %req_success%;
                
        
                if((!%req_success%) || (!%api_success%));
                    if(%req_success%);
                        &cause = jsonget("cause",%&api_resp%);
                    else;
                        &cause = "Cloudflare Request Throttle";
                    endif;
                    debug_error(%debug%,%&script_debug_name%,"An error occurred while fetching SkyBlock Profiles for &4%&player_username%&7: &4%&cause%&7.");
                else;
                    &player_profiles = jsonget("profiles",%&api_resp%);
                    #profile_index   = 0;
                    do;
                        &profile_data = jsonget(%#profile_index%,%&player_profiles%);
                        ifmatches(%&profile_data%,"ERROR_");
                            #found_profiles  = arraysize(&player_profiles[]);
                            debug_log(%debug%,%&script_debug_name%,"Found a total of &a%#found_profiles% profiles&7 for &a%&player_username%&7.");
                            no_more_profiles = true;
                            break;
                        else;
                            &profile_id        = jsonget("profile_id",%&profile_data%);
                            &profile_name      = jsonget("cute_name",%&profile_data%);
                            &profile_ids[]     = %&profile_id%;
                            &profile_names[]   = %&profile_name%;
                            &player_profiles[] = %&profile_data%;
                        endif;
                        #profile_index = %#profile_index% + 1;
                    until(%no_more_profiles%);
        
                    #player_cache_index = indexof(@&cached_profile_player_uuids[],,%&player_split_uuid%);
                    if(%#player_cache_index% == -1);
                        @&cached_profile_player_uuids[]         = %&player_split_uuid%;
                        @&cached_profile_player_profile_ids[]   = join("|",&profile_ids[]);
                        @&cached_profile_player_profile_names[] = join("|",&profile_names[]);
                        debug_log(%debug%,%&script_debug_name%,"&eInitialized&7 cached profile IDs and Names for &a%&player_username%&7.");
                    else;
                        &player_cached_profile_ids[]   = split("|",%@&cached_profile_player_profile_ids[%#player_cache_index%]%);
                        &player_cached_profile_names[] = split("|",%@&cached_profile_player_profile_names[%#player_cache_index%]%);
        
                        // Trim the cache if anything is not found.
                        foreach(&player_cached_profile_ids[],&cached_profile_id,#cpii);
                            #found_index = indexof(&profile_ids[],,%&cached_profile_id%);
                            if(%#found_index% == -1);
                                // This profile is no longer available for this member, trim it from the new array.
                                debug_log(%debug%,%&script_debug_name%,"Profile ID &e%&cached_profile_id%&7 (Name: &d%&player_cached_profile_names[%#cpii%]%&7) is no longer available, trimming");
                                &player_cached_profile_ids[]   = arrayDelete(&player_cached_profile_ids[],%#cpii%);
                                &player_cached_profile_names[] = arrayDelete(&player_cached_profile_names[],%#cpii%);
                            endif;
                        next;
        
                        // Append to the cache with any new finds.
                        foreach(&profile_ids[],&profile_id,#pii);
                            #cached_index = indexof(&player_cached_profile_ids[],,%&profile_id%);
                            if(%#cached_index% == -1);
                                debug_log(%debug%,%&script_debug_name%,"Found new Profile ID: &e%&profile_id%&7 (Name: &d%&profile_names[%#pii%]%&7).");
                                put(&player_cached_profile_ids[],%&profile_id%);
                                put(&player_cached_profile_names[],%&profile_names[%#pii%]%);
                            endif;
                        next;
        
                        // Update the cache
                        if(true);
                            @&cached_profile_player_profile_ids[%#player_cache_index%]   = join("|",&player_cached_profile_ids[]);
                            @&cached_profile_player_profile_names[%#player_cache_index%] = join("|",&player_cached_profile_names[]);
                        endif;
        
                        debug_log(%debug%,%&script_debug_name%,"&dUpdated&7 cached profile IDs and Names for &a%&player_username%&7.");
                    endif;
                endif;
            else;
                debug_error(%debug%,%&script_debug_name%,"Could not resolve search_term &4%&search_term%&7 into a valid UUID!");
            endif;
        
            &return_array[] = %success%;
            push(&return_array[],&player_profiles[*]);
            return(&return_array[]);
        endfunction;
    // api/index/getActiveProfile
        // Fetches the specified player's currently active SkyBlock Profile from Hypixel's API.
            // Params:
                // {string} [&search_term=%UUID%]     The username or UUID of the player to look up. Defaults to the bot's UUID.
                // {string} [&api_key=%@&api_key%]    The API Key to make Requests with. If left blank, defaults to @&api_key
                // {boolean} [player_only=false]      If true, will return the bot's data from the Profile only. Defaults to false.
            // Returns a String Array:
                //    0 {boolean} success     Whether or not we were able to get any data from the API (false if request fails)
                //    1 {string}  &profile    The JSON Data of the Profile
            // Example:
                //    &active_profile[] = getActiveProfile();
                //    profile_found    := %&active_profile[0]%;
                //    if(%profile_found%);
                //        &profile_data = %&active_profile[1]%;
                //    endif;
        function getActiveProfile(&search_term=%UUID%,&api_key=%@&api_key%,player_only=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:411
            &script_debug_name = "&9getActiveProfile&7";
            debug              = true;
        
            // Get the Minecraft Profile associated with the Search Term.
            if(true);
                &player_identity[] = getMinecraftProfile(%&search_term%);
                identity_found    := %&player_identity[0]%;
                &player_username   = %&player_identity[1]%;
                &player_joint_uuid = %&player_identity[2]%;
                &player_split_uuid = %&player_identity[3]%;
        
                if(!%identity_found%);
                    debug_error(%debug%,%&script_debug_name%,"Could not find Identity for Search Term: &4%&search_term%&7.");
                    return(false,"");
                endif;
            endif;
        
            // If the Minecraft Profile we are executing this query on is the active bot account,
            // try and get the Profile ID from reading Scoreboard and checking the Cache.
            if(%&player_split_uuid% == %UUID%);
                #player_cache_index = indexof(@&cached_profile_player_uuids[],,%&player_split_uuid%);
                if(%#player_cache_index% != -1);
                    &active_profile = getSkyBlockPlayerListInfo("PROFILE");
                    if(%&active_profile% != "-1");
                        &cached_ids[]   = split("|",%@&cached_profile_player_profile_ids[%#player_cache_index%]%);
                        &cached_names[] = split("|",%@&cached_profile_player_profile_names[%#player_cache_index%]%);
                        #profile_index  = indexof(&cached_names[],,%&active_profile%);
                        debug_log(%debug%,%&script_debug_name%,"profile name &d%&active_profile%&7 found at index &e%#profile_index%&7 in cached_names array.");
                        if(%#profile_index% != -1);
                            skip_all_profiles_req = true;
                            &active_profile_id    = %&cached_ids[%#profile_index%]%;
                            &active_profile_name  = %&cached_names[%#profile_index%]%;
                            debug_log(%debug%,%&script_debug_name%,"&aHit cache! ID is: &e%&active_profile_id%");
                        endif;
                    endif;
                endif;
            endif;
        
            // Get the active Profile ID & Data from API, if we do not already have it.
            if(true);
                if(!%skip_all_profiles_req%);
                    debug_log(%debug%,%&script_debug_name%,"Calling getSkyBlockProfiles, did not hit cache.");
        
                    // Get the profiles for the Minecraft Profile we are querying.
                    &profile_data[]  = getSkyBlockProfiles(%&player_split_uuid%);
                    #player_profiles = arraysize(&profile_data[]);
                    profile_success := %&profile_data[0]%;
        
                    // Iterate over all Profiles and find the one with the most recent save.
                    if((%profile_success%) && (%#player_profiles% > 1));
                        #final_profile_index = %#player_profiles% - 1;
                        #start_profile_index = 1;
        
                        for(#i,%#start_profile_index%,%#final_profile_index%);
                            &profile_data = %&profile_data[%#i%]%;
                            &profile_id   = jsonget("profile_id",%&profile_data%);
                            &profile_name = jsonget("cute_name",%&profile_data%);
                            &profile_mbrs = jsonget("members",%&profile_data%);
                            &player_data  = jsonget(%&player_joint_uuid%,%&profile_mbrs%);
                            ifmatches(%&player_data%,"ERROR_");
                                debug_error(%debug%,%&script_debug_name%,"Could not find Profile Member data for User: &4%&player_username%&7 in Profile ID &e%&profile_id%&7 (name: &d%&profile_name%&7).");
                            else;
                                &init_save = %&best_save%;
        
                                if(%&best_save% == "");
                                    &best_save           = jsonget("last_save",%&player_data%);
                                    &active_profile_data = %&profile_data%;
                                else;
                                    &last_save = jsonget("last_save",%&player_data%);
                                    eval(&ms_diff,"%&best_save% - %&last_save%"); // if last_save > best_save, result ms_diff will start with -1.
                                    ifmatches(%&ms_diff%,"^-");
                                        &best_save           = %&last_save%;
                                        &active_profile_data = %&profile_data%;
                                    endif;
                                endif;
                            endif;
                        next;
                    endif;
                else;
                    // Only need to make one request for the correct Profile.
                    &profile_data[]      = getSkyBlockProfile(%&active_profile_id%);
                    profile_success     := %&profile_data[0]%;
                    &active_profile_data = %&profile_data[1]%;
                endif;
        
                if((%profile_success%) && (%player_only%));
                    &active_profile_data = jsonget("members.%&player_joint_uuid%",%&active_profile_data%);
                    ifmatches(%&active_profile_data%,"ERROR_");
                        debug_error(%debug%,%&script_debug_name%,"Could not find Player UUID %&player_joint_uuid% in Active Profile, wtf?");
                        &active_profile_data = "";
                    endif;
                endif;
            endif;
            return(%profile_success%,%&active_profile_data%);
        endfunction;
    // api/index/getActiveProfileID
        // Fetches the specified player's currently active SkyBlock Profile ID from Hypixel's API.
            // Params:
            //        {string} [&search_term=%UUID%]     The username or UUID of the player to look up. Defaults to the bot's UUID.
            //        {string} [&api_key=%@&api_key%]    The API Key to make Requests with. If left blank, defaults to @&api_key
            //
            // Returns an Array:
            //    0 {boolean} success        Whether or not we were able to get any data from the API (false if request fails)
            //    1 {string}  &profile_id    The Active Profile's ID.
        function getActiveProfileID(&search_term=%UUID%,&api_key=%@&api_key%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/index.txt:516
            &script_debug_name = "&9getActiveProfileID&7";
            debug              = true;
            
            // Get the Minecraft Profile associated with the Search Term.
            if(true);
                &player_identity[] = getMinecraftProfile(%&search_term%);
                identity_found    := %&player_identity[0]%;
                &player_username   = %&player_identity[1]%;
                &player_joint_uuid = %&player_identity[2]%;
                &player_split_uuid = %&player_identity[3]%;
                if(!%identity_found%);
                    debug_error(%debug%,%&script_debug_name%,"Could not find Identity for Search Term: &4%&search_term%&7.");
                    return(false,"");
                endif;
            endif;
        
            // If the Player we are looking up is the Bot, see if we can hit the Profile Cache to get the ID early.
            if(%&player_split_uuid% == %UUID%);
                #player_cache_index = indexof(@&cached_profile_player_uuids[],,%&player_split_uuid%);
                if(%#player_cache_index% != -1);
                    &active_profile = getSkyBlockPlayerListInfo("AREA");
                    if(%&active_profile% != "-1");
                        &cached_ids[]   = split("|",%@&cached_profile_player_profile_ids[%#player_cache_index%]%);
                        &cached_names[] = split("|",%@&cached_profile_player_profile_names[%#player_cache_index%]%);
                        #profile_index  = indexof(&cached_names[],,%&active_profile%);
                        if(%#profile_index% != -1);
                            active_profile_success = true;
                            &active_profile_id     = %&cached_ids[%#profile_index%]%;
                            &active_profile_name   = %&cached_names[%#profile_index%]%;
                        endif;
                    endif;
                    #
                endif;
            endif;
        
            // Call getActiveProfile if we did not hit the Cache.
            if(!%active_profile_success%);
                &active_profile_data[]  = getActiveProfile(%&search_term%,%&api_key%);
                active_profile_success := %&active_profile_data[0]%;
                if(%profile_success%);
                    &active_profile_id = jsonget("profile_id",%&profile_data[1]%);
                endif;
            endif;
        
            return(%active_profile_success%,%&active_profile_id%);
        endfunction;
    // info/index/getProfileType
        // Determines whether the current SkyBlock Profile is a Solo or a Coop type Profile.
            // Params: None
            // Returns: {string} ENUM: COOP, SOLO, ERROR
        function getProfileType();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:667
            // Check if we can answer our question by checking the Scoreboard.
            if(true);
                &bank_balances = getSkyBlockPlayerListInfo("BANK");
                if(%&bank_balances% != "-1");
                    &split_array[] = split("/",%&bank_balances%);
                    #split_array   = arraysize(&split_array[]);
                    if(%#split_array% == 1);
                        return("SOLO");
                    elseif(%#split_array% == 2);
                        return("COOP");
                    endif;
                endif;
            endif;
            
            // If we could not answer our question by checking the Scoreboard, try API.
            if(true);
                &active_profile_req[]   = getActiveProfile();
                active_profile_success := %&active_profile_req[0]%;
                if(%active_profile_success%);
                    &profile_members         = jsonget("members",%&active_profile_req[1]%);
                    &profile_members_uuids[] = getjsonkeys(%&profile_members%);
                    #profile_members_uuids   = arraysize(&profile_members_uuids[]);
                    if(%#profile_members_uuids% == 1);
                        return("SOLO");
                    elseif(%#profile_members_uuids% > 1);
                        return("COOP");
                    endif;
                endif;
            endif;
            
            // If we are still bass-ackwards and out of luck, what the fuck else can we do? Try Slothpixel!
            if(true);
                // Try to get the Active Profile ID first.
                if(true);
                    &active_profile_id[]    = getActiveProfileID();
                    active_profile_success := %&active_profile_id[0]%;
                endif;
                
                &player_joint_uuid     = %UUID%;
                &player_joint_uuid     = regexreplace(&player_joint_uuid,"-","");
                &slothpixel_profiles[] = slothpixelGetSkyBlockProfiles();
                slothpixel_success    := %&slothpixel_profiles[0]%;
                if(%slothpixel_success%);
                    #slothpixel_profiles = arraylength(&slothpixel_profiles[]);
                    for(#i,1,%#slothpixel_profiles%);
                        &slothpixel_profile = %&slothpixel_profiles[%#i%]%;
                        &profile_id         = jsonget("id",%&slothpixel_profile%);
                        if((%active_profile_success%) && (%&profile_id% == %&active_profile_id[1]%));
                            &active_profile = %&slothpixel_profile%;
                            break;
                        elseif(!%active_profile_success%);
                            &profile_last_save = jsonget("members.%&player_joint_uuid%.last_save",%&slothpixel_profile%);
                            if(%&best_save% == "");
                                &best_save      = %&profile_last_save%;
                                &active_profile = %&slothpixel_profile%;
                            else;
                                &save_diff = eval("%&profile_last_save% - %&best_save%"); // if profile_last_save bigger (more recent), number will not be negative
                                ifnotmatches(%&save_diff%,"-");
                                    &best_save      = %&profile_last_save%;
                                    &active_profile = %&slothpixel_profile%;
                                endif;
                            endif;
                        endif;
                    next;
                    
                    if(%&active_profile% != "");
                        &profile_members   = jsonget("members",%&active_profile%);
                        &profile_members[] = getjsonkeys(%&profile_members%);
                        #profile_members   = arraysize(&profile_members[]);
                        if(%#profile_members% == 1);
                            return("SOLO");
                        elseif(%#profile_members% >= 2);
                            return("COOP");
                        endif;
                    endif;
                endif;
            endif;
            
            return("ERROR");
        endfunction;
    // banking/index/bankingInfoInternalGetProfileType
        // Checks what the Profile's Type is based on what GUI we are in and what Items are present.
            // Params:
                // {string} [&bank_enum=""]       Optional String ENUM returned from the `bankingInfoInternalGetGuiType()` Function.
                //                                If not provided (or invalid), will call `bankingInfoInternalGetGuiType()`.
                // {number}  [#timeout_sec=30]    The maximum amount of Seconds that this Function can run for. If set to <= 0,
                //                                Function will run on a loop until it is successful, without ever timing out.
            // Returns a String ENUM of COOP, SOLO, or NONE.
            // Example:
                //    &profile_type = bankingInfoInternalGetProfileType(%&bank_enum%);
                //    if(%&profile_type% == "NONE");
                //    elseif(%&profile_type% == "COOP");
                //    elseif(%&profile_type% == "SOLO");
                //    endif;
        function bankingInfoInternalGetProfileType(&bank_enum="",#timeout_sec=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:245
            // Setup Function Variables
            if(true);
                debug                = true;
                &script_debug_name   = "&6bankingInfoGetProfileType";
                &return_string       = "NONE";
                do_timeout           = %#timeout_sec% > 0;
                #start_time          = %TIMESTAMP%;
        
                // Wrap ENUM Arrays
                if(true);
                    // All valid ENUMs
                    &valid_gui_enums[] = split(", ","UPGRADES, CHOICE, COOP, SOLO, COOP_DEPOSIT, SOLO_DEPOSIT, SIGN_DEPOSIT, COOP_WITHDRAW, SOLO_WITHDRAW, SIGN_WITHDRAW, NONE");
        
                    // ENUMs where we can skip all Bank-related Profile Checks and return 'COOP'.
                    &coop_gui_enums[] = split(", ","CHOICE, COOP, COOP_DEPOSIT, COOP_WITHDRAW");
        
                    // ENUMs to skip all Bank-related Profile Checks and go to `getProfileType()`
                    &invalid_gui_enums[] = split(", ","SIGN_DEPOSIT, SIGN_WITHDRAW, NONE, SOLO_DEPOSIT, SOLO_WITHDRAW");
        
                    // ENUMs to check for 'Go Back' Arrow NBT presence and/or Destination
                    &check_gui_enums[] = split(", ","UPGRADES, SOLO");
                endif;
        
                #gui_enum_index = indexof(&valid_gui_enums[],,%&bank_enum%);
                &return_string  = "NONE";
                if(%#gui_enum_index% == -1);
                    &bank_enum = bankingInfoInternalGetGuiType();
                endif;
        
                #invalid_gui_index = indexof(&invalid_gui_enums[],,%&bank_enum%);
                #check_gui_index   = indexof(&check_gui_enums[],,%&bank_enum%);
                #coop_gui_index    = indexof(&coop_gui_enums[],,%&bank_enum%);
            endif;
        
            // Do Bank-Specific Profile Checks (to avoid having to possibly hit API, if we can).
            if(%#invalid_gui_index% == -1);
                if(%#coop_gui_index% != -1);
                    &return_string = "COOP";
                elseif(%#check_gui_index% != -1);
                    // Get the 'Go Back' Arrow Slot and check it's NBT. If we do not find the Go Back Arrow,
                    // or it's NBT states 'Personal Bank Account', we are in a Solo Profile. If we do find it,
                    // and it's NBT states 'Bank', we are in a Coop Profile.
                    &return_string = "SOLO";
                    #go_back_slot  = findItemContainer(false,"MCID: arrow","NAME: Go Back");
                    if(%#go_back_slot% != -1);
                        &go_back_item = getslotitemnbt(%#go_back_slot%,,#go_back_stack,#go_back_data,&go_back_nbt);
                        &go_back_nbt  = strip(%&go_back_nbt%);
                        ifmatches(%&go_back_nbt%,"To Bank");
                            &return_string = "COOP";
                        endif;
                    endif;
                endif;
            endif;
        
            // If we failed to match any of the conditions above, fall back on a `getProfileType()` call.
            if(%&return_string% == "NONE");
                do;
                    // 1. Check for Function Timeout
                    if(%do_timeout%);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"Timed out!");
                            break;
                        endif;
                    endif;
        
                    // 2. Try to grab the Profile Type from API/Tab List
                    if(true);
                        &profile_type = getProfileType();
                        if((%&profile_type% == "COOP") || (%&profile_type% == "SOLO"));
                            &return_string = %&profile_type%;
                            break;
                        endif;
                    endif;
                until(%&return_string% != "NONE");
            endif;
        
            debug_log(%debug%,%&script_debug_name%,"Returning Profile Type '&d%&return_string%&7'.");
            return(%&return_string%);
        endfunction;
    // banking/index/bankingGUI
        // Opens the Banking GUI up to the specified GUI ENUM/Type.
            // Params:
                // {string}  [&target_enum=""]       String ENUM of GUI Type to open up to. Valid strings are dependent on what type of
                //                                   Profile is in use. If omitted, will default to 'CHOICE' for COOP Profiles, or 'SOLO' for Solos.
                //                                   SOLO Profiles can use:
                //                                       UPGRADES, SOLO, SOLO_WITHDRAW, SOLO_WITHDRAW_SIGN, SOLO_DEPOSIT, SOLO_DEPOSIT_SIGN
                //                                   COOP Profiles can use all of the SOLO Profile ENUMs, as well as:
                //                                       CHOICE, COOP, COOP_WITHDRAW, COOP_WITHDRAW_SIGN, COOP_DEPOSIT, COOP_DEPOSIT_SIGN
                //                                   If omitted, will default to 'CHOICE' if in a COOP Profile, or 'SOLO' in a SOLO Profile.
                // {string}  [&profile_type=""]      The Profile Type of the Profile, if known. String ENUM of COOP, SOLO. Will fetch
                //                                   via `bankingInfoInternalGetProfileType()` if omitted.
                // {number}  [#timeout_sec=30]       The maximum amount of Seconds that this Function can run for. If set to <= 0,
                //                                   Function will run on a loop until it is successful, without ever timing out.
                // {number}  [#tick_wait=20]         The amount of Ticks to wait between looping repeated actions.
                // {boolean} [personal_bank=true]    Whether or not to try to use the Personal Bank Item.
            // Returns a Boolean indicating whether or not we were able to open the Bank GUI up.
            // Examples:
                //    in_coop_deposit_gui = bankingGUI("COOP_DEPOSIT");
                //    in_solo_deposit_gui = bankingGUI("SOLO_DEPOSIT");
        function bankingGUI(&target_enum="",&profile_type="",#timeout_sec=30,#tick_wait=20,personal_bank=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:979
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6bankingGUI&7";
                #start_time        = %TIMESTAMP%;
                do_timeout         = %#timeout_sec% > 0;
                &profile_type      = miscValidate(%&profile_type%,-1,"COOP","SOLO");
                return_boolean     = false;
        
                if(%&profile_type% == "");
                    &profile_type  = bankingInfoInternalGetProfileType(%&bank_enum%,%#timeout_sec%);
                    if(%&profile_type% == "NONE");
                        debug_error(%debug%,%&script_debug_name%,"Could not derive Profile Type (&&bank_enum: '&4%&bank_enum%&c', &&profile_type: '&4%&profile_type%&c'). Returning &4FALSE&c.");
                        return(%return_boolean%);
                    endif;
                endif;
                
                // Wrap GUI ENUMs and Items
                if(true);
                    if(%&profile_type% == "COOP");
                        &gui_enums[]    = "CHOICE";
                        &gui_mcids[]    = "";
                        &gui_names[]    = "";
                        &gui_parents[]  = "";
                        &gui_children[] = "COOP|SOLO|UPGRADES";
                        &gui_slots[]    = "";
                        
                        &gui_enums[]    = "UPGRADES";
                        &gui_mcids[]    = "gold_block";
                        &gui_names[]    = "Bank Upgrades";
                        &gui_parents[]  = "CHOICE";
                        &gui_children[] = "";
                        &gui_slots[]    = "35";
        
                        &gui_enums[]    = "COOP";
                        &gui_mcids[]    = "ender_chest";
                        &gui_names[]    = "Co-op Bank account";
                        &gui_parents[]  = "CHOICE";
                        &gui_children[] = "COOP_WITHDRAW|COOP_DEPOSIT";
                        &gui_slots[]    = "11";
        
                        &gui_enums[]    = "COOP_WITHDRAW";
                        &gui_mcids[]    = "dropper";
                        &gui_names[]    = "Withdraw Coins";
                        &gui_parents[]  = "COOP";
                        &gui_children[] = "COOP_WITHDRAW_SIGN";
                        &gui_slots[]    = "13";
        
                        &gui_enums[]    = "COOP_WITHDRAW_SIGN";
                        &gui_mcids[]    = "sign";
                        &gui_names[]    = "Specific amount";
                        &gui_parents[]  = "COOP_WITHDRAW";
                        &gui_children[] = "";
                        &gui_slots[]    = "16";
        
                        &gui_enums[]    = "COOP_DEPOSIT";
                        &gui_mcids[]    = "chest";
                        &gui_names[]    = "Deposit Coins";
                        &gui_parents[]  = "COOP";
                        &gui_children[] = "COOP_DEPOSIT_SIGN";
                        &gui_slots[]    = "11";
        
                        &gui_enums[]    = "COOP_DEPOSIT_SIGN";
                        &gui_mcids[]    = "sign";
                        &gui_names[]    = "Specific amount";
                        &gui_parents[]  = "COOP_DEPOSIT";
                        &gui_children[] = "";
                        &gui_slots[]    = "15";
        
                        &gui_enums[]    = "SOLO";
                        &gui_mcids[]    = "chest";
                        &gui_names[]    = "Personal Bank Account";
                        &gui_parents[]  = "CHOICE";
                        &gui_children[] = "SOLO_WITHDRAW|SOLO_DEPOSIT";
                        &gui_slots[]    = "15";
        
                        &gui_enums[]    = "SOLO_WITHDRAW";
                        &gui_mcids[]    = "dropper";
                        &gui_names[]    = "Withdraw Coins";
                        &gui_parents[]  = "SOLO";
                        &gui_children[] = "SOLO_WITHDRAW_SIGN";
                        &gui_slots[]    = "13";
        
                        &gui_enums[]    = "SOLO_WITHDRAW_SIGN";
                        &gui_mcids[]    = "sign";
                        &gui_names[]    = "Specific amount";
                        &gui_parents[]  = "SOLO_WITHDRAW";
                        &gui_children[] = "";
                        &gui_slots[]    = "16";
        
                        &gui_enums[]    = "SOLO_DEPOSIT";
                        &gui_mcids[]    = "chest";
                        &gui_names[]    = "Deposit Coins";
                        &gui_parents[]  = "SOLO";
                        &gui_children[] = "SOLO_DEPOSIT_SIGN";
                        &gui_slots[]    = "11";
        
                        &gui_enums[]    = "SOLO_DEPOSIT_SIGN";
                        &gui_mcids[]    = "sign";
                        &gui_names[]    = "Specific amount";
                        &gui_parents[]  = "SOLO_DEPOSIT";
                        &gui_children[] = "";
                        &gui_slots[]    = "15";
                    elseif(%&profile_type% == "SOLO");
                        &gui_enums[]    = "SOLO";
                        &gui_mcids[]    = "";
                        &gui_names[]    = "";
                        &gui_parents[]  = "";
                        &gui_children[] = "SOLO_WITHDRAW|SOLO_DEPOSIT";
                        &gui_slots[]    = "";
                        
                        &gui_enums[]    = "UPGRADES";
                        &gui_mcids[]    = "gold_block";
                        &gui_names[]    = "Bank Upgrades";
                        &gui_parents[]  = "SOLO";
                        &gui_children[] = "";
                        &gui_slots[]    = "35";
        
                        &gui_enums[]    = "SOLO_WITHDRAW";
                        &gui_mcids[]    = "dropper";
                        &gui_names[]    = "Withdraw Coins";
                        &gui_parents[]  = "SOLO";
                        &gui_children[] = "SOLO_WITHDRAW_SIGN";
                        &gui_slots[]    = "13";
        
                        &gui_enums[]    = "SOLO_WITHDRAW_SIGN";
                        &gui_mcids[]    = "sign";
                        &gui_names[]    = "Specific amount";
                        &gui_parents[]  = "SOLO_WITHDRAW";
                        &gui_children[] = "";
                        &gui_slots[]    = "16";
        
                        &gui_enums[]    = "SOLO_DEPOSIT";
                        &gui_mcids[]    = "chest";
                        &gui_names[]    = "Deposit Coins";
                        &gui_parents[]  = "SOLO";
                        &gui_children[] = "SOLO_DEPOSIT_SIGN";
                        &gui_slots[]    = "11";
        
                        &gui_enums[]    = "SOLO_DEPOSIT_SIGN";
                        &gui_mcids[]    = "sign";
                        &gui_names[]    = "Specific amount";
                        &gui_parents[]  = "SOLO_DEPOSIT";
                        &gui_children[] = "";
                        &gui_slots[]    = "15";
                    endif;
                endif;
                
                // Correct the Target ENUM and/or Validate It
                if(true);
                    &real_enum = miscValidate(%&target_enum%,-1,...&gui_enums[]);
                    if(%&real_enum% == "");
                        if(%&profile_type% == "COOP");
                            &real_enum = "CHOICE";
                        elseif(%&profile_type% == "SOLO");
                            &real_enum = "SOLO";
                        endif;
                        debug_log(%debug%,%&script_debug_name%,"Defaulting &&target_enum to '&d%&real_enum%&7' because &&target_enum (&d'%&target_enum%&7') was Invalid (at least, for profile type '&d%&profile_type%&7').");
                    endif;
                    #target_index = indexof(&gui_enums[],,%&real_enum%);
                endif;
                
                &parent_enums[]           = bankingActionInternalChangeGUIGetPath(%&real_enum%,&gui_enums[],&gui_parents[],&gui_children[]);
                &go_back_params[]         = split(", ","MCID: arrow, NAME: Go Back");
                &convert_sign_enums[]     = split(", ","SOLO_WITHDRAW_SIGN, SOLO_DEPOSIT_SIGN, COOP_WITHDRAW_SIGN, COOP_DEPOSIT_SIGN")
                #convert_sign_enums_index = indexof(&convert_sign_enums[],,%&real_enum%);
                convert_sign_enums        = %#convert_sign_enums_index% != -1;
                if(%convert_sign_enums%);
                    &convert_sign_origins[]             = split(", ","SIGN_DEPOSIT, SIGN_WITHDRAW");
                    &convert_sign_origin_predecessors[] = split(", ","COOP_DEPOSIT, COOP_WITHDRAW, SOLO_DEPOSIT, SOLO_WITHDRAW");
                    &convert_sign_origin_conversions[]  = split(", ","COOP_DEPOSIT_SIGN, COOP_WITHDRAW_SIGN, SOLO_DEPOSIT_SIGN, SOLO_WITHDRAW_SIGN");
                endif;
            endif;
            
            debug_log(%debug%,%&script_debug_name%,"Beginning attempt to get to &&real_enum='&e%&real_enum%&7'.");
            do;
                //    1.    Check for Function Timeout
                if(%do_timeout%);
                    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                    if(%func_timeout%);
                        debug_error(%debug%,%&script_debug_name%,"Timed Out!");
                        break;
                    endif;
                endif;
        
                //    2.    Figure out what Action to Execute based on what GUI we are in.
                if(true);
                    &bank_enum  = bankingInfoInternalGetGuiType();
                    #bank_index = indexof(&gui_enums[],,%&bank_enum%);
                    
                    // Convert 'SIGN_DEPOSIT' and/or 'SIGN_WITHDRAW' to '<SOLO|COOP>_DEPOSIT_SIGN' and '<SOLO|COOP>_WITHDRAW_SIGN'
                    if((%GUI% == "GUIEDITSIGN") && (%convert_sign_enums%));
                        #convert_sign_origins_index = indexof(&convert_sign_origins[],,%&bank_enum%);
                        if(%#convert_sign_origins_index% != -1);
                            #previous_index = indexof(&convert_sign_origin_predecessors[],,%&last_bank_enum%);
                            if(%#previous_index% != -1);
                                &bank_enum  = %&convert_sign_origin_conversions[%#previous_index%]%;
                                #bank_index = indexof(&gui_enums[],,%&bank_enum%);
                            endif;
                        endif;
                    endif;
                    
                    debug_log(%debug%,%&script_debug_name%,"Target/real enum &&real_enum='&e%&real_enum%&7', &&bank_enum='&e%&bank_enum%&7', #bank_index=&e%#bank_index%&7.");
        
                    if(%&bank_enum% == %&real_enum%);
                        debug_log(%debug%,%&script_debug_name%,"Successfully entered Bank ENUM: '&d%&bank_enum%&7'.");
                        return_boolean = true;
                        break;
                    elseif((%GUI% != "GUICHEST") || (%&bank_enum% == "NONE"));
                        debug_log(%debug%,%&script_debug_name%,"In an invalid GUI (GUI='&e%GUI%&7', &&bank_enum='&e%&bank_enum%&7'), exiting...");
                        localGUI("NONE");
                        
                        #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                        in_bank            = bankingActionInternalOpenBank(%#recursive_timeout%,%#tick_wait%,%personal_bank%);
                        if(!%in_bank%);
                            debug_error(%debug%,%&script_debug_name%,"Failed to open the Banking GUI, breaking.");
                            break;
                        endif;
                    elseif(%#bank_index% != -1);
                        unset(&action_array[]);
                        &action_type = "CLOSE";
                        if(%#bank_index% > %#target_index%);
                            // We are too deep, we need to go back up a level.
                            &action_type = "CLICK";
                            push(&action_array[],&go_back_params[*]);
                        else;
                            // If the GUI we are currently in is a Parent or Grandparent of the Target GUI, find the Child ENUM
                            // of this GUI that gets us closer to the Target. If it is not a Parent or Grandparent, then exit the GUI
                            // instead of finding an Item to click.
                            #parent_index = indexof(&parent_enums[],,%&bank_enum%);
                            if(%#parent_index% != -1);
                                &child_enum      = "";
                                &curr_children[] = split("|",%&gui_children[%#bank_index%]%);
                                foreach(&curr_children[],&curr_child,#cc);
                                    if(%&curr_child% == %&real_enum%);
                                        &child_enum = %&curr_child%;
                                        break;
                                    else;
                                        #parent_index = indexof(&parent_enums[],,%&curr_child%);
                                        if(%#parent_index% != -1);
                                            &child_enum = %&curr_child%;
                                            break;
                                        endif;
                                    endif;
                                next;
                                
                                #gui_enums_index = indexof(&gui_enums[],,%&child_enum%);
                                if(%#gui_enums_index% != -1);
                                    &action_array[] = split(", ","MCID: %&gui_mcids[%#gui_enums_index%]%, NAME: %&gui_names[%#gui_enums_index%]%, SLOT: %&gui_slots[%#gui_enums_index%]%");
                                    &action_type    = "CLICK";
                                endif;
                            endif;
                        endif;
                        
                        debug_log(%debug%,%&script_debug_name%,"&&action_type: '&d%&action_type%&7', &&action_data: '&e%&action_data%&7'.");
                        if(%&action_type% == "CLOSE");
                            debug_log(%debug%,%&script_debug_name%,"Closing GUI (GUI: '&d%GUI%&7', CONTAINERNAME: '&d%CONTAINERNAME%&7', CONTAINERSLOTS: '&d%CONTAINERSLOTS%&7', ENUM: '&d%&bank_enum%&7').");
                            localGUI("NONE");
                        elseif(%&action_type% == "CLICK");
                            #action_slot   = findItemContainer(false,...&action_array[]);
                            &action_params = join("&7', '&d",&action_array[]);
                            debug_log(%debug%,%&script_debug_name%,"Search for Item with Parameters: ['&d%&action_params%&7'] returned Slot '&e%#action_slot%&7'.");
                            if(%#action_slot% != -1);
                                debug_log(%debug%,%&script_debug_name%,"Found Next Item at Slot &d%#action_slot%&7.");
                                #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                                updated_gui        = containerClick(%#action_slot%,%#recursive_timeout%,%#tick_wait%,true,false,false);
                                if(%updated_gui%);
                                    debug_log(%debug%,%&script_debug_name%,"Updated GUI!");
                                endif;
                            else;
                                &action_params = join("&c', '&4",&action_array[]);
                                debug_error(%debug%,%&script_debug_name%,"Failed to find Item with Parameters: ['&4%&action_params%&c']!");
                            endif;
                        else;
                            debug_error(%debug%,%&script_debug_name%,"Action Type (&&action_type: '&4%&action_type%&c') is Unknown?");
                        endif;
                    else;
                        debug_error(%debug%,%&script_debug_name%,"GUI ENUM Index for '&d%&bank_enum%&7' is -1! Cannot recover :^(");
                        break;
                    endif;
                    
                    &last_bank_enum = %&bank_enum%;
                endif;
                
                wait("1t");
            until(%return_boolean%);
            
            debug_log(%debug%,%&script_debug_name%,"GUI change outcome (return_boolean='&e%return_boolean%&7') from &&real_enum='&e%&real_enum%&7', &&profile_type='&e%&profile_type%&7'.");
            return(%return_boolean%);
        endfunction;
    // string/index/xFormatNumber
        // Identical to original `formatnumber`, but passes the input_string through `convertENote` before passing it into `formatnumber`.
            // Params:
                // {string} <&input_string>          The Number or String to Format into a Number. If this Number includes Commas, they will be stripped
                //                                   from the string passed to `formatnumber`.
                // {string} [&decimal_precision]     The desired level of precision following the decimal. If omitted or an empty string, will
                //                                   include the amount of decimals included in the <&input_string>. If provided, should be an integer >= 0.
                //                                   If set to 0, will not include a decimal character or trail at all. Providing a value that is incoherent
                //                                   to the level of decimal precision present in the <&input_string> will result in the output being rounded
                //                                   to the desired level of precision.
                // {boolean} [strip_commas=false]    Whether or not to strip commas when formatting the Number. If set to True, and [&decimal_precision]
                //                                   is set to "0", this Function will return a valid Integer.
            // Returns the result of the `formatnumber` expression.
            // Examples:
                // Converting a formatted string Number to a valid Integer:
                    //    &input_string      = "1009.0131";
                    //    &decimal_precision = "0";
                    //    strip_commas       = true;
                    //    #output_integer    = xFormatNumber(%&input_string%,%&decimal_precision%,%strip_commas%);
                // Converting a valid Integer to a formatted (comma split) string:
                    //    &input_string      = "10000";
                    //    &decimal_precision = "";
                    //    strip_commas       = false;
                    //    &output_string     = xFormatNumber(%&input_string%,%&decimal_precision%,%strip_commas%);
        function xFormatNumber(&input_string,&decimal_precision,strip_commas=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:315
            &return_string = replace(&input_string,",");
            &return_string = convertENote(%&return_string%);
            &return_string = formatnumber(%&return_string%,%&decimal_precision%,%strip_commas%);
            return(%&return_string%);
        endfunction;
    // string/index/convertToMetric
        // Takes an input of a Number String and formats it into a Metric String (K, M, B, or T as suffix).
            // Params:
                // {string} <&convert_string>         The Number String to convert.
                // {number} [#decimal_precision=1]    Amount of sig. figs to round the conversion off to. If set to <= -1, will just
                //                                    format the number as-is (it will keep as many decimal places as it had in the first place).
            // Returns a String.
            // Example:
                //    &metric_string = convertToMetric("151091.501",1);
                //    log(%&metric_string%); // 151.1 K
        function convertToMetric(&convert_string,#decimal_precision=1);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:566
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&9convertToMetric&7";
                debug_log(%debug%,%&script_debug_name%,"called, args are &&convert_string='&e%&convert_string%&7', #decimal_precision=&e%#decimal_precision%");
            endif;
            &metric_chars[] = split(", ","K, M, B, T");
            &metric_ratio[] = split(", ","1000, 1000000, 1000000000, 1000000000000");
            &return_string  = %&convert_string%;
            ifmatches(%&convert_string%,"^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)",&integer_portion,2);
                log("&7matched expression '&d^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)&7' against string ")
                #component_a_len = strlen(%&integer_portion%);
                debug_log(%debug%,%&script_debug_name%,"matched expression '&d^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)&7' against &&convert_string='&e%&convert_string%&7', extracted &&integer_portion='&e%&integer_portion%&7' with length=&e%#component_a_len%&7.");
                #metric_index    = -1;
                foreach(&metric_ratio[],&metric_ratio,#mr);
                    #metric_ratio_len = strlen(%&metric_ratio%);
                    if(%#component_a_len% >= %#metric_ratio_len%);
                        debug_log(%debug%,%&script_debug_name%,"metric_ratio_len=&e%#metric_ratio_len%&7 >= #component_a_len=&e%#component_a_len%&7, setting metric_index=&e%#mr%");
                        #metric_index = %#mr%;
                    endif;
                next;
                
                if(%#metric_index% >= 0);
                    &metric_char   = %&metric_chars[%#metric_index%]%;
                    &metric_ratio  = %&metric_ratio[%#metric_index%]%;
                    &return_string = xEval("%&convert_string% / %&metric_ratio%");
                    if(%#decimal_precision% <= -1);
                        &return_string = xFormatNumber(%&return_string%);
                    else;
                        &return_string = xFormatNumber(%&return_string%,%#decimal_precision%);
                    endif;
                    &return_string = "%&return_string% %&metric_char%";
                endif;
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/convertMetricString
        // Takes an input of a string with metric numbers in it (e.g. '10K, '10.5M', etc) and parses out the metric character
        // then converts the input into a number and returns it. Supports K, M, B, T suffixes.
            // Params:
                // {string} <&metric_string>               The String to Parse
                // {number} [#decimal_precision=-1]        Amount of sig. figs to round the conversion off to. If set to <= -1, will just
                //                                         format the number as-is (it will keep as many decimal places as it had in the first place).
                // {boolean} [format_with_commas=false]    Whether or not to format the conversion with commas every 3 characters.
            // Returns an Empty String if no conversion were able to be done, or a (possibly formatted) Number otherwise.
            // Example:
                //    #converted_units = convertMetricString("10K",2,true);
                //    log(%#converted_units%); // 10,000.00
        function convertMetricString(&metric_string,#decimal_precision=-1,format_with_commas=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:529
            &base_expression = "([\d,.-]+)(?:.*?\b|\B)";
            &metric_chars[]  = split(", ","K, M, B, T");
            &metric_ratio[]  = split(", ","1000, 1000000, 1000000000, 1000000000000");
            &return_string   = "0";
            match_found      = false;
            foreach(&metric_chars[],&metric_char,#mc);
                &metric_expr = "%&base_expression%%&metric_char%";
                ifmatches(%&metric_string%,%&metric_expr%,&amount_units,1);
                    match_found    = true
                    &amount_units  = replace(&amount_units,",");
                    &return_string = xEval("%&return_string% + (%&amount_units% * %&metric_ratio[%#mc%]%)");
                endif;
            next;
            
            if(%match_found%);
                strip_commas = !%format_with_commas%;
                if(%#decimal_precision% <= -1);
                    &return_string = xFormatNumber(%&return_string%,"",%strip_commas%);
                else;
                    &return_string = xFormatNumber(%&return_string%,%#decimal_precision%,%strip_commas%);
                endif;
                return(%&return_string%);
            else;
                return("");
            endif;
        endfunction;
    // string/index/isMetricString
        // Checks if a String is a Metric String
            // Params:
                // {string} <&metric_string>    The String to check for a Metric Suffix (and/or Metric Suffixes)
                //
            // Returns a Boolean indicating whether or not the String is a Metric String
            // Example:
                //    is_metric = isMetricString(%&metric_string%);
        function isMetricString(&metric_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:510
            &base_expression = "([\d,.-]+)(?:.*?\b|\B)(K|M|B|T)";
            ifmatches(%&metric_string%,%&base_expression%);
                return_boolean = true;
            endif;
            return(%return_boolean%);
        endfunction;
    // array/index/miscComparator
        // Evaluates whether <&left> is <&operator> to <&right> (executes a variable comparison). Returns a boolean.
            // Params:
            //        {string} <&left>        The Left Hand side of the Comparison.
            //        {string} <&operator>    The Operator to apply the Condition against each Element with. Has to be one of:
            //                                '==', '!=', '>', '<', '>=', '<=', 'eq', 'ne', 'gte', 'lte', 'gt', or 'lt'. If a
            //                                number comparison operator is used, the values in the Array will be coerced to a
            //                                number so long as the condition is an integer. If the condition is a float value,
            //                                they will be evaluated using float math (eval).
            //        {string} <&right>       The Right Hand side of the Comparison
            //
            // Returns a boolean indicating the outcome of the evaluation.
        function miscComparator(&left,&operator,&right);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:88
            &sign_operators[] = split(", ","==, !=, >=, <=, >, <");
            #sign_op_index    = indexof(&sign_operators[],,%&operator%);
            if(%#sign_op_index% == -1);
                &char_operators[] =    split(", ","eq, ne, gte, lte, gt, lt");
                #char_op_index    = indexof(&char_operators[],,%&operator%);
                if(%#char_op_index% == -1);
                    return(&return_array[]);
                endif;
                
                &operator = %&sign_operators[%#char_op_index%]%;
            endif;
        
            if(%&operator% == "==");
                if(%&left% == %&right%);
                    return_boolean = true;
                endif;
            elseif(&operator% == "!=");
                if(%&left% != %&right%);
                    return_boolean = true;
                endif;
            else;
                ifmatches(%&right%,"^(\d+)$",#right,1);
                    // Doing Integer Evaluation
                    #left := %&left%;
                    if((%&operator% == ">=") && (%#left% >= %#right%));
                        return_boolean = true;
                    elseif((%&operator% == ">") && (%#left% > %#right%));
                        return_boolean = true;
                    elseif((%&operator% == "<=") && (%#left% <= %#right%));
                        return_boolean = true;
                    elseif((%&operator% == "<") && (%#left% < %#right%));
                        return_boolean = true;
                    endif;
                elseifmatches(%&right%,"^[0-9.-]+");
                    // Doing Float Evaluation
                    &float_diff = eval("%&left% - %&right%");
                    ifmatches(%&float_diff%,"^-");
                        // <left> - <right> = negative number, left was less than right
                        if((%&operator% == "<=") || (%&operator% == "<"));
                            return_boolean = true;
                        endif;
                    else;
                        // <left> - <right> = positive or 0, left was greater than or equal to right
                        ifmatches(%&float_diff%,"[0.]+");
                            // <left> - <right> = 0, left was equal to right
                            if((%&operator% == ">=") || (%&operator% == "<="));
                                return_boolean = true;
                            endif;
                        elseif((%&operator% == ">=") || (%&operator% == ">"));
                            // <left> - <right> = greater than 0, left was greater than right
                            return_boolean = true;
                        endif;
                    endif;
                endif;
            endif;
            return(%return_boolean%);
        endfunction;
    // math/index/number
        // Normalizes any type of input Number into the Type.
            // Params:
                // {string} <&number>             The Number to Format. Can be integer, decimal, negative, positive, metric, e-notation, whatever.
                // {string} [...&formatting[]]    The Formatting Options to apply. Settings are provided in '<KEY>: <VALUE>' notation. Valid Options:
                                                //    ['F'|'T'|'S'|'TYPE'|'STYLE'|'FORMAT']:
                                                //        - ['I'|'N'|'INT'|'INTEGER'|'NUM'|'NUMBER']           : Formats the output as an Integer.
                                                //        - ['D'|'F'|'L'|'DECIMAL'|'FLOAT'|'LONG'|'DOUBLE']    : Formats the output as a Decimal Number.
                                                //        - ['E'|'ENOTE'|'EXP'|'EXPONENT']                     : Formats the output in Exponentional Notation.
                                                //        - ['M'|'METRIC']                                     : Formats the output as a Metric Suffixed Number.
                                                //    ['P'|'PLACE'|'PLACES'|'PRECISION'] (Only available if Type is Decimal or Metric or equivalent):
                                                //        - ['S'|'SIG'|'SIGFIG'|'SIGNIFICANT']    : Applies the default amount of Decimal Places (the Sig. Figs in the converted value).
                                                //        - <NUMBER >= 0>                         : Applies <NUMBER> amount of Decimal Places (setting this to 0 is the same as using F: INT, R: ROUND).
                                                //    ['R'|'ROUND'|'ROUNDING'] (Only available if Precision is not 'SIG' or equivalent):
                                                //        - ['R'|'ROUND'|'D'|'DEFAULT'|'STD'|'STANDARD'|'NEAR'|'NEAREST'|'INT'|'NUM'|'INTEGER'|'NUMBER']    : Round using 'ROUND' (towards nearest integer).
                                                //        - ['F'|'FLOOR'|'DOWN'|'D'|'<'|'LESSER'|'LT']                                                      : Round using 'FLOOR' (towards negative infinity).
                                                //        - ['C'|'CEIL'|'CEILING'|'UP'|'>'|'GREATER'|'GT']                                                  : Round using 'CEIL' (towards positive infinity).
                                                //        - ['T'|'TRUNCATE'|'TRUNC']                                                                        : Rounds up or down towards 0
                                                //        - ['N'|'NONE']                                                                                    : Does not round the output.
                                                //    ['C'|'COMMA'|'COMMAS'|'DELIMIT'|'DELIMITER'|'SPACE'|'SPACER']:
                                                //        - <BOOLEAN>          : Enables (or disables) formatting the output with Commas every 3 sig. figs (e.g. 100000 -> 100,000)
                                                //        - <STRING>           : Enables formatting the output with <STRING> as the delimiter every 3 sig. figs
                                                //        - ['N'|'NONE'|'']    : Disables formatting the output with delimiters.
                                                //    The Default Values for each Setting are as follows:
                                                //        FORMAT       : FLOAT
                                                //        PRECISION    : SIGNIFICANT
                                                //        ROUNDING     : NONE
                                                //        DELIMITER    : FALSE
            // Returns the Number specified formatted according to the Rules specified in [...&formatting[]].
            // Example:
                //    &number = number("100,000,000.192");
                //    log("number: %&number%"); // 'number: 100000000.192' (default formatting rules were applied)
        function number(&number="0",...&formatting[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:198
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6mathNumber&7";
                exponent_ready     = false;
                
                // Parse Formatting Options
                if(true);
                    // Wrap Formatting Keys, Valid Values and Default Values
                    if(true);
                        if(true); // Wrap '&opt_format' Formatting Option
                            &valid_formatting_vars[]        = "&opt_format";
                            &valid_formatting_keys[]        = "F|T|S|TYPE|STYLE|FORMAT";
                            &valid_formatting_validation[]  = "";
                            valid_formatting_custom_input[] = false;
                            valid_formatting_def_override[] = false;
                            if(%exponent_ready%);
                                &valid_formatting_vals[] = "INTEGER|I|N|INT|NUM|NUMBER~FLOAT|D|F|L|DECIMAL|LONG|DOUBLE~EXPONENT|E|ENOTE|EXP~METRIC|M";
                                &valid_formatting_expr[] = "INTEGER|r$^[\d]+$~FLOAT|r$^[\d]*\.\d+$~EXPONENT|r$(?:e|\^)";
                            else;
                                &valid_formatting_vals[] = "INTEGER|I|N|INT|NUM|NUMBER~FLOAT|D|F|L|DECIMAL|LONG|DOUBLE~METRIC|M";
                                &valid_formatting_expr[] = "INTEGER|r$^[\d]+$~FLOAT|r$^[\d]*\.\d+$";
                            endif;
                            &opt_format = "FLOAT";
                        endif;
                        
                        if(true); // Wrap '&opt_precision' Formatting Option
                            &valid_formatting_vars[]        = "&opt_precision";
                            &valid_formatting_keys[]        = "P|PLACE|PLACES|PRECISION";
                            &valid_formatting_vals[]        = "SIGNIFICANT|SIGFIG|SIG|S";
                            &valid_formatting_expr[]        = "CUSTOM|r$^\d+$";
                            &valid_formatting_validation[]  = ">= 0";
                            valid_formatting_custom_input[] = false;
                            valid_formatting_def_override[] = false;
                            &opt_precision                  = "SIGNIFICANT";
                        endif;
                        
                        if(true); // Wrap '&opt_rounding' Formatting Option
                            &valid_formatting_vars[]        = "&opt_rounding";
                            &valid_formatting_keys[]        = "ROUNDING|ROUND|R";
                            &valid_formatting_vals[]        = "ROUND|INT|NUM|NUMBER|NEAREST|NEAR|STD|STANDARD|DEFAULT|D|INTEGER|R~FLOOR|F|DOWN|D|<|LESSER|LT~CEIL|CEILING|C|UP|>|GREATER|GT~NONE|N~TRUNCATE|TRUNC|T";
                            &valid_formatting_expr[]        = "";
                            &valid_formatting_validation[]  = "";
                            valid_formatting_custom_input[] = false;
                            valid_formatting_def_override[] = false;
                            &opt_rounding                   = "NONE";
                        endif;
                        
                        if(true); // Wrap '&opt_delimiter' Formatting Option
                            &valid_formatting_vars[]        = "&opt_delimiter";
                            &valid_formatting_keys[]        = "DELIMITER|C|COMMA|COMMAS|DELIMIT|SPACE|SPACER|SPACES|SPACERS|DELIMITERS";
                            &valid_formatting_vals[]        = "TRUE|1~FALSE|0~NONE|N"
                            &valid_formatting_expr[]        = "CUSTOM|r$^.+$";
                            &valid_formatting_validation[]  = "";
                            valid_formatting_custom_input[] = false;
                            valid_formatting_def_override[] = false;
                            &opt_delimiter                  = "false";
                        endif;
                    endif;
                    
                    // Parse Options
                    if(true);
                        #formatting_sz = arraysize(&formatting[]);
                        if(%#formatting_sz% >= 1);
                            foreach(&formatting[],&formatting,#f);
                                ifmatches(%&formatting%,"^(.*?):\s*?(.*)$");
                                    match(%&formatting%,"^(.*?):\s*?(.*)$",{&custom_key,&custom_val});
                                    &check_key_index_for = ucase(%&custom_key%);
                                    &check_val_index_for = ucase(%&custom_val%);
                                    foreach(&valid_formatting_keys[],&valid_formatting_keys_str,#vfk);
                                        if(!%valid_formatting_def_override[%#vfk%]%);
                                            &valid_formatting_keys_arr[] = split("|",%&valid_formatting_keys_str%);
                                            #check_key_index_for         = indexof(&valid_formatting_keys_arr[],,%&check_key_index_for%);
                                            debug_log(%debug%,%&script_debug_name%,"checking key for '&d%&check_key_index_for%&7' index is '&e%#check_key_index_for%&7'.");
                                            if(%#check_key_index_for% != -1);
                                                &valid_formatting_val_types_arrs[] = split("~",%&valid_formatting_vals[%#vfk%]%);
                                                foreach(&valid_formatting_val_types_arrs[],&valid_formatting_val_type_str,#vfvt);
                                                    &valid_formatting_val_types_arr[] = split("|",%&valid_formatting_val_type_str%);
                                                    #check_val_index_for              = indexof(&valid_formatting_val_types_arr[],,%&check_val_index_for%);
                                                    debug_log(%debug%,%&script_debug_name%,"checking val index for '&d%&check_val_index_for%&7' index is '&e%#check_val_index_for%&7'.");
                                                    if(%#check_val_index_for% != -1);
                                                        &set_var = %&valid_formatting_vars[%#vfk%]%;
                                                        &set_val = %&valid_formatting_val_types_arr[0]%;
                                                        debug_log(%debug%,%&script_debug_name%,"setting value of &%&set_var%='&e%&set_val%&7'");
                                                        set(%&set_var%,%&set_val%);
                                                        set(valid_formatting_def_override[%#vfk%],true);
                                                        break;
                                                    endif;
                                                next;
                                                
                                                // If we found a match for the Key, but not for the Value, check to see if this Option allows Custom Input.
                                                // If it does, check if the provided Value passes the Regular Expression Validation, and then if this Option
                                                // also has a further Validation Check, ensure it passes that further Validation Check as well.
                                                if((!%valid_formatting_def_override[%#vfk%]%) && (%&valid_formatting_expr[%#vfk%]% != ""));
                                                    &input_validation_expr_groups[]      = split("~",%&valid_formatting_expr[%#vfk%]%);
                                                    &input_validation_expr_validations[] = split("~",%&valid_formatting_validation[%#vfk%]%);
                                                    input_passes_validation              = false;
                                                    foreach(&input_validation_tests[],&input_validation_test_string,#ivt);
                                                        ifmatches(%&input_validation_test_string%,"^(.+?)\|r\$(.+)$");
                                                            match(%&input_validation_test_string%,"^(.+?)\|r\$(.+)$",{&matched_value,&matched_expr});
                                                            ifmatches(%&custom_val%,%&matched_expr%);
                                                                input_passes_validation = true;
                                                                if(%&input_validation_expr_validations[%#ivt%]% != "");
                                                                    &validation_params[]    = split(" ",%&input_validation_expr_validations[%#ivt%]%);
                                                                    &validation_op          = %&validation_params[0]%;
                                                                    &validation_rhs         = %&validation_params[1]%;
                                                                    input_passes_validation = miscComparator(%&custom_val%,%&validation_op%,%&validation_rhs%);
                                                                endif;
                                                                
                                                                if(%input_passes_validation%);
                                                                    &set_var = %&valid_formatting_vars[%#vfk%]%;
                                                                    &set_val = ucase(%&matched_value%);
                                                                    if(%&set_val% == "CUSTOM");
                                                                        &set_val = %&custom_val%;
                                                                        set(valid_formatting_custom_input[%#vfk%],true);
                                                                    endif;
                                                                    set(%&set_var%,%&set_val%);
                                                                    set(valid_formatting_def_override[%#vfk%],true);
                                                                    debug_log(%debug%,%&script_debug_name%,"set value of &%&set_var%='&e%&set_val%&7'");
                                                                    break;
                                                                endif;
                                                            endif;
                                                        endif;
                                                    next;
                                                endif;
                                                
                                                if(%valid_formatting_def_override[%#vfk%]%);
                                                    break;
                                                endif;
                                            endif;
                                        endif;
                                    next;
                                endif;
                                
                                #non_overriden_index = indexof(valid_formatting_def_override[],,false);
                                if(%#non_overriden_index% == -1);
                                    break;
                                endif;
                            next;
                        endif;
                    endif;
                endif;
            endif;
            
            // Parse the Number into Standardized Format.
            if(true);
                ifnotmatches(%&number%,"\d");
                    &number = "0";
                endif;
                
                &read_number = replace(&number,",");
                ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                    &read_number = convertENote(%&number%);
                else;
                    &read_number = %&number%;
                endif;
                debug_log(%debug%,%&script_debug_name%,"Conversion of &&number (&5'%&number%&7') from Exp. Notation to Decimal returned &&read_number ('&d%&read_number%&7').");
                
                is_metric = isMetricString(%&read_number%);
                if(%is_metric%);
                    &before_metric = %&read_number%;
                    &read_number   = convertMetricString(%&read_number%,"-1");
                    ifmatches(%&read_number%,"^([\d.-]+)\.0*$",&first_portion,1);
                        debug_log(%debug%,%&script_debug_name%,"Conversion of &&read_number ('&5%&before_metric%&7') from Metric returned insignificant digits, cutting off (setting &&read_number to: '&e%&first_portion%&7' from '&d%&read_number%&7').");
                        &read_number = %&first_portion%;
                    endif;
                    debug_log(%debug%,%&script_debug_name%,"Conversion of &&read_number ('&5%&before_metric%&7') from Metric returned '&d%&read_number%&7'.");
                elseif(%debug%);
                    debug_log(%debug%,%&script_debug_name%,"&&read_number ('&5%&read_number%&7') was not classified as being a Metric String.");
                endif;
                
                if(%debug%);
                    debug_log(%debug%,%&script_debug_name%,"Formatting Input Number '&d%&number%&7' (standardized: '&d%&read_number%&7')...");
                    &vars[] = split(" ","&number &read_number &opt_format &opt_precision &opt_rounding &opt_delimiter");
                    foreach(&vars[],&var,#v);
                        &val    = "%%&var%%";
                        &logvar = regexreplace(&var,"(?<!&)(&[\w])","&$1");
                        &logval = regexreplace(&val,"(?<!&)(&[\w])","&$1");
                        debug_log(%debug%,%&script_debug_name%,"%#v% > %&logvar%: '&d%&logval%&7'.");
                    next;
                endif;
                
                // Apply the specified Rounding Option as defined in '&opt_rounding'
                if(true);
                    &before_round = %&read_number%;
                    if(%&opt_rounding% == "TRUNCATE");
                        debug_log(%debug%,%&script_debug_name%,"Truncating &&read_number ('&5%&before_round%&7') by cutting off all decimals.");
                        ifmatches(%&read_number%,"^([\d-]+)\.",&truncated_number,1);
                            &read_number = %&truncated_number%;
                            debug_log(%debug%,%&script_debug_name%,"Truncated &&read_number ('&5%&before_round%&7') to: '&d%&read_number%&7'.");
                        else;
                            debug_log(%debug%,%&script_debug_name%,"No decimal points to truncate in &&read_number ('&5%&before_round%&7').");
                        endif;
                    elseif(%&opt_rounding% != "NONE");
                        &read_number = xEval("%&opt_rounding%(%&read_number%)");
                        debug_log(%debug%,%&script_debug_name%,"Rounding &&read_number ('&5%&before_round%&7') with Method: '&e%&opt_rounding%&7' returned: &d'%&read_number%&7'.");
                    else;
                        debug_log(%debug%,%&script_debug_name%,"Not rounding &&read_number ('&5%&before_round%&7') at all, Rounding Method (&&opt_rounding: '&e%&opt_rounding%&7') is set to 'NONE'.");
                    endif;
                endif;
                
                // Apply the specified Formatting Option as defined in '&opt_format'
                if(true);
                    &before_formatting = %&read_number%;
                    
                    // Figure out the Formatting Rules to pass to xFormatNumber
                    if(true);
                        // Figure out the Decimal Places to include in the Result (if any)
                        if(true);
                            &format_precision = "0";
                            if(%&opt_format% != "INTEGER");
                                &format_precision = "";
                                #precision_index  = indexof(&valid_formatting_vars[],,"&opt_precision");
                                custom_precision  = %valid_formatting_custom_input[%#precision_index%]%;
                                if(%custom_precision%);
                                    &format_precision = %&opt_precision%;
                                endif;
                            endif;
                        endif;
                        
                        // Figure out the Delimiter to Use in the Result (if any)
                        if(true);
                            if((%&opt_format% != "EXPONENT") && (&opt_format% != "METRIC"));
                                opt_delimiter    := %&opt_delimiter%;
                                #delimiter_index  = indexof(&valid_formatting_vars[],,"&opt_delimiter");
                                custom_delimiter  = %valid_formatting_custom_input[%#delimiter_index%]%;
                                use_delimiter     = ((%custom_delimiter%) || (%opt_delimiter%));
                            endif;
                            exclude_commas = !%use_delimiter%;
                        endif;
                        
                        // Format the Number using xFormatNumber
                        if(true);
                            &before_xformat      = %&read_number%;
                            &formatted_number    = xFormatNumber(%&read_number%,%&format_precision%,false);
                            &pure_number         = replace(&formatted_number,",");
                            debug_log(%debug%,%&script_debug_name%,"Calling &bxFormatNumber&7 on &&read_number ('&5%&before_xformat%&7') returned '&d%&formatted_number%&7' (called &bxFormatNumber&7 with args: precision: '&e%&format_precision%&7', exclude_commas: '&cfalse&7'). Comma Stripped version is '&e%&pure_number%&7'.");
                            if(%&opt_format% == "METRIC");
                                &read_number = convertToMetric(%&pure_number%,-1);
                                debug_log(%debug%,%&script_debug_name%,"Calling &bconvertToMetric&7 on &&pure_number ('&5%&pure_number%&7') returned '&d%&read_number%&7' (called &bconvertToMetric&7 with args: precision: '&e-1&7').");
                            elseif(%use_delimiter%);
                                &read_number = %&formatted_number%;
                                &delim_char  = ",";
                                if(%custom_delimiter%);
                                    &delim_char  = %&opt_delimiter%;
                                    &read_number = replace(&read_number,",",%&delim_char%);
                                endif;
                                debug_log(%debug%,%&script_debug_name%,"Set &&read_number ('&5%&pure_number%&7') to be formatted using delimiter character (&&delim_char: '&e%&delim_char%&7'): '&d%&read_number%&7'.");
                            else;
                                &read_number = %&pure_number%;
                                debug_log(%debug%,%&script_debug_name%,"Set &&read_number ('&5%&read_number%&7') to be stripped of Delimiter Characters.");
                            endif;
                        endif;
                        
                        // If we are only returning sig. figs, do that.
                        if(%&opt_precision% == "SIGNIFICANT");
                            ifmatches(%&read_number%,"^(.*?)\.0*$",&first_portion,1);
                                &read_number = %&first_portion%;
                            endif;
                        endif;
                    endif;
                endif;
            endif;
            
            debug_log(%debug%,%&script_debug_name%,"Returning '&d%&read_number%&7' from input number '&5%&number%&7' (applied opts: format='&e%&opt_format%&7', precision='&e%&opt_precision%&7', rounding='&e%&opt_rounding%&7', delimiter='&e%&opt_delimiter%&7').");
            return(%&read_number%);
        endfunction;
    // math/index/_gte
        // Wrapper that converts A and B to Numbers, then checks for A being >= B.
            // Params:
                // {string} <&a>    First Number to Parse and Compare.
                // {string} <&b>    Second Number to Parse and Compare.
            // Returns a Boolean
            // Example:
                //    greater_than_or_equal_to = gt("1M","1000000");
        function _gte(&a,&b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:598
            &a_converted = number(%&a%,"F:FLOAT","P:SIGNIFICANT");
            &b_converted = number(%&b%,"F:FLOAT","P:SIGNIFICANT");
            &diff        = eval("%&a_converted% - %&b_converted%");
            ifnotmatches(%&diff%,"^-");
                return_boolean = true;
            endif;
            return(%return_boolean%);
        endfunction;
    // math/index/_eq
        // Wrapper that converts A and B to Numbers, then checks for equality.
            // Params:
                // {string} <&a>    First Number to Parse and Compare.
                // {string} <&b>    Second Number to Parse and Compare.
            // Returns a Boolean
            // Example:
                //    equal = eq("1M","1000000");
        function _eq(&a,&b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:545
            &a_converted   = number(%&a%,"F:FLOAT","P:SIGNIFICANT");
            &b_converted   = number(%&b%,"F:FLOAT","P:SIGNIFICANT");
            return_boolean = %&a_converted% == %&b_converted%;
            return(%return_boolean%);
        endfunction;
    // math/index/_neq
        // Wrapper that converts A and B to Numbers, then checks for inequality.
            // Params:
                // {string} <&a>    First Number to Parse and Compare.
                // {string} <&b>    Second Number to Parse and Compare.
            // Returns a Boolean
            // Example:
                //    not_equal = neq("1M","1000000");
        function _neq(&a,&b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:559
            equal          = _eq(%&a%,%&b%);
            return_boolean = !%equal%;
            return(%return_boolean%);
        endfunction;
    // info/index/getPurse
        // Returns the amount of coins in the purse, rounded to the nearest integer.
            // Params: None
            // Returns: Integer amount of Coins in the purse (returns -1 if cannot find Purse Coins).
        function getPurse();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:644
            &return_integer = -1;
            foreach("teams");
                &scoreboard_line = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                ifmatches(%&scoreboard_line%,"(?:Purse|Piggy): ([0-9,]+)",&coins,1);
                    &return_integer := regexreplace(&coins,"\D","");
                    break;
                endif;
            next;
            return(%&return_integer%);
        endfunction;
    // math/index/getNearestNumber
        // Given a Base Number, finds the Number that is nearest to the Base Number and returns it. Formats any Numbers out of whatever
        // Format they are in into Decimal Form before iterating over the Array. The Element that is returned will always be the 'unedited'
        // version of the Element (so indexof will return a valid index).
            // Params:
                // {string} <&base_number>             The Base Number to compare the other Numbers against.
                // {string} <...&compare_numbers[]>    The Numbers to Compare against the Base Number.
            // Returns the String Number from <...&compare_numbers[]> that is closest to the <&base_number> Parameter. If invalid Number
            // Parameters are passed to this Function (or no Values for ...&compare_numbers[] are passed/no value for <&base_number> is passed),
            // an Empty String will be returned.
            // Example:
                //    &compare_numbers[] = split(", ","1000, -500");
                //    &nearest_number    = getNearestNumber("100",...&compare_numbers[]);
                //    log("nearest number to 100 of 1000 and -500 is: %&nearest_number%"); // 'nearest number to 100 of 1000 and -500 is: -500'
        function getNearestNumber(&base_number,...&compare_numbers[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:480
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&5mathGetNearestNumber&7";
            endif;
            
            #nearest_index = -1;
            &nearest_diff  = "";
            &base_number   = replace(&base_number,",");
            &base_number   = convertENote(%&base_number%);
            base_is_metric = isMetricString(%&base_number%);
            if(%base_is_metric%);
                &base_number = convertMetricString(%&base_number%,-1,false);
            endif;
            
            #compare_numbers_sz = arraysize(&compare_numbers[]);
            if(%#compare_numbers_sz% > 1);
                foreach(&compare_numbers[],&compare_number,#cn);
                    &comparison_value = replace(&compare_number,",");
                    ifmatches(%&comparison_value%,"[^\d.-]");
                        &comparison_value = convertENote(%&comparison_value%);
                        ifmatches(%&comparison_value%,"[^\d.-]");
                            comparison_metric = isMetricString(%&comparison_value%);
                            if(%comparison_metric%);
                                &comparison_value = convertMetricString(%&comparison_value%,-1,false);
                            endif;
                        endif;
                    endif;
                    
                    &comparison_diff = xEval("sqrt((%&base_number% - %&comparison_value%)^2)");
                    if(%#cn% == 0);
                        #nearest_index = %#cn%;
                        &nearest_diff  = %&comparison_diff%;
                    else;
                        // If comparison_diff - nearest_diff < 0, comparison_diff is less than nearest_diff.
                        &comparison_eval = xEval("%&comparison_diff% - %&nearest_diff%");
                        ifmatches(%&comparison_eval%,"^-");
                            #nearest_index = %#cn%;
                            &nearest_diff  = %&comparison_diff%;
                        endif;
                    endif;
                next;
            elseif(%#compare_numbers_sz% == 1);
                #nearest_index = 0;
            else;
                debug_error(%debug%,%&script_debug_name%,"No valid Number Arguments passed! Returning empty string.");
            endif;
            
            if(%#nearest_index% != -1);
                &return_string = %&compare_numbers[%#nearest_index%]%;
            endif;
            
            &compare_numbers = join("&7', '&5",&compare_numbers[]);
            debug_log(%debug%,%&script_debug_name%,"Number '&d%&return_string%&7' is nearest to Base Number '&e%&base_number%&7' of Numbers: ['&5%&compare_numbers%&7'].");
            return(%&return_string%);
        endfunction;
    // banking/index/bankingInfoInternalGetLimits
        // Tries to determine the Limit of an Account based on what GUI we are in and what Items are present.
            // Params:
                // {string} [&bank_enum=""]    String ENUM returned from `bankingInfoInternalGetGuiType()` Function. If omitted or invalid, will call
                //                             that Function to grab it.
            // Returns an Array of Strings where Index 0 = Solo Limit, Index 1 = Coop Limit. If either
            // Limit is unable to be determined, it will be an empty String instead.
            // Example:
                //    &bank_limits[] = bankingInfoInternalGetLimits(%&bank_enum%);
                //    &solo_limit    = %&bank_limits[0]%;
                //    &coop_limit    = %&bank_limits[1]%;
        function bankingInfoInternalGetLimits(&bank_enum="");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:606
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6bankingInfoGetLimits";
        
                // Setup GUIs we can find the Limits in, Items we can find the Limits in, etc.
                if(true);
                    // Wrap 'Bank Account Upgrades' GUI Items
                    if(true);
                        &upgrade_mcids[]   = "wheat_seeds";
                        &upgrade_names[]   = "Starter Account";
                        &primary_limit[]   = "50000000";
                        &secondary_limit[] = "10000000";
        
                        &upgrade_mcids[]   = "gold_nugget";
                        &upgrade_names[]   = "Gold Account";
                        &primary_limit[]   = "100000000";
                        &secondary_limit[] = "20000000";
        
                        &upgrade_mcids[]   = "gold_ingot";
                        &upgrade_names[]   = "Deluxe Account";
                        &primary_limit[]   = "250000000";
                        &secondary_limit[] = "50000000";
        
                        &upgrade_mcids[]   = "golden_chestplate";
                        &upgrade_names[]   = "Super Deluxe Account";
                        &primary_limit[]   = "500000000";
                        &secondary_limit[] = "100000000";
        
                        &upgrade_mcids[]   = "golden_horse_armor";
                        &upgrade_names[]   = "Premier Account";
                        &primary_limit[]   = "1000000000";
                        &secondary_limit[] = "200000000";
        
                        &upgrade_mcids[]   = "skull";
                        &upgrade_names[]   = "Luxurious Account";
                        &primary_limit[]   = "6000000000";
                        &secondary_limit[] = "1200000000";
        
                        &upgrade_mcids[]   = "skull";
                        &upgrade_names[]   = "Palatial Account";
                        &primary_limit[]   = "60000000000";
                        &secondary_limit[] = "12000000000";
                    endif;
        
                    // Wrap Generic Items
                    if(true);
                        &find_mcids[] = "gold_block";
                        &find_names[] = "Bank Upgrades";
                        &find_exprs[] = "bank limit: ([\d,.-]+)";
                        
                        &find_mcids[] = "redstone_torch";
                        &find_names[] = "Information";
                        &find_exprs[] = "limit: ([\d,.-]+(?: \w+)?)";
                    endif;
        
                    // Wrap GUI Setup
                    if(true);
                        // We can include the 'Co-op Bank Account' CONTAINER even if we are looking for the Solo Balance, because
                        // if we find ourselves in the 'Co-op Bank Account' GUI, we know that the Profile is a Coop, and the Solo Limit
                        // will always be 0.20x the Coop Limit. And vice-versa, we can include the Personal Bank Account in this too,
                        // because the Coop Limit will always be 5.00x the Personal Limit. However, if we are exclusively looking for the
                        // Coop Balance, then we will have to validate that there is a 'Go Back to Bank' Item in the Container's Items,
                        // to rule out the edge case in which we would return a Number for Solo Profiles without a Coop Account (the go
                        // back button will not be available on a Solo Profile, since there is no GUI to go back to from the Personal Bank Account GUI).
        
                        &accept_enums[]           = split(", ","CHOICE, UPGRADES, COOP, SOLO");
                        &get_profile_type_enums[] = split(", ","UPGRADES, SOLO");
                    endif;
        
                    // Wrap Expressions used in findItemContainer calls
                    if(true);
                        &upgrade_item_mcids_expr = join("|",&upgrade_mcids[]);
                        &upgrade_item_mcids_expr = "^(?:%&upgrade_item_mcids_expr%)$";
                        &upgrade_item_names_expr = join("|",&upgrade_names[]);
                        &upgrade_item_names_expr = "^(?:%&upgrade_item_names_expr%)$";
                        &upgrade_item_nbt_expr   = "This is your account!";
                        
                        &find_mcids_expr = join("|",&find_mcids[]);
                        &find_mcids_expr = "^(?:%&find_mcids_expr%)$";
                        &find_names_expr = join("|",&find_names[]);
                        &find_names_expr = "^(?:%&find_names_expr%)$";
                    endif;
                endif;
            endif;
        
            // Get the Limit for the Specified Account, or whichever one is available.
            if(true);
                &coop_limit   = "";
                &solo_limit   = "";
                #accept_index = indexof(&accept_enums[],,%&bank_enum%);
                if(%#accept_index% == -1);
                    &bank_enum    = bankingInfoInternalGetGuiType();
                    #accept_index = indexof(&accept_enums[],,%&bank_enum%);
                endif;
                
                if(%#accept_index% != -1);
                    &bank_enum    = %&accept_enums[%#accept_index%]%;
                    &profile_type = bankingInfoInternalGetProfileType(%&bank_enum%);
                    
                    if(%&bank_enum% == "UPGRADES");
                        &query_params[]     = split(", ","MCID: r$%&upgrade_item_mcids_expr%, NAME: r$%&upgrade_item_names_expr%, NBT: r$%&upgrade_item_nbt_expr%");
                        &query_array_prefix = "&upgrade_names";
                    else;
                        &query_params[]     = split(", ","MCID: r$%&find_mcids_expr%, NAME: r$%&find_names_expr%");
                        &query_array_prefix = "&find_names";
                    endif;
                    &query_array_pointer = "%&query_array_prefix%[]"
        
                    #query_slot = findItemContainer(false,...&query_params[]);
                    debug_log(%debug%,%&script_debug_name%,"query_slot is %#query_slot%");
                    if(%#query_slot% != -1);
                        &query_item  = getslotitemnbt(%#query_slot%,,#query_stack,#query_data,&query_nbt);
                        &query_nbt   = strip(%&query_nbt%);
                        &query_name  = getItemName(%&query_nbt%,%&query_item%);
                        #query_index = indexof(%&query_array_pointer%,,%&query_name%);
                        if(%#query_index% != -1);
                            if(%&bank_enum% == "UPGRADES");
                                &primary_limit   = %&primary_limit[%#query_index%]%;
                                &secondary_limit = %&secondary_limit[%#query_index%]%;
                            elseifmatches(%&query_nbt%,%&find_exprs[%#query_index%]%,&capture_group,1);
                                &formatted_group = number(%&capture_group%,"F: I");
                                #primary_index   = indexof(&primary_limit[],,%&formatted_group%);
                                #secondary_index = indexof(&secondary_limit[],,%&formatted_group%);
                                debug_log(%debug%,%&script_debug_name%,"from &&capture_group='&e%&capture_group%&7', got &&formatted_group='&e%&formatted_group%&7', found indexed #primary_index=&e%#primary_index%&7, #secondary_index=&e%#secondary_index%&7.");
                                
                                if(%#primary_index% != -1);
                                    &primary_limit   = %&primary_limit[%#primary_index%]%;
                                    &secondary_limit = %&secondary_limit[%#primary_index%]%;
                                elseif(%#secondary_index% != -1);
                                    &primary_limit   = %&primary_limit[%#secondary_index%]%;
                                    &secondary_limit = %&secondary_limit[%#secondary_index%]%;
                                else;
                                    debug_error(%debug%,%&script_debug_name%,"...");
                                    &compare_array_prefix = "&primary_limit";
                                    if((%&profile_type% == "COOP") && (%&bank_enum% == "SOLO"));
                                        &compare_array_prefix = "&secondary_limit";
                                    endif;
                                    &compare_array_pointer = "%&compare_array_prefix%[]";
                                    
                                    // Find the nearest number
                                    if(true);
                                        // Create array of Absolute Differences between each comparison value and each formatted group
                                        foreach(%&compare_array_pointer%,&compare_value,#cvi);
                                            &compare_diff[%#cvi%] = xEval("sqrt((%&compare_value% - %&formatted_group%)^2)");
                                        next;
                                        
                                        &nearest_diff    = getNearestNumber(0,...&compare_diff[]);
                                        #nearest_index   = indexof(&compare_diff[],,%&nearest_diff%);
                                        &nearest_number  = "%%&compare_array_prefix%[%#nearest_index%]%";
                                        &compare_diffs   = join("&7, '&e",&compare_diff[]);
                                        &primary_limit   = %&primary_limit[%#nearest_index%]%;
                                        &secondary_limit = %&secondary_limit[%#nearest_index%]%;
                                        debug_log(%debug%,%&script_debug_name%,"smallest diff from &&base_value=&e0&7 in &&compare_diff=[&e'%&compare_diffs%&7'] was &&nearest_diff='&e%&nearest_diff%&7', found at #nearest_index=&e%#nearest_index%&7, correlating to number='&e%&nearest_number%&7', resulting in &&primary_limit='&e%&primary_limit%&7', &&secondary_limit='&e%&secondary_limit%&7'.");
                                    endif;
                                endif;
                            endif;
                            
                            if(%&profile_type% == "COOP");
                                &coop_limit = %&primary_limit%;
                                &solo_limit = %&secondary_limit%;
                            else;
                                &solo_limit = %&primary_limit%;
                            endif;
                        else;
                            &query_array_pointer_joint = join("&7', '&e",%&query_array_pointer%);
                            debug_error(%debug%,%&script_debug_name%,"Could not find &&query_name='&e%&query_name%&7' in &&query_array_pointer[]=['&e%&query_array_pointer_joint%&7'] Array!");
                        endif;
                    endif;
                endif;
            endif;
            
            debug_log(%debug%,%&script_debug_name%,"Returning &&solo_limit='&e%&solo_limit%&7', &&coop_limit='&e%&coop_limit%&7' for GUI ENUM &&bank_enum='&e%&bank_enum%&7', &&profile_type='&e%&profile_type%&7'.");
            return(%&solo_limit%,%&coop_limit%);
        endfunction;
    // banking/index/bankingInfoInternalGetAccountType
        // Checks what Account Type we are in based on what GUI we are in and what Items are present.
            // Params:
                // {string} [&bank_gui_type]    Optional String ENUM returned from the `bankingInfoInternalGetGuiType()` Function.
                //                              If not provided (or invalid), will call `bankingInfoInternalGetGuiType()`.
            // Returns a String ENUM of 'COOP' or 'SOLO', or an empty string if it could not be determined.
            // Example:
                //    &current_account = bankingInfoInternalGetAccountType();
                //    if(%&current_account% == "COOP");
                //        log("In a Coop Bank Account GUI")
                //    elseif(%&current_account% == "SOLO");
                //        log("In a Solo Bank Account GUI")
                //    elseif(%&current_account% == "");
                //        log("Not in a Bank Account GUI")
                //    endif;
        function bankingInfoInternalGetAccountType(&bank_gui_type);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:372
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&6bankingInfoGetAccountType";
                &return_string     = "NONE";
                &gui_enum_map[]    = split(", ","UPGRADES, CHOICE, COOP, SOLO, COOP_DEPOSIT, SOLO_DEPOSIT, SIGN_DEPOSIT, COOP_WITHDRAW, SOLO_WITHDRAW, SIGN_WITHDRAW, NONE");
                #gui_enum_index    = indexof(&gui_enum_map[],,%&bank_gui_type%);
                if(%#gui_enum_index% == -1);
                    &bank_gui_type = bankingInfoInternalGetGuiType();
                endif;
            endif;
        
            ifmatches(%&bank_gui_type%,"^(SOLO|COOP)",&profile_type,1);
                &return_string = ucase(%&profile_type%);
            endif;
        
            debug_log(%debug%,%&script_debug_name%,"Returning Account Type '&d%&return_string%&7' from Bank GUI Type '&d%&bank_gui_type%&7'.");
            return(%&return_string%);
        endfunction;
    // banking/index/bankingInfoInternalGetBalances
        // Tries to determine the Balance of the specified Bank Account based on what GUI we are in and what Items are present.
            // Params:
                // {string} [&bank_enum=""]    String ENUM returned from `bankingInfoInternalGetGuiType()` Function. If omitted or invalid, will call
                //                             that Function to grab it.
            // Returns an Array of Strings where Index 0 = Solo Balance, Index 1 = Coop Balance. If either
            // Balance is unable to be determined, it will be an empty String instead.
            // Example:
                //    &bank_balances[] = bankingInfoInternalGetBalances(%&bank_enum%);
                //    &solo_balance    = %&bank_balances[0]%;
                //    &coop_balance    = %&bank_balances[1]%;
        function bankingInfoInternalGetBalances(&bank_enum="");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:403
            // Setup Function Variables
            if(true);
                debug                 = true;
                &script_debug_name    = "&6bankingInfoGetBalance";
                &current_account_type = bankingInfoInternalGetAccountType();
                if(%&current_account_type% == "");
                    &current_account_type = bankingInfoInternalGetProfileType(%&bank_enum%);
                endif;
                &solo_balance         = "";
                &coop_balance         = "";
        
                // Setup GUIs we can find the Balance(s) in, Items we can find the Balance(s) in, etc.
                if(true);
                    // Wrap Generic Items that we can query for the Balance of the Account.
                    if(true);
                        &percent_sign = char("37");
        
                        &find_mcids[] = "chest";
                        &find_names[] = "Deposit Coins";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "dropper";
                        &find_names[] = "Withdraw Coins";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "chest";
                        &find_names[] = "Your whole purse";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "chest";
                        &find_names[] = "Half your purse";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "dropper";
                        &find_names[] = "Everything in the account";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "dropper";
                        &find_names[] = "Half the account";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "dropper";
                        &find_names[] = "Withdraw 20%&percent_sign%";
                        &find_types[] = %&current_account_type%;
        
                        &find_mcids[] = "sign";
                        &find_names[] = "Specific amount";
                        &find_types[] = %&current_account_type%;
                    endif;
        
                    // Wrap Containers we can find the Balance of an Account in.
                    if(true);
                        &accept_gui     = "GUICHEST";
                        &accept_enums[] = "CHOICE";
                        &solo_enums[]   = "CHOICE";
                        &coop_enums[]   = "CHOICE";
                        
                        push(&accept_enums[],"COOP","COOP_DEPOSIT","COOP_WITHDRAW");
                        push(&coop_enums[],"COOP","COOP_DEPOSIT","COOP_WITHDRAW");
                        &find_mcids[] = "ender_chest";
                        &find_names[] = "Co-op Bank Account";
                        &find_types[] = "COOP";
                        
                        push(&accept_enums[],"SOLO","SOLO_DEPOSIT","SOLO_WITHDRAW");
                        push(&solo_enums[],"SOLO","SOLO_DEPOSIT","SOLO_WITHDRAW");
                        &find_mcids[] = "chest";
                        &find_names[] = "Personal Bank Account";
                        &find_types[] = "SOLO";
                    endif;
                    
                    // Split up '&find_...' into Groups of COOP and SOLO types.
                    if(true);
                        foreach(&find_names[],&find_name,#fn);
                            if(%&find_types[%#fn%]% == "COOP");
                                &coop_mcids[] = %&find_mcids[%#fn%]%;
                                &coop_names[] = %&find_names[%#fn%]%;
                            elseif(%&find_types[%#fn%]% == "SOLO");
                                &solo_mcids[] = %&find_mcids[%#fn%]%;
                                &solo_names[] = %&find_names[%#fn%]%;
                            endif;
                        next;
                    endif;
                endif;
        
                &find_mcids      = join("|",&find_mcids[]);
                &find_mcids_expr = "^(?:%&find_mcids%)$";
                
                &find_names      = join("|",&find_names[]);
                &find_names_expr = "^(?:%&find_names%)$";
                
                &coop_names      = join("|",&coop_names[]);
                &coop_names_expr = "^(?:%&coop_names%)$";
                
                &coop_mcids      = join("|",&coop_mcids[]);
                &coop_mcids_expr = "^(?:%&coop_mcids%)$";
                
                &solo_names      = join("|",&solo_names[]);
                &solo_names_expr = "^(?:%&solo_names%)$";
                
                &solo_mcids      = join("|",&solo_mcids[]);
                &solo_mcids_expr = "^(?:%&solo_mcids%)$";
                
                &balance_expr    = "balance: ([\d,.-]+)";
            endif;
            
            // Get the Balance of each Account that we can get the Balance for.
            if(true);
                #accept_index = indexof(&accept_enums[],,%&bank_enum%);
                if(%#accept_index% == -1);
                    &bank_enum    = bankingInfoInternalGetGuiType();
                    #accept_index = indexof(&accept_enums[],,%&bank_enum%);
                endif;
                
                if(%#accept_index% != -1);
                    &bank_enum  = %&accept_enums[%#accept_index%]%;
                    #coop_index = indexof(&coop_enums[],,%&bank_enum%);
                    #solo_index = indexof(&solo_enums[],,%&bank_enum%);
                    if(%#coop_index% != -1);
                        &check_terms[] = "coop";
                        debug_log(%debug%,%&script_debug_name%,"Current Bank ENUM (&&bank_enum: '&d%&bank_enum%&7') has Item(s) that can contain the COOP Balance, pushing COOP Term to checklist.");
                    endif;
                    if(%#solo_index% != -1);
                        &check_terms[] = "solo";
                        debug_log(%debug%,%&script_debug_name%,"Current Bank ENUM (&&bank_enum: '&d%&bank_enum%&7') has Item(s) that can contain the SOLO Balance, pushing SOLO Term to checklist.");
                    endif;
                    
                    foreach(&check_terms[],&check_term,#ct);
                        &mcids_expr = "%&%&check_term%_mcids_expr%";
                        &names_expr = "%&%&check_term%_names_expr%";
                        #found_slot = findItemContainer(false,"MCID: r$%&mcids_expr%","NAME: r$%&names_expr%","NBT: r$%&balance_expr%");
                        if(%#found_slot% != -1);
                            &found_item = getslotitemnbt(%#found_slot%,,#found_stack,#found_data,&found_nbt);
                            &found_nbt  = strip(%&found_nbt%);
                            ifmatches(%&found_nbt%,%&balance_expr%,&balance_string,1);
                                &balance_string = replace(&balance_string,",");
                                &balance_string = number(%&balance_string%,"F: I","R: T");
                                set("&%&check_term%_balance",%&balance_string%);
                                debug_log(%debug%,%&script_debug_name%,"Set Balance for Variable '&d&&%&check_term%_balance&7' to be '&6%&balance_string%&7' coins.");
                            else;
                                debug_error(%debug%,%&script_debug_name%,"NBT for MCID: '&4%&found_item%&c' did not match Expression '&4%&balance_expr%&7' (NBT: &4%&found_nbt%&7).");
                            endif;
                        else;
                            debug_error(%debug%,%&script_debug_name%,"Could not find any Item that contained the Balance for the '&d%&check_term%&7' Account.");
                        endif;
                    next;
                endif;
            endif;
            
            debug_log(%debug%,%&script_debug_name%,"Found a total of '&6%&coop_balance%&7' coins in the COOP Bank Account, '&6%&solo_balance%&7' coins in the SOLO Bank Account.");
            return(%&solo_balance%,%&coop_balance%);
        endfunction;
    // math/index/_lte
        // Wrapper that converts A and B to Numbers, then checks for A being <= B.
            // Params:
                // {string} <&a>    First Number to Parse and Compare.
                // {string} <&b>    Second Number to Parse and Compare.
            // Returns a Boolean
            // Example:
                //    less_than_or_equal_to = lte("1M","1000000");
        function _lte(&a,&b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:615
            &a_converted = number(%&a%,"F:FLOAT","P:SIGNIFICANT");
            &b_converted = number(%&b%,"F:FLOAT","P:SIGNIFICANT");
            &diff        = eval("%&a_converted% - %&b_converted%");
            ifmatches(%&diff%,"^-");
                return_boolean = true;
            elseifmatches(%&diff%,"^[0e.]+$");
                return_boolean = true;
            endif;
            return(%return_boolean%);
        endfunction;
    // banking/index/bankingTransact
        // Executes the specified Transaction with the Bank.
            // Params:
                // {string} [&action="DEPOSIT"]      String ENUM of DEPOSIT or WITHDRAW. As long as String contains 'D', will take as 'DEPOSIT', and vice versa.
                // {string} [&amount=-1]             Amount of Coins to Transact with. Can be a Metric Number, Exp. Notation Number, Formatted,
                //                                   Float, or Integer. If set to <= 0, will transact the maximum amount of Coins with the specified
                //                                   accounts.
                // {boolean} [solo_allow=true]       Whether or not to allow Transacting with the Solo Account.
                // {boolean} [coop_allow=true]       Whether or not to allow Transacting with the Coop Account, if it is available.
                // {boolean} [under_allow=true]      Whether or not to continue on with the Transaction even if the specified amount of Coins cannot be
                //                                   transacted with from the specified Accounts. Setting this to TRUE will make it so the maximum amount
                //                                   of Coins is transacted with when the specified amount cannot be done (e.g. filling up the purse as best
                //                                   as we can, or emptying it out as best as we can).
                // {number} [#timeout_sec=30]        Amount of Seconds Function can run for before Timing Out.
                // {number} [#tick_wait=20]          Amount of Ticks to wait between repeating Actions.
                // {boolean} [personal_bank=true]    Whether or not to allow the usage of the Personal Bank shortcut Item, if it is available.
            // Returns a Boolean indicating whether or not the specified [&amount] of Coins was able to be transacted using [&action] into the specified Accounts.
            // Example:
                //    // Emptying the Purse out into all the Accounts
                //        purse_emptied = bankingTransact("DEPOSIT");
                //    // Filling the Purse up from all the Accounts
                //        purse_filled = bankingTransact("WITHDRAW");
                //    // Emptying the Purse out into the Solo Account
                //        solo_filled = bankingTransact("DEPOSIT",-1,true,false);
                //    // Emptying the Purse out into the Coop Account
                //        coop_filled = bankingTransact("DEPOSIT",-1,false,true);
                //    // Filling the Purse up from the Solo Account
                //        solo_emptied = bankingTransact("WITHDRAW",-1,true,false);
                //    // Filling the Purse up from the Coop Account
                //        coop_emptied = bankingTransact("WITHDRAW",-1,false,true);
        function bankingTransact(&action="DEPOSIT",&amount=-1,solo_allow=true,coop_allow=true,under_allow=true,#timeout_sec=30,#tick_wait=20,personal_bank=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:1447
            // Setup Function Variables
            if(true);
                &transaction_type   = "DEPOSIT";
                &transaction_amount = number(%&amount%);
                transaction_max     = _lte(%&transaction_amount%,0);
                under_allow         = ((%under_allow%) || (%transaction_max%));
                ifmatches(%&action%,"W"); &transaction_type = "WITHDRAW"; endif;
                
                debug              = true;
                &script_debug_name = "&5bTx&7[&e%&transaction_type%&7]";
                do_timeout         = %#timeout_sec% > 0;
                #start_time        = %TIMESTAMP%;
                
                if((!%solo_allow%) && (!%coop_allow%));
                    debug_error(%debug%,%&script_debug_name%,"At least one bank account must be permitted to transact with (solo_allow must be true, or coop_allow must be true).");
                    return(False);
                endif;
                
            endif;
            
            // Enter the Main Banking GUI.
            if(true);
                in_bank = bankingActionInternalOpenBank(%#timeout_sec%,%#tick_wait%,%personal_bank%);
                if(!%in_bank%);
                    debug_error(%debug%,%&script_debug_name%,"Failed to open up the Banking GUI!");
                    return(False);
                endif;
            endif;
            
            // Figure out the Balances of the Accounts we are going to be transacting with
            if(true);
                &bank_account_names[]    = split(", ","solo, coop");
                bank_account_bools[]     = split(", ","%solo_allow%, %coop_allow%");
                &bank_account_balances[] = bankingInfoInternalGetBalances();
                &bank_account_limits[]   = bankingInfoInternalGetLimits();
                &b_remaining             = %&transaction_amount%;
                if((%transaction_max%) && (%&transaction_type% == "DEPOSIT"));
                    &b_remaining = getPurse();
                    debug_log(%debug%,%&script_debug_name%,"b_remaining = %&b_remaining%");
                endif;
                
                foreach(bank_account_bools[],bank_account_bool,#bab);
                    &t_amount = "0";
                    if(%bank_account_bool%);
                        if(%&transaction_type% == "DEPOSIT");
                            &b_maximum = xEval("%&bank_account_limits[%#bab%]% - %&bank_account_balances[%#bab%]%");
                            &b_maximum = number(%&b_maximum%,"F:I","R:T");
                        elseif(%&transaction_type% == "WITHDRAW");
                            &b_maximum = number(%&bank_account_balances[%#bab%]%,"F:I","R:T");
                        endif;
                        
                        not_zero = _neq(%&b_maximum%,"0");
                        if(%not_zero%);
                            set_zero = false;
                            if((%&transaction_type% == "DEPOSIT") && (%transaction_max%));
                                // Check if there is even anything more to deposit
                                set_zero = _lte(%&b_remaining%,"0");
                            endif;
                            
                            if(%set_zero%);
                                &t_amount = "0";
                            elseif(%transaction_max%);
                                &t_amount = "-1";
                            else;
                                &t_amount = "-1";
                                is_gte = _gte(%&b_maximum%,%&b_remaining%);
                                if(%is_gte%);
                                    &t_amount = %&b_remaining%;
                                endif;
                            endif;
                        endif;
                    endif;
                    
                    &t_amount = number(%&t_amount%,"F: I","R: T");
                    if(%&t_amount% == "-1");
                        &b_remaining = xEval("%&b_remaining% - %&b_maximum%");
                    else;
                        &b_remaining = xEval("%&b_remaining% - %&t_amount%");
                    endif;
                    
                    &bank_account_transact[%#bab%] = %&t_amount%;
                    &vars[]                        = split(" ","&t_amount &b_maximum &bank_account_limits[%#bab%] &bank_account_balances[%#bab%] &b_remaining &transaction_type &bank_account_names[%#bab%] set_zero transaction_max is_gte not_zero");
                    foreach(&vars[],&var,#v);
                        &val    = "%%&var%%";
                        &logvar = regexreplace(&var,"(?<!&)(&[\w])","&$1");
                        &logval = regexreplace(&val,"(?<!&)(&[\w])","&$1");
                        debug_log(%debug%,%&script_debug_name%,"%#v% > %&logvar%: '&d%&logval%&7'.");
                    next;
                    if(%debug%); log(" "); endif;
                next;
                
                return_boolean = true;
                if(!%under_allow%);
                    &sum_transact  = xEval("%&bank_account_transact[0]% + %&bank_account_transact[1]%");
                    return_boolean = _gte(%&sum_transact%,%&transaction_amount%);
                    if(!%return_boolean%);
                        debug_error(%debug%,%&script_debug_name%,"Sum transaction of Coins is &&sum_transact='&e%&sum_transact%&7' for Action Type &&transaction_type='&e%&transaction_type%&7', does not meet minimum amount of &&transaction_amount='&e%&transaction_amount%&7', cancelling before actions.");
                        return(False);
                    endif;
                endif;
            endif;
            
            // Setup 'Max Items'
            if(true);
                if(%&transaction_type% == "DEPOSIT");
                    &max_find_item = "chest";
                    &max_find_name = "Your whole purse";
                    #max_find_slot = 11;
                else;
                    &max_find_item = "dropper";
                    &max_find_name = "Everything in the account";
                    #max_find_slot = 10;
                endif;
            endif;
            
            // Execute the Transactions for each Account.
            foreach(&bank_account_transact[],&bank_account_transact,#bat);
                debug_log(%debug%,%&script_debug_name%,"bank_account_transact: &d%&bank_account_transact%&7 from name %&bank_account_names[%#bat%]%&7.");
                
                if(%&bank_account_transact% != "0");
                    &target_enum = "%&bank_account_names[%#bat%]%_%&transaction_type%_SIGN";
                    if(%&bank_account_transact% == "-1");
                        &target_enum = "%&bank_account_names[%#bat%]%_%&transaction_type%";
                    endif;
                    #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                    in_target_enum     = bankingGUI(%&target_enum%,"",%#recursive_timeout%,%#tick_wait%,%personal_bank%);
                    if(%in_target_enum%);
                        debug_log(%debug%,%&script_debug_name%,"Got into GUI_ENUM: '&d%&target_enum%&7'. Executing Transaction...");
                        
                        unset(@banking_failure);
                        unset(@banking_confirm);
                        if(%&bank_account_transact% == "-1");
                            #max_slot = findItemContainer(false,"SLOT: %#max_find_slot%","NAME: %&max_find_name%","MCID: %&max_find_item%");
                            if(%#max_slot% != -1);
                                #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                                coins_transacted   = containerClick(%#max_slot%,%#recursive_timeout%,%#tick_wait%);
                            endif;
                        else;
                            wait("1t");
                            type(%&bank_account_transact%);
                            wait("1t");
                            localGUI("NONE");
                        endif;
                        
                        do;
                            // Check for Function Timeout
                            if(%do_timeout%);
                                func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                                if(%func_timeout%);
                                    debug_error(%debug%,%&script_debug_name%,"Function Timed Out!");
                                    break;
                                endif;
                            endif;
                            
                            wait("1t");
                        until((%@banking_failure%) || (%@banking_confirm%));
                        
                        if(%func_timeout%);
                            return_boolean = false;
                            break;
                        else;
                            debug_log(%debug%,%&script_debug_name%,"banking_failure='&4%@banking_failure%&7', banking_confirm='&a%@banking_confirm%&7'.");
                            if(%@banking_failure%);
                                debug_error(%debug%,%&script_debug_name%,"Failed Banking Action, reason: '&4%@&banking_failure_string%&7'.");
                                return_boolean = false;
                            endif;
                        endif;
                    endif;
                endif;
            next;
            
            debug_log(%debug%,%&script_debug_name%,"returning boolean '&d%return_boolean%&7'.");
            return(%return_boolean%);
        endfunction;
    // banking/index/bankingWithdraw
        // Wrapper that calls `bankingTransact()` to Deposit the specified amount of Coins.
            // Params:
                // {string} [&amount=-1]             Amount of Coins to Transact with. Can be a Metric Number, Exp. Notation Number, Formatted,
                //                                   Float, or Integer. If set to <= 0, will transact the maximum amount of Coins with the specified
                //                                   accounts.
                // {boolean} [solo_allow=true]       Whether or not to allow Transacting with the Solo Account.
                // {boolean} [coop_allow=true]       Whether or not to allow Transacting with the Coop Account, if it is available.
                // {boolean} [under_allow=true]      Whether or not to continue on with the Transaction even if the specified amount of Coins cannot be
                //                                   transacted with from the specified Accounts. Setting this to TRUE will make it so the maximum amount
                //                                   of Coins is transacted with when the specified amount cannot be done (e.g. filling up the purse as best
                //                                   as we can, or emptying it out as best as we can).
                // {number} [#timeout_sec=30]        Amount of Seconds Function can run for before Timing Out.
                // {number} [#tick_wait=20]          Amount of Ticks to wait between repeating Actions.
                // {boolean} [personal_bank=true]    Whether or not to allow the usage of the Personal Bank shortcut Item, if it is available.
            // Returns a Boolean indicating whether or not the specified [&amount] of Coins was able to be transacted using [&action] into the specified Accounts.
            // Example:
                // coins_withdrawn = bankingWithdraw("1m");
        function bankingWithdraw(&amount=-1,solo_allow=true,coop_allow=true,under_allow=true,#timeout_sec=30,#tick_wait=20,personal_bank=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/banking/index.txt:1640
            return_boolean = bankingTransact("WITHDRAW",%&amount%,%solo_allow%,%coop_allow%,%under_allow%,%#timeout_sec%,%#tick_wait%,%personal_bank%);
            return(%return_boolean%);
        endfunction;
//! @mkb-import-end