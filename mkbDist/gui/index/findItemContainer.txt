//! @mkb-import-begin
    // info/index/_matchExpressionNBT
        // Used by getItemName, getItemUUID, getItemSBID to extract a regular expression capture group from NBT Data.
            // Params:
            //      {string} <&haystack>    The string to extract the first capture group from.
            //      {string} <&expression>  The expression to test against <&haystack>, must have at least one capture group.
            //
            // Returns the first capture group's content from the <&expression> match, or an empty string if no match is found.
        function _matchExpressionNBT(&haystack,&expr);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:34
            &return_string = "";
            ifmatches(%&haystack%,%&expr%,&capture_group,1);
                &return_string = %&capture_group%;
            endif;
            return(%&return_string%);
        endfunction;
    // info/index/getItemUUID
        // Given the NBT Data of an Item, extracts the Item's UUID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item UUID from.
            //
            // Returns the Item's UUID, or an empty string if one is not found.
        function getItemUUID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:92
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"uuid:\"(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\"");
            return(%&return_string%);
        endfunction;
    // info/index/getItemSBID
        // Given the NBT Data of an Item, extracts the Item's SBID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item SBID from.
            //
            // Returns the Item's SBID, or an empty string if one is not found.
        function getItemSBID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:103
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"\bid\"?\s*:\"([A-Z_0-9:]+)\"");
            return(%&return_string%);
        endfunction;
    // info/index/getItemName
        // Given the NBT Data of an Item (and optionally it's base item), extracts the Display Name of the Item from the NBT Data.
            // Params:
            //      {string} <&nbt>         The NBT Data to extract the Name from.
            //      {string} [&item="air"]  The Item this NBT Data was collected from (only used in cases where the Item's Name cannot be found).
            //      {boolean} [strip=true]  Whether or not to strip formatting codes from the extracted Name.
            //
            // Returns the Display Name of the Item found from it's NBT Data, with formatting codes stripped if [strip] is true.
        function getItemName(&nbt,&item="air",strip=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:49
            ifmatches(%&nbt%,".*\bName\s*:\"\s*(.*?)\"",&found_name,1);
                if(%strip%);
                    &found_name = strip(%&found_name%);
                endif;
            elseif(%&item% == "air");
                &found_name = "Air";
            endif;
            return(%&found_name%);
        endfunction;
    // string/index/regexEscape
        // string/index.txt
        // Counts occurences of a given string within another string.
            // Params:
            //        <string> &source_string : The string to count occurences of &search_string in.
            //        <string> &search_string : The string to count occurences of.
            //
            // Returns the integer amount of occurences found.
        function countOccurencesInString(&source_string,&search_string);
            &script_debug_name  = "&9countOccurencesInString&7";
            debug               = false;
            ifcontains(%&source_string%,%&search_string%);
                &split_source_arr[] = split(%&search_string%,%&source_string%);
                #occurences         = arraysize(&split_source_arr[]);
                if(%#occurences% == 0); // source string exclusively held repetitions of the search string
                    #source_length = strlen(%&source_string%);
                    #search_length = strlen(%&search_string%);
                    #occurences    = %#source_length% / %#search_length%;
                endif;
            endif;
            return(%#occurences%);
        endfunction;
        
        // Checks if a string matches UUID regex.
            // Params:
            //        <string> &check_string : The string to check
            //
            // Returns a boolean.
            //
        function isStringUUID(&check_string);
            &script_debug_name = "&9isStringUUID&7";
            debug              = false;
            &split_uuid_expr   = "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$";
            &joint_uuid_expr   = "^[a-f0-9]{32}$";
            &uuid_exprs[]      = split(", ","%&split_uuid_expr%, %&joint_uuid_expr%");
            foreach(&uuid_exprs[],&uuid_expr);
                ifmatches(%&check_string%,%&uuid_expr%);
                    match_found = true;
                    break;
                endif;
            next;
            return(%match_found%);
        endfunction;
        
        // Checks if a string matches Boolean regex
            // Params:
                // {string} <&check_string>    The String to Check
            // Returns a Boolean
        function isStringBoolean(&check_string);
            &check_string_lcase = lcase(%&check_string%);
            &boolean_values[]   = split(", ","true, false, 1, 0");
            return_boolean      = arrayincludes(&boolean_values[],%&check_string_lcase%);
            return(%return_boolean%);
        endfunction;
        
        // Checks if a String is a valid Integer.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Integer.
        function isStringInteger(&check_string);
            ifmatches(%&check_string%,"^[0-9-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Float (without commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringFloat(&check_string);
            ifmatches(%&check_string%,"^[0-9-]*\.[0-9]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Float/Number (with commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Formatted Number.
        function isStringFormattedNumber(&check_string);
            ifmatches(%&check_string%,"^[\d-]+,[\d.,-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Number, coercable to a Float of some sort.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringNumber(&check_string);
            &call_functions[] = split(", ","isStringInteger, isStringFloat, isStringFormattedNumber");
            foreach(&call_functions[],&call_function,#cfi);
                if(%&call_function% == "isStringInteger");
                    return_boolean = isStringInteger(%&check_string%);
                elseif(%&call_function% == "isStringFloat");
                    return_boolean = isStringFloat(%&check_string%);
                elseif(%&call_function% == "isStringFormattedNumber");
                    return_boolean = isStringFormattedNumber(%&check_string%);
                endif;
                if(%return_boolean%);
                    break;
                endif;
            next;
            return(%return_boolean%);
        endfunction;
        
        // Coerces a given String to a Number (no decimal points).
            // Params:
                // {string} <&convert_string>    The String to Convert.
                // {number} [#precision=0]       Decimal Precision
            // Returns the Number result of the coercion.
        function stringToNumber(&convert_string,#precision=0);
            #convert_number = coerceNumber(%&convert_string%);
            return(%#convert_number%);
        endfunction;
        
        function isStringBoolean(&check_string);
            if(%&check_string% == "");
                return_boolean = true;
            else;
                &boolean_coercable[] = split(", ","0, 1, true, false, True, False");
                #boolean_index       = indexof(&boolean_coercable[],,%&check_string%);
                return_boolean       = %#boolean_index% != -1;
            endif;
            return(%return_boolean%);
        endfunction;
        
        function stringToBoolean(&convert_string);
            is_coercable = isStringBoolean(%&convert_string%);
            if(%is_coercable%);
                return_boolean := %&convert_string%;
            elseifmatches(%&convert_string%,"\S");
                return_boolean  = true;
            else;
                return_boolean  = false;
            endif;
            return(%return_boolean%);
        endfunction;
        
        function regexEscape(&input_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:141
            &split_array[]  = split("\\",%&input_string%);
            foreach(&split_array[],&curr_char,#curr_index);
                if(%&curr_char% == "\\");
                    #last_index = #curr_index - 1;
                    #next_index = #curr_index + 1;
                    &last_char  = %&split_array[%#last_index%]%;
                    &next_char  = %&split_array[%#next_index%]%;
                    
                    // If this backslash is escaped already (last char == '\'), then we do not need to escape this char.
                    // If the backslash is escaping another backslash (next char == '\'), then we do not need to escape this char.
                    if((%&last_char% != "\\") && (%&next_char% != "\\"));
                        &rejoin_array[] = "\\";
                    endif;
                    &rejoin_array[] = %&curr_char%;
                else;
                    &rejoin_array[] = %&curr_char%;
                endif;
            next;
            &rejoint_string = join("",&rejoin_array[]);
            &search_string  = "(?<!\\\\)(?:\+|\*|\?|\^|\$|\.|\[|\]|\{|\}|\(|\)|\||\/)";
            &escaped_string = regexreplace(&rejoint_string,%&search_string%,"\\\$0");
            return(%&escaped_string%);
        endfunction;
    // debug/index/debug_log
        // Logs a message to chat if debug is enabled.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_log(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:30
            // &matcher     = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement = "&$1";
            // &string      = regexreplace(&string,%&matcher%,%&replacement%);
            &out_string  = "&7%&script_debug_name%&7: %&string%";
            if(%debug_enabled%);
                log(%&out_string%);
            endif;
            return(%&out_string%);
        endfunction;
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/xEval
        // Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&expression>              The arithmetic expression to evaluate with `eval`.
                // {boolean} [coerce_integer=false]    If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
            // Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
        function xEval(&expression,coerce_integer=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:276
            debug              = false;
            &script_debug_name = "&9xEval&7";
            debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
            &return_string     = eval(%&expression%);
            debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
            &return_string     = convertENote(%&return_string%);
            debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
            if(%coerce_integer%);
                debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
                &return_string = formatnumber(%&return_string%,0,true);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
            return(%&return_string%);
        endfunction;
    // misc/index/miscValidate
        // Validates that <&search_term> is found in the <&array[]>, and/or if it is not found in the <&array[]>, the value of the element
        // found at [#default_idx=0] is returned. Set [#default_idx] to -1 to indicate that no default value should be used.
            // Params:
            //      {array} <&elements[]>       The Array to search for <&search_term> in.
            //      {string} <&search_term>     The Search Term to check if exists in <&elements[]>.
            //      {number} [#default_idx=0]   The Index of the Element in <&elements[]> to use as the default return value
            //                                  if <&search_term> is not found within the Array. If -1, will be taken as no default
            //                                  value should be used.
            //
            // Returns the element from the <&elements[]> Array that <&search_term> matches, or if no match was found and [#default_idx]
            // is not -1, the element at [#default_idx] in the <&elements[]> Array. If [#default_idx] is -1, an empty string is returned.
        function miscValidate(&search_term,#default_idx=0,...&elements[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:12
            #term_index = indexof(&elements[],,%&search_term%);
            if(%#term_index% != -1);
                &return_string = %&elements[%#term_index%]%;
            elseif(%#default_idx% != -1);
                &return_string = %&elements[%#default_idx%]%;
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/coerceNumber
        // Coerces an input number string into a valid integer. The input number string can be in E Notation, or contain
        // commas, or contain decimal values, or any mix of the above.
            // Params:
                // {string} <&number_string>                The Number String to Convert into a valid Integer.
                // {string} [&rounding_strategy="ROUND"]    String ENUM that dictates how to handle decimal values. Valid values are:
                //                                          FLOOR (towards negative infinity), CEILING|CEIL (towards positive infinity),
                //                                          TRUNCATE|TRUNC (rounds up or down towards 0), ROUND (towards nearest integer).
                //                                          Defaults to ROUND if omitted or an invalid input is provided.
            // Returns the Number coerced into a valid Integer (real-integer type, not string type. If the input string is not
            // coercable at all, 0 will be returned). If the final value before coercion to integer contains decimals, the coerced value
            // will be rounded according to the [&rounding_strategy] parameter.
            // Example:
                //    Converting a comma split, float string into an Integer
                    //    &number_string     = "100,000.9171";
                    //    &rounding_strategy = "ROUND";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
                    //    log("#number_integer: %#number_integer%"); // '#number_integer: 100001'
                //    Replace the content in the Parameters as needed:
                    //    &number_string     = "Can contain commas, decimals, e. notation, or mix of all three.";
                    //    &rounding_strategy = "One of: FLOOR, CEILING|CEIL, TRUNCATE|TRUNC, ROUND, or empty string.";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
        function coerceNumber(&number_string,&rounding_strategy="ROUND");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:343
            &number_string = replace(&number_string,",");
            &number_string = convertENote(%&number_string%);
            ifcontains(%&number_string%,".");
                &rounding_strategy = miscValidate(%&rounding_strategy%,0,"ROUND","FLOOR","CEILING","CEIL","TRUNCATE","TRUNC");
                if(%&rounding_strategy% == "ROUND");
                    // Round the decimal value to the nearest integer.
                    &return_string = formatnumber(%&number_string%,0,true);
                elseif((%&rounding_strategy% == "TRUNCATE") || (%&rounding_strategy% == "TRUNC"));
                    // Exclude the decimal value entirely.
                    &return_string = regexreplace(&number_string,"\.\d*$");
                else;
                    // Use xEval to evaluate the number_string with the corresponding rounding_term. Instruct
                    // xEval to coerce the value into an integer for us, so any trailing ".0" is stripped from it's
                    // return value.
                    if((%&rounding_strategy% == "CEILING") || (%&rounding_strategy% == "CEIL"));
                        &rounding_term = "ceil";
                    elseif(%&rounding_strategy% == "FLOOR");
                        &rounding_term = "floor";
                    endif;
                    &return_string = xEval("%&rounding_term%(%&number_string%)",true);
                endif;
            else;
                // The Number does not contain a decimal value to begin with, return as usual.
                &return_string = %&number_string%;
            endif;
            return(%&return_string%);
        endfunction;
    // gui/index/findItemContainer
        // Given any (or all, or any mix of) an Item's MCID, Name, SBID, and/or UUID, finds the Item in the Container and returns it's Slot.
            // Params:
                // {string} [...&filter_params[]]    An Array of Strings in format: [<PARAM_ENUM>: <FILTER>], where PARAM_ENUM can be any of:
                //                                   MCID|ITEM, DATA, STACK, NAME, SBID, NBT, or UUID. <FILTER> can be a Regular Expression or an Exact String.
                //                                   If Passing an Expression, prefix the Filter with 'r$'. All characters following the 'r$' will be used
                //                                   as the Expression.
                // {boolean} [return_arr=false]      If set to True, will return an Array of Slots matching the specified Filters. If set to False, will
                //                                   return the first Slot ID found that matches the Filters.
            // Returns the Slot ID(s) of the Item(s) found, or -1 if no Item(s) could be found. Will return -1 if CONTAINERSLOTS <= 0.
        function findItemContainer(return_arr=false,...&filter_params[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:1092
            #return_val = -1;
            
            // Setup Filter Parameters
            if(true);
                &valid_enums[] = split(", ","MCID, ITEM, DATA, STACK, NAME, SBID, UUID, NBT, SLOT");
                foreach(&filter_params[],&filter_param,#fpi);
                    ifmatches(%&filter_param%,"^(.+?):\s*(.+)$");
                        match(%&filter_param%,"^(.+?):\s*(.+)$",{&param_enum,&param_filter});
                        #enum_index = indexof(&valid_enums[],,%&param_enum%);
                        if(%#enum_index% != -1);
                            &param_enum = %&valid_enums[%#enum_index%]%;
                            if(%&param_enum% == "SLOT");
                                #prioritize_slot   = coerceNumber(%&param_filter%);
                                #prioritized_index = indexof(#prioritized_slots[],,%#prioritize_slot%);
                                if(%#prioritized_index% == -1);
                                    #prioritized_slots[] = %#prioritize_slot%;
                                endif;
                            else;
                                if(%&param_enum% == "ITEM");
                                    &param_enum = "MCID";
                                endif;
                                
                                ifmatches(%&param_filter%,"^r\$(.+)",&param_expression,1);
                                    &param_filter = %&param_expression%;
                                else;
                                    &param_filter = regexEscape(%&param_filter%);
                                    &param_filter = "^%&param_filter%$";
                                endif;
                                
                                &enum_array = lcase("&%&param_enum%_regex[]");
                                &enum_bool  = lcase("do_%&param_enum%");
                                push(%&enum_array%,%&param_filter%);
                                set(%&enum_bool%);
                            endif;
                        endif;
                    endif;
                next;
                
                foreach(&valid_enums[],&valid_enum);
                    if((%&valid_enum% != "SLOT") && (&valid_enum% != "ITEM"));
                        &enum_bool = lcase("do_%&valid_enum%");
                        enum_bool := "%%&enum_bool%%";
                        if(%enum_bool%);
                            &enum_array = lcase("&%&valid_enum%_regex[]");
                            &enum_value = join("|",%&enum_array%);
                            &enum_value = "(?:%&enum_value%)";
                            &enum_regex = lcase("&%&valid_enum%_regex");
                            set(%&enum_regex%,%&enum_value%);
                        endif;
                    endif;
                next;
                
                //    Array Name        |    Boolean Name    |    Regex String
                //    &mcid_regex[]     |    do_mcid         |    &mcid_regex
                //    &data_regex[]     |    do_data         |    &data_regex
                //    &stack_regex[]    |    do_stack        |    &stack_regex
                //    &name_regex[]     |    do_name         |    &name_regex
                //    &sbid_regex[]     |    do_sbid         |    &sbid_regex
                //    &uuid_regex[]     |    do_uuid         |    &uuid_regex
                //    &nbt_regex[]      |    do_nbt          |    &nbt_regex
            endif;
            
            // Iterate over Inventory Slots
            if(%CONTAINERSLOTS% >= 1);
                #r_start            = 0;
                #r_end              = %CONTAINERSLOTS% - 37;
                &r_filter[]         = split(", ","mcid, data, stack, name, sbid, uuid, nbt");
                
                #prioritize_slot_sz = arraysize(#prioritize_slot[]);
                if(%#prioritize_slot_sz% >= 1);
                    foreach(#prioritize_slot[],#prioritize_slot,#ps);
                        &f_mcid = getslotitemnbt(%#prioritize_slot%,,&f_stack,&f_data,&f_nbt);
                        &f_nbt  = strip(%&f_nbt%);
                        f_valid = true;
                        foreach(&r_filter[],&r_term,#rti);
                            &f_bool  = "do_%&r_term%";
                            f_bool  := "%%&f_bool%%";
                            if(%f_bool%);
                                if(%#rti% >= 3);
                                    if(%&r_term% == "name");
                                        &f_value = getItemName(%&f_nbt%,%&f_mcid%);
                                    elseif(%&r_term% == "sbid");
                                        &f_value = getItemSBID(%&f_nbt%);
                                    elseif(%&r_term% == "uuid");
                                        &f_value = getItemUUID(%&f_nbt%);
                                    elseif(%&r_term% == "nbt");
                                        &f_value = %&f_nbt%;
                                    endif;
                                else;
                                    &f_value = "&f_%&r_term%";
                                    &f_value = "%%&f_value%%";
                                endif;
                                &f_regex = "&%&r_term%_regex";
                                &f_regex = "%%&f_regex%%";
                                ifnotmatches(%&f_value%,%&f_regex%);
                                    // log("Term %&r_term% > No match between value %&f_value% and expression %&f_regex%");
                                    f_valid = false;
                                    break;
                                endif;
                            endif;
                        next;
                        
                        if(%f_valid%);
                            if(!%return_arr%);
                                #return_val = %#f_slot%;
                                break;
                            endif;
                            #return_val[] = %#f_slot%;
                        endif;
                    next;
                endif;
                for(#f_slot,%#r_start%,%#r_end%);
                    &f_mcid = getslotitemnbt(%#f_slot%,,&f_stack,&f_data,&f_nbt);
                    &f_nbt  = strip(%&f_nbt%);
                    f_valid = true;
                    foreach(&r_filter[],&r_term,#rti);
                        &f_bool  = "do_%&r_term%";
                        f_bool  := "%%&f_bool%%";
                        if(%f_bool%);
                            if(%#rti% >= 3);
                                if(%&r_term% == "name");
                                    &f_value = getItemName(%&f_nbt%,%&f_mcid%);
                                elseif(%&r_term% == "sbid");
                                    &f_value = getItemSBID(%&f_nbt%);
                                elseif(%&r_term% == "uuid");
                                    &f_value = getItemUUID(%&f_nbt%);
                                elseif(%&r_term% == "nbt");
                                    &f_value = %&f_nbt%;
                                endif;
                            else;
                                &f_value = "&f_%&r_term%";
                                &f_value = "%%&f_value%%";
                            endif;
                            &f_regex = "&%&r_term%_regex";
                            &f_regex = "%%&f_regex%%";
                            ifnotmatches(%&f_value%,%&f_regex%);
                                // log("Term %&r_term% > No match between value %&f_value% and expression %&f_regex%");
                                f_valid = false;
                                break;
                            endif;
                        endif;
                    next;
                    
                    if(%f_valid%);
                        if(!%return_arr%);
                            #return_val = %#f_slot%;
                            break;
                        elseif(%#prioritize_slot_sz% <= 0);
                            #return_val[] = %#f_slot%;
                        else;
                            #return_index = indexof(#return_val[],,%#f_slot%);
                            if(%#return_index% == -1);
                                #return_val[] = %#f_slot%;
                            endif;
                        endif;
                    endif;
                next;
            endif;
            
            if(%return_arr%);
                #return_val_sz = arraysize(#return_val[]);
                if(%#return_val_sz% == 0);
                    #return_val[] = -1;
                endif;
                return(#return_val[]);
            endif;
            return(%#return_val%);
        endfunction;
//! @mkb-import-end