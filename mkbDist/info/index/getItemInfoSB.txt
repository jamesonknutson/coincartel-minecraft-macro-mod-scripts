//! @mkb-import-begin
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/xJsonGet
        // Identical to original `jsonget`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&string_a>    The Key to get in the JSON Object, or the JSON Object itself.
                // {string} <&string_b> The Key to get in the JSON Object, or the JSON Object itself. Must be the other value compared to <&string_a>
            // Returns the value provided by `jsonget`, processed thru `convertENote`. Identical results, only difference is preservation of silently coerced Numbers.
        function xJsonGet(&string_a,&string_b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:265
            &return_string = jsonget(%&string_a%,%&string_b%);
            &return_string = convertENote(%&return_string%);
            return(%&return_string%);
        endfunction;
    // info/index/getItemInfoSB
        // Given an Item's Display Name or SBID, looks it up in the global arrays @&sb_datamap_item_names[] and/or
        // @&sb_datamap_item_sbids[], then returns the Data found at that index accordingly.
            // Params:
                //    {string}     <&search_term>               The Item's Display Name or SBID to search for.
                //    {boolean}    [return_collection=false]    Whether or not to append Collection information to the returned Array.
                //
            // Returns an Array -- first element will be -1 if no match was found.
                //    0    {string}     &found_name        The Display Name of the Item found
                //    1    {string}     &found_sbid        The SBID of the Item found
                //    2    {string}     &found_mcid        The MCID of the Item found
                //    3    {number}     #found_data        The Data value of the Item found (0 = no data).
                //    4    {number}     #found_sell        The Sell Price of the Item found (0 = not sellable).
                //    5    {number}     #found_stack       The maximum stack size of the Item found
                //    6    {string}     &found_tier        The Tier of this Item ("" = no Tier, valid strings = COMMON, UNCOMMON, RARE, EPIC, LEGENDARY, MYTHIC, SPECIAL)
                //    7    {string}     &found_category    The Category of this Item ("" = no Category, valid strings = ACCESSORY, ARROW, ARROW_POISON, AXE, BAIT, BOOTS,
                //                                         BOW, CHESTPLATE, COSMETIC, DRILL, DUNGEON_PASS, FISHING_ROD, FISHING_WEAPON, GAUNTLET, HELMET, HOE, LEGGINGS,
                //                                         PET_ITEM, PICKAXE, REFORGE_STONE, SHEARS, SPADE, SWORD, TRAVEL_SCROLL, WAND).
                //    8    {boolean}    found_bazaar       Whether or not the Item is available for trading on Bazaar.
                //
                //
                // The following elements will also be returned if [return_collection] is set to True.
                    //    9     {boolean}    has_collection         Whether or not the Item belongs to a Collection
                    //    10    {string}     &collection_name       The Name of the Collection this Item belongs to ("NULL" = no collection).
                    //    11    {string}     &collection_cmdname    The Command String (used in /viewcollection <&collection_cmdname>) to directly enter this Collection.
                    //                                              "NULL" = no collection.
                    //    12    {string}     &collection_sbid       The SBID of the Base Item in this Collection.
                    //    13    {number}     #collection_tier       The Tier of the Collection this Item belongs to (0 = no collection).
                    //    14    {number}     #collection_amt        The Amount of Items required to have been Collected in order for this Item to be unlocked.
                    //                                              0 = no collection.
            // Example:
                // Without Collection Appended
                    //    &item_data[]    = getItemInfoSB("ENCHANTED_DIAMOND_BLOCK");
                    //    &found_name     = %&item_data[0]%;
                    //    &found_sbid     = %&item_data[1]%;
                    //    &found_mcid     = %&item_data[2]%;
                    //    #found_data    := %&item_data[3]%;
                    //    #found_sell    := %&item_data[4]%;
                    //    #found_stack   := %&item_data[5]%;
                    //    &found_tier     = %&item_data[6]%;
                    //    &found_category = %&item_data[7]%;
                    //    found_bazaar   := %&item_data[8]%;
                // With Collection Appended
                    //    &item_data[]        = getItemInfoSB("ENCHANTED_DIAMOND_BLOCK",true);
                    //    &found_name         = %&item_data[0]%;
                    //    &found_sbid         = %&item_data[1]%;
                    //    &found_mcid         = %&item_data[2]%;
                    //    #found_data        := %&item_data[3]%;
                    //    #found_sell        := %&item_data[4]%;
                    //    #found_stack       := %&item_data[5]%;
                    //    &found_tier         = %&item_data[6]%;
                    //    &found_category     = %&item_data[7]%;
                    //    found_bazaar       := %&item_data[8]%;
                    //    has_collection     := %&item_data[9]%;
                    //    &collection_name    = %&item_data[10]%;
                    //    &collection_cmdname = %&item_data[11]%;
                    //    &collection_sbid    = %&item_data[12]%;
                    //    #collection_tier   := %&item_data[13]%;
                    //    #collection_amt    := %&item_data[14]%;
        function getItemInfoSB(&search_term,return_collection=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:167
            // Find the Index of the Data we are retrieving.
            if(true);
                #name_index = indexof(@&sb_datamap_item_names[],,%&search_term%);
                #sbid_index = indexof(@&sb_datamap_item_sbids[],,%&search_term%);
                if((#name_index == -1) && (#sbid_index == -1));
                    &return_array[] = "-1";
                    return(&return_array[]);
                elseif(%#sbid_index% != -1);
                    #use_index = %#sbid_index%;
                elseif(%#name_index% != -1);
                    #use_index = %#name_index%;
                endif;
            endif;
            
            // Extract Data from the JSON Element located at the found Index.
            if(true);
                &found_json      = %@&sb_datamap_item_jsons[%#use_index%]%;
                &return_array[0] = jsonget("name",%&found_json%);
                &return_array[1] = jsonget("sbid",%&found_json%);
                &return_array[2] = jsonget("mcid",%&found_json%);
                &return_array[3] = jsonget("data",%&found_json%);
                &return_array[4] = xJsonGet("sellPrice",%&found_json%);
                &return_array[5] = jsonget("maxStack",%&found_json%);
                &return_array[6] = jsonget("tier",%&found_json%);
                &return_array[7] = jsonget("category",%&found_json%);
                &return_array[8] = jsonget("onBazaar",%&found_json%);
                if(%return_collection%);
                    &collection_json = jsonget("collection",%&found_json%);
                    has_collection   = jsonget("hasCollection",%&collection_json%);
                    &return_array[9] = %has_collection%;
                    if(%has_collection%);
                        &collection_name  = jsonget("name",%&collection_json%);
                        &return_array[10]  = %&collection_name%;
                        #coll_ext_index   = indexof(@&sb_datamap_collection_names[],,%&collection_name%);
                        &coll_ext_json    = %@&sb_datamap_collection_jsons[%#coll_ext_index%]%;
                        &return_array[11]  = jsonget("cmdName",%&coll_ext_json%);
                        &return_array[12] = jsonget("sbid",%&coll_ext_json%);
                        #collection_tier  = jsonget("tier",%&collection_json%);
                        #collection_idx   = %#collection_tier% - 1;
                        &return_array[13] = %#collection_tier%;
                        &return_array[14] = xJsonGet("tiers.%#collection_idx%.amountRequired",%&coll_ext_json%);
                        return(&return_array[]);
                    endif;
                    &return_array[10]  = "NULL";
                    &return_array[11] = "NULL";
                    &return_array[12] = "NULL";
                    &return_array[13] = "0";
                    &return_array[14] = "0";
                    return(&return_array[]);
                endif;
                return(&return_array[]);
            endif;
        endfunction;
//! @mkb-import-end