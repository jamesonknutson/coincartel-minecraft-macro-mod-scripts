//! @mkb-import-begin
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // debug/index/debug_log
        // Logs a message to chat if debug is enabled.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_log(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:30
            // &matcher     = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement = "&$1";
            // &string      = regexreplace(&string,%&matcher%,%&replacement%);
            &out_string  = "&7%&script_debug_name%&7: %&string%";
            if(%debug_enabled%);
                log(%&out_string%);
            endif;
            return(%&out_string%);
        endfunction;
    // string/index/xEval
        // Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&expression>              The arithmetic expression to evaluate with `eval`.
                // {boolean} [coerce_integer=false]    If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
            // Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
        function xEval(&expression,coerce_integer=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:276
            debug              = false;
            &script_debug_name = "&9xEval&7";
            debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
            &return_string     = eval(%&expression%);
            debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
            &return_string     = convertENote(%&return_string%);
            debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
            if(%coerce_integer%);
                debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
                &return_string = formatnumber(%&return_string%,0,true);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
            return(%&return_string%);
        endfunction;
    // string/index/calcLevenDist
        // Calculates the 'Levenshtein Distance' between two Strings (the amount of character transformations required to
        // convert one string to the other, a lower value means the two Strings are more alike).
            // Params:
                // {string} <&string_a>    A string to calculate the distance between the other String Parameter in this Function.
                // {string} <&string_b>    A string to calculate the distance between the other String Parameter in this Function.
                // {number} [#max=-1]      An optional maximum limit to the Levenshtein Distance calculate to. If provided, this Function
                //                         will exit and return this maximum figure early, if it is ever detected that the minimum Edit Distance
                //                         between these two strings is this figure.
            // Returns a Number >= 0.
            // Example:
                //    #edit_distance = calcLevenDist("CAT","DOG"); // 3
                //    #edit_distance = calcLevenDist("FOOBAR","FOO"); // 3
        function calcLevenDist(&string_a,&string_b,#max=-1);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:616
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&5calcLevenDist&7";
            endif;
            
            &chars_a[] = split("",%&string_a%);
            #length_a  = strlen(%&string_a%);
            &chars_b[] = split("",%&string_b%);
            #length_b  = strlen(%&string_b%);
            #max_int   = 2000000000;
            
            // debug_log(%debug%,%&script_debug_name%,"&&string_a='&e%&string_a%&7', &&string_b='&e%&string_b%&7', #length_a=&e%#length_a%&7, #length_b=&e%#length_b%&7.");
            if(%#max% <= -1);
                // debug_log(%debug%,%&script_debug_name%,"set max from #max=&e%#max%&7 to #max_int=&e%#max_int%&7 since #max <= -1");
                #max = %#max_int%;
            endif;
            
            if((%#length_a% == 0) || (%#length_b% == 0));
                #max = %#max% + 1;
                if((%#length_a% <= %#length_b%) && (%#length_a% <= %#max%));
                    #edit_dist = %#length_a%;
                elseif((%#length_b% <= %#length_a%) && (%#length_b% <= %#max%));
                    #edit_dist = %#length_b%;
                else;
                    #edit_dist = %#max%;
                endif;
                
                // debug_log(%debug%,%&script_debug_name%,"min of #length_a=&e%#length_a%&7, #length_b=&e%#length_b%&7, #max=&e%#max%&7 is #edit_dist=&a%#edit_dist%&7. Returning this.");
                return(%#edit_dist%);
            endif;
            
            #abs_diff = xEval("sqrt((%#length_a% - %#length_b%)^2)",true);
            if(%#abs_diff% > %#max%);
                #edit_dist = %#max% + 1;
                // debug_log(%debug%,%&script_debug_name%,"#abs_diff=&e%#abs_diff%&7 (from abs(#length_a=&e%#length_a%&7 - #length_b=&e%#length_b%&7)), returning #max=&e%#max%+1&7 (#edit_dist=&a%#edit_dist%&7).");
                return(%#edit_dist%);
            endif;
            
            
            for(#i,0,%#length_b%);
                set("&matrix_%#i%_0",%#i%);
                // debug_log(%debug%,%&script_debug_name%,"set &&matrix_%#i%_0=&e%#i%");
            next;
            
            for(#j,0,%#length_a%);
                set("&matrix_0_%#j%",%#j%);
                // debug_log(%debug%,%&script_debug_name%,"set &&matrix_0_%#j%=&e%#j%");
            next;
            
            for(#i,1,%#length_b%);
                #col_min = %#max_int%;
                #min_j   = 1;
                if(%#i% > %#max%);
                    #new_j = %#max% + %#i%;
                    // debug_log(%debug%,%&script_debug_name%,"overrode #min_j=&e%#min_j%&7 to #max=&e%#max%&7 + #i=&e%#i%&7 (&e%#new_j%&7)");
                    #min_j = %#new_j%;
                endif;
                
                #max_j   = %#length_b% + 1;
                #max_j_t = %#max% + %#i%;
                if(%#max_j% > %#max_j_t%);
                    // debug_log(%debug%,%&script_debug_name%,"overrode #max_j=&e%#max_j%&7 to #max_j_t=&e%#max_j_t%&7.");
                    #max_j = %#max_j_t%;
                endif;
                
                for(#j,1,%#length_a%);
                    &matrix_ptr = "&matrix_%#i%_%#j%";
                    
                    if((%#j% < %#min_j%) || (%#j% > %#max_j%));
                        set(%&matrix_ptr%,%#max_j_t%)
                        // debug_log(%debug%,%&script_debug_name%,"set &%&matrix_ptr%=&e%#max_j_t%&7 (#j=&e%#j%&7 < #min_j=&e%#min_j%&7 or #j=&e%#j%&7 > #max_j=&e%#max_j%&7)");
                    else;
                        #index_b = %#i% - 1;
                        #index_a = %#j% - 1;
                        &char_b  = %&chars_b[%#index_b%]%;
                        &char_a  = %&chars_a[%#index_a%]%;
                        // debug_log(%debug%,%&script_debug_name%,"#index_a=&e%#index_a%&7, #index_b=&e%#index_b%&7, &char_b='&e%&char_b%'&7, &char_a='&e%&char_a%&7'");
                        if(%&chars_b[%#index_b%]% == %&chars_a[%#index_a%]%);
                            &matrix_ptr_same  = "&matrix_%#index_b%_%#index_a%";
                            #matrix_val_same := %%&matrix_ptr_same%%;
                            set(%&matrix_ptr%,%#matrix_val_same%);
                            // debug_log(%debug%,%&script_debug_name%,"set &%&matrix_ptr%=&e%#matrix_val_same%&7 (from &&matrix_ptr_same='&e%&matrix_ptr_same%&7')");
                        else;
                            &dist_sub  = "&matrix_%#index_b%_%#index_a%";
                            #dist_sub := %%&dist_sub%%;
                            #dist_sub  = %#dist_sub% + 1;
                            
                            &dist_ins  = "&matrix_%#i%_%#index_a%";
                            #dist_ins := %%&dist_ins%%;
                            #dist_ins  = %#dist_ins% + 1;
                            
                            &dist_del  = "&matrix_%#index_b%_%#j%";
                            #dist_del := %%&dist_del%%;
                            #dist_del  = %#dist_del% + 1;
                            
                            #dist_ins_del = %#dist_ins%;
                            if(%#dist_del% < %#dist_ins%);
                                #dist_ins_del = %#dist_del%;
                            endif;
                            
                            // debug_log(%debug%,%&script_debug_name%,"min value of #dist_ins=&e%#dist_ins%&7, #dist_del=&e%#dist_del%&7 was #dist_ins_del=&c%#dist_ins_del%&7.");
                            
                            #dist_sub_del = %#dist_sub%;
                            if(%#dist_ins_del% < %#dist_sub%);
                                #dist_sub_del = %#dist_ins_del%;
                            endif;
                            
                            // debug_log(%debug%,%&script_debug_name%,"min value of #dist_ins_del=&e%#dist_ins_del%&7, #dist_sub=&e%#dist_sub%&7 was #dist_sub_del=&c%#dist_sub_del%&7.");
                            set(%&matrix_ptr%,%#dist_sub_del%);
                            // debug_log(%debug%,%&script_debug_name%,"set &%&matrix_ptr%=&e%#dist_sub_del%&7 (#dist_sub_del)");
                        endif;
                    endif;
                    
                    #matrix_val := %%&matrix_ptr%%;
                    if(%#matrix_val% < %#col_min%);
                        // debug_log(%debug%,%&script_debug_name%,"#matrix_val=&e%#matrix_val%&7 < #col_min=&e%#col_min%&7, setting #col_min to be #matrix_val");
                        #col_min = %#matrix_val%;
                    endif;
                next;
                
                if(%#col_min% > %#max%);
                    #edit_dist = %#max% + 1;
                    // debug_log(%debug%,%&script_debug_name%,"#col_min=&e%#col_min%&7 > #max=&e%#max%&7, returning #max=&e%#max%+1&7 (#edit_dist=&e%#edit_dist%&7)");
                    return(%#edit_dist%);
                endif;
            next;
            
            &edit_dist_ptr  = "&matrix_%#length_b%_%#length_a%";
            #edit_dist     := %%&edit_dist_ptr%%;
            // debug_log(%debug%,%&script_debug_name%,"&edit_dist_ptr='&e%&edit_dist_ptr%&7', #edit_dist=&e%#edit_dist%&7, returning this number");
            return(%#edit_dist%);
        endfunction;
//! @mkb-import-end