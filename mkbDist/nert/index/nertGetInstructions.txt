//! @mkb-import-begin
    // debug/index/debug_log
        // Logs a message to chat if debug is enabled.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_log(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:30
            // &matcher     = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement = "&$1";
            // &string      = regexreplace(&string,%&matcher%,%&replacement%);
            &out_string  = "&7%&script_debug_name%&7: %&string%";
            if(%debug_enabled%);
                log(%&out_string%);
            endif;
            return(%&out_string%);
        endfunction;
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/xEval
        // Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&expression>              The arithmetic expression to evaluate with `eval`.
                // {boolean} [coerce_integer=false]    If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
            // Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
        function xEval(&expression,coerce_integer=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:276
            debug              = false;
            &script_debug_name = "&9xEval&7";
            debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
            &return_string     = eval(%&expression%);
            debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
            &return_string     = convertENote(%&return_string%);
            debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
            if(%coerce_integer%);
                debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
                &return_string = formatnumber(%&return_string%,0,true);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
            return(%&return_string%);
        endfunction;
    // string/index/xJsonGet
        // Identical to original `jsonget`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&string_a>    The Key to get in the JSON Object, or the JSON Object itself.
                // {string} <&string_b> The Key to get in the JSON Object, or the JSON Object itself. Must be the other value compared to <&string_a>
            // Returns the value provided by `jsonget`, processed thru `convertENote`. Identical results, only difference is preservation of silently coerced Numbers.
        function xJsonGet(&string_a,&string_b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:265
            &return_string = jsonget(%&string_a%,%&string_b%);
            &return_string = convertENote(%&return_string%);
            return(%&return_string%);
        endfunction;
    // nert/index/nertGetInstructions
        // Gets the latest Instructions from Nert's API.
        // Params: None
        // Returns an Array:
            // 0 {boolean} nert_success       Whether or not the request was successful
            // 1 {number}  #nert_resp_code    The HTTP Response Code of the request
            // 2 {string}  &nert_resp_body    The raw Response Body of the request
            // 3 {number}  #nert_next_time    The timestamp of when we should next send a request to the API to get updated
            //                                flip instructions
            // 4 {number}  #nert_flip_data    The amount of Flip Instruction Objects that are attached to this Array.
            // X {string}  &nert_flip_data    JSON Flip Instruction Objects. Only provided if #nert_flip_data >= 1.
        // Example
            // &nert_instructions[]  = nertGetInstructions();
            // nert_success         := %&nert_instructions[0]%;
            // #nert_resp_code      := %&nert_instructions[1]%;
            // &nert_resp_body       = %&nert_instructions[2]%;
            // #nert_next_time      := %&nert_instructions[3]%;
            // #nert_flip_data      := %&nert_instructions[4]%;
        function nertGetInstructions();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/nert/index.txt:26
            debug              = true;
            &script_debug_name = "&dnertGetInstructions&7";
            
            setrequestheader("User-Agent","Minecraft/%UUID%");
            setrequestheader("Content-Type","application/json");
            setrequestheader("Cache-Control","no-cache");
            &api_url         = "http://74.207.242.113:5000/algorithm/allFlips";
            &nert_resp_body  = httpget(%&api_url%,,#nert_resp_code);
            &log_path        = "Z:/MMC/MultiMC/instances/New Mods Testing/.minecraft/liteconfig/common/macros/logs/nertRequests/%TIMESTAMP%-request.txt";
            &master_log_path = "Z:/MMC/MultiMC/instances/New Mods Testing/.minecraft/liteconfig/common/macros/logs/nertRequests/latest-request.txt";
            nert_success     = #nert_resp_code == 200;
            if(#nert_resp_code == 200);
                &nert_next_time    = xJsonGet("timeToNextUpdate",%&nert_resp_body%);
                #nert_next_time    = xEval("ceil(%&nert_next_time% / 1000)",true);
                &selected_flips    = jsonget("selectedFlips",%&nert_resp_body%);
                &selected_flips[]  = getjsonasarray(%&selected_flips%);
                #selected_flips_sz = arraysize(&selected_flips[]);
                #selected_flips_sz = %#selected_flips_sz% - 1;
                if(%#selected_flips_sz% > 0);
                    for(#i,1,%#selected_flips_sz%);
                        debug_log(%debug%,%&script_debug_name%,"(%#i%/%#selected_flips_sz%): pushing instruction: '&d%&selected_flips[%#i%]%&7'.");
                        &instructions[] = %&selected_flips[%#i%]%;
                    next;
                else;
                    debug_log(%debug%,%&script_debug_name%,"no instructions received from API this time.");
                endif;
            endif;
            
            #instructions_sz = arraysize(&instructions[]);
            &return_array[]  = %nert_success%;
            &return_array[]  = %#nert_resp_code%;
            &return_array[]  = %&nert_resp_body%;
            &return_array[]  = %#nert_next_time%;
            &return_array[]  = %#instructions_sz%;
            if(%#instructions_sz% >= 1);
                push(&return_array[],&instructions[*]);
            endif;
            
            &write_lines[] = "nert_success: %nert_success%";
            &write_lines[] = "#nert_resp_code: %#nert_resp_code%";
            &write_lines[] = "#nert_next_time: %#nert_next_time%";
            &write_lines[] = "#instructions_sz: %#instructions_sz%";
            &write_lines[] = "";
            &write_lines[] = "%&nert_resp_body%";
            &file_path     = writefile(%&log_path%,&write_lines[],false);
            &file_path     = writefile(%&master_log_path%,&write_lines[],false);
            setclipboard(%&log_path%);
            debug_log(%debug%,%&script_debug_name%,"logged request variables to: '&d%&log_path%&7' (on clipboard)");
            return(&return_array[]);
        endfunction;
//! @mkb-import-end