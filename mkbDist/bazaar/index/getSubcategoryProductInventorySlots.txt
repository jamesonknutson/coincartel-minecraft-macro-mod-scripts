//! @mkb-import-begin
    // info/index/_matchExpressionNBT
        // Used by getItemName, getItemUUID, getItemSBID to extract a regular expression capture group from NBT Data.
            // Params:
            //      {string} <&haystack>    The string to extract the first capture group from.
            //      {string} <&expression>  The expression to test against <&haystack>, must have at least one capture group.
            //
            // Returns the first capture group's content from the <&expression> match, or an empty string if no match is found.
        function _matchExpressionNBT(&haystack,&expr);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:34
            &return_string = "";
            ifmatches(%&haystack%,%&expr%,&capture_group,1);
                &return_string = %&capture_group%;
            endif;
            return(%&return_string%);
        endfunction;
    // info/index/getItemSBID
        // Given the NBT Data of an Item, extracts the Item's SBID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item SBID from.
            //
            // Returns the Item's SBID, or an empty string if one is not found.
        function getItemSBID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:103
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"\bid\"?\s*:\"([A-Z_0-9:]+)\"");
            return(%&return_string%);
        endfunction;
    // bazaar/index/getSubcategoryProductInventorySlots
        // Given an Array of Paths to Subproducts within a Subcategory, iterates over that Array and looks for an Item in the
        // Inventory matching the Subproduct. Returns an Array indexed parallel to the Paths Array, where each element is the Inventory
        // Slot ID (Inventory Indexed) where the Item was found (or -1 if the Item could not be found in the Inventory).
            // Params:
                // {string} <&subproduct_paths[]>    Array of dot-separated JSON Paths of Subproducts to look for within the Inventory.
                //
            // Returns an Array of Inventory Indexed Slot IDs representing where the first occurence of each Item was found within the Inventory,
            // indexed parallel to the <&subproduct_paths[]> Array.
        function getSubcategoryProductInventorySlots(&subproduct_paths[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:950
            foreach(&subproduct_paths[],&subproduct_path,#spi);
                #subproduct_slots[%#spi%] = -1;
                #r_start                  = 9;
                #r_end                    = 43;
                &r_item                   = jsonget("%&subproduct_path%.holds.mcid",%@&mkb_baz_json%);
                &r_sbid                   = jsonget("%&subproduct_path%.holds.sbid",%@&mkb_baz_json%);
                for(#r_slot,%#r_start%,%#r_end%);
                    #f_slot = %#r_slot%;
                    if(%&r_item%);
                        getslotinv(%&r_item%,#f_slot,%#r_offset%);
                    endif;
                    
                    if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                        #r_offset = %#f_slot% + 1;
                        &f_item   = getslotiteminv(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                        &f_nbt    = strip(%&f_nbt%);
                        &f_sbid   = getItemSBID(%&f_nbt%);
                        m_item    = ((!%&r_item%) || (%&r_item% == %&f_item%));
                        m_name    = ((!%&r_name%) || (%&r_name% == %&f_name%));
                        m_sbid    = ((!%&r_sbid%) || (%&r_sbid% == %&f_sbid%));
                        m_match   = ((%m_item%) && (%m_name%) && (%m_sbid%));
                        if(%m_match%);
                            #subproduct_slots[%#spi%] = %#f_slot%;
                            break;
                        endif;
                    else;
                        break;
                    endif;
                next;
            next;
            return(#subproduct_slots[]);
        endfunction;
//! @mkb-import-end