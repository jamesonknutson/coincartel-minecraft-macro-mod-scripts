//! @mkb-import-begin
    // info/index/_matchExpressionNBT
        // Used by getItemName, getItemUUID, getItemSBID to extract a regular expression capture group from NBT Data.
            // Params:
            //      {string} <&haystack>    The string to extract the first capture group from.
            //      {string} <&expression>  The expression to test against <&haystack>, must have at least one capture group.
            //
            // Returns the first capture group's content from the <&expression> match, or an empty string if no match is found.
        function _matchExpressionNBT(&haystack,&expr);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:34
            &return_string = "";
            ifmatches(%&haystack%,%&expr%,&capture_group,1);
                &return_string = %&capture_group%;
            endif;
            return(%&return_string%);
        endfunction;
    // info/index/getItemSBID
        // Given the NBT Data of an Item, extracts the Item's SBID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item SBID from.
            //
            // Returns the Item's SBID, or an empty string if one is not found.
        function getItemSBID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:103
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"\bid\"?\s*:\"([A-Z_0-9:]+)\"");
            return(%&return_string%);
        endfunction;
    // bazaar/index/getBazaarIndex
        // Given a Search Term (Display Name or SBID), searches for the specified Product in @&mkb_baz_sbids & @&mkb_baz_names. If a Product
        // is found, it's Index is returned. If not, -1 is returned.
            // Params:
                // {string} <&search_term>    The Product's Display Name or SBID to search up.
                //
            // Returns the Index of the Search Term in the @&mkb_baz_[sbids|names|paths] Arrays, or -1 if it is not found.
        function getBazaarIndex(&search_term);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:128
            #sbid_index = indexof(@&mkb_baz_sbids[],,%&search_term%);
            if(%#sbid_index% != -1);
                return(%#sbid_index%);
            endif;
            
            #name_index = indexof(@&mkb_baz_names[],,%&search_term%);
            if(%#name_index% != -1);
                return(%#name_index%);
            endif;
            
            #path_index = indexof(@&mkb_baz_paths[],,%&search_term%);
            return(%#path_index%);
        endfunction;
    // info/index/getItemName
        // Given the NBT Data of an Item (and optionally it's base item), extracts the Display Name of the Item from the NBT Data.
            // Params:
            //      {string} <&nbt>         The NBT Data to extract the Name from.
            //      {string} [&item="air"]  The Item this NBT Data was collected from (only used in cases where the Item's Name cannot be found).
            //      {boolean} [strip=true]  Whether or not to strip formatting codes from the extracted Name.
            //
            // Returns the Display Name of the Item found from it's NBT Data, with formatting codes stripped if [strip] is true.
        function getItemName(&nbt,&item="air",strip=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:49
            ifmatches(%&nbt%,".*\bName\s*:\"\s*(.*?)\"",&found_name,1);
                if(%strip%);
                    &found_name = strip(%&found_name%);
                endif;
            elseif(%&item% == "air");
                &found_name = "Air";
            endif;
            return(%&found_name%);
        endfunction;
    // bazaar/index/getCurrentBazaarProductPath
        // Finds the Currently Selected Bazaar Product's Path.
        function getCurrentBazaarProductPath();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:515
            &return_string = "NONE";
            ifmatches(%CONTAINERNAME%,"\u279c");
                // Check the Item Slots that we can expect to contain the Item's Name or SBID.
                if(true);
                    #check_slots[] = split(", ","13, 10, 11, 15, 16");
                    &check_names[] = split(", ","NULL, Buy Instantly, Sell Instantly, Create Buy Order, Create Sell Offer");
                    #found_index   = -1;
                    foreach(#check_slots[],#check_slot,#csi);
                        &check_name = %&check_names[%#csi%]%;
                        &f_item     = getslotitemnbt(%#check_slot%,,#f_stack,#f_data,&f_nbt);
                        &f_nbt      = strip(%&f_nbt%);
                        &f_name     = getItemName(%&f_nbt%,%&f_item%);
                        if((%&check_name% == "NULL") || (%&check_name% == %&f_name%));
                            if(%&check_name% == "NULL");
                                // Can do lookup from the Name we got.
                                #found_index = getBazaarIndex(%&f_name%);
                                if(%#found_index% != -1);
                                    break;
                                endif;
                                
                                // Name lookup didn't work, check if we can get anything with the SBID.
                                &f_sbid      = getItemSBID(%&f_nbt%);
                                #found_index = getBazaarIndex(%&f_sbid%);
                                if(%#found_index% != -1);
                                    break;
                                endif;
                            else;
                                // Do lookup from the Lore of the Item.
                                &name_from_lore = jsonget("display.Lore.0",%&f_nbt%);
                                #found_index    = getBazaarIndex(%&name_from_lore%);
                                if(%#found_index% != -1);
                                    break;
                                endif;
                            endif;
                        endif;
                    next;
                    if(%#found_index% != -1);
                        &return_string = %@&mkb_baz_paths[%#found_index%]%;
                    endif;
                endif;
            endif;
            
            return(%&return_string%);
        endfunction;
    // bazaar/index/getCurrentBazaarSubcategoryPath
        // Finds the Currently Selected Bazaar Subcategory's Path.
            // Params: None
            // Returns the JSON dot-separated path of the Subcategory that is currently selected, or "NONE" if not found.
        function getCurrentBazaarSubcategoryPath();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:478
            &return_string = "NONE";
            ifmatches(%CONTAINERNAME%,"(Farming|Mining|Combat|Woods & Fishes|Oddities) \u279c",&category_name,1);
                // Find the Index of this Category.
                if(true);
                    #category_index = -1;
                    for(#i,0,4);
                        &button_name = jsonget("holds.%#i%.button.name",%@&mkb_baz_json%);
                        if(%&button_name% == %&category_name%);
                            #category_index = %#i%;
                            break;
                        endif;
                    next;
                    
                    if(%#category_index% == -1);
                        return("NONE");
                    endif;
                endif;
                
                // Find the Subcategory within the Parent Category who's exp_container value matches whatever ours is.
                if(true);
                    for(#i,0,99);
                        &subentry_expr = jsonget("holds.%#category_index%.holds.%#i%.button.exp_container",%@&mkb_baz_json%);
                        ifmatches(%CONTAINERNAME%,%&subentry_expr%);
                            &return_string = "holds.%#category_index%.holds.%#i%";
                            break;
                        elseifmatches(%&subentry_expr%,"^ERROR_");
                            break;
                        endif;
                    next;
                endif;
            endif;
            
            return(%&return_string%);
        endfunction;
    // bazaar/index/getCurrentBazaarCategoryPath
        // Finds the Currently Selected Bazaar Category's Path.
            // Params: None
            // Returns the JSON dot-separated path of the Category that is currently selected, or "NONE" if not found.
        function getCurrentBazaarCategoryPath();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:463
            &return_string = "NONE";
            for(#i,0,4);
                &container_expr = jsonget("holds.%#i%.button.exp_container",%@&mkb_baz_json%);
                ifmatches(%CONTAINERNAME%,%&container_expr%);
                    &return_string = "holds.%#i%";
                    break;
                endif;
            next;
            return(%&return_string%);
        endfunction;
    // bazaar/index/searchItemNBT
        // Searches for an Item with a given Name in the Container, Mouse, and/or Inventory. If found, returns the NBT of that Item. Otherwise, empty string.
            // Params:
                // {string} [&item_name='Go Back']    The Name of the Item to search for.
                // {string} [&item_mcid='arrow']      The MCID of the Item to search for.
            // Returns the NBT of the Item if it was found, or an empty string if it was not.
        function searchItemNBT(&item_name="Go Back",&item_mcid="arrow");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:378
            &r_item = %&item_mcid%;
            &r_name = %&item_name%;
            
            // Check the Container first.
            if(%CONTAINERSLOTS% > 0);
                #r_offset = 0;
                #r_start  = 0;
                #r_end    = %CONTAINERSLOTS% - 37;
                for(#r_slot,%#r_start%,%#r_end%);
                    #f_slot = %#r_slot%;
                    if(%&r_item%);
                        getslot(%&r_item%,#f_slot,%#r_offset%);
                    endif;
                    
                    if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                        #r_offset = %#f_slot% + 1;
                        &f_item   = getslotitemnbt(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                        &f_nbt    = strip(%&f_nbt%);
                        &f_name   = getItemName(%&f_nbt%,%&f_item%);
                        m_item    = ((!%&r_item%) || (%&r_item% == %&f_item%));
                        m_name    = ((!%&r_name%) || (%&r_name% == %&f_name%));
                        m_match   = ((%m_item%) && (%m_name%));
                        if(%m_match%);
                            &return_string = %&f_nbt%;
                            break;
                        endif;
                    else;
                        break;
                    endif;
                next;
                if(%&return_string% != "");
                    return(%&return_string%);
                endif;
            endif;
            
            // Check the Mouse.
            if(true);
                &m_item = getmouseitem(,#m_stack,#m_data,&m_nbt);
                if(%&m_item% == %&r_item%);
                    &m_nbt  = strip(%&m_nbt%);
                    &m_name = getItemName(%&m_nbt%,%&m_item%);
                    if(%&m_name% == %&r_name%);
                        return(%&m_nbt%);
                    endif;
                endif;
            endif;
            
            // Check the Inventory.
            if(true);
                if(true);
                    #r_offset = 9;
                    #r_start  = 9;
                    #r_end    = 44;
                    for(#r_slot,%#r_start%,%#r_end%);
                        #f_slot = %#r_slot%;
                        if(%&r_item%);
                            getslotinv(%&r_item%,#f_slot,%#r_offset%);
                        endif;
                        
                        if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                            #r_offset = %#f_slot% + 1;
                            &f_item   = getslotiteminv(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                            &f_nbt    = strip(%&f_nbt%);
                            &f_name   = getItemName(%&f_nbt%,%&f_item%);
                            m_item    = ((!%&r_item%) || (%&r_item% == %&f_item%));
                            m_name    = ((!%&r_name%) || (%&r_name% == %&f_name%));
                            m_match   = ((%m_item%) && (%m_name%));
                            if(%m_match%);
                                &return_string = %&f_nbt%;
                                break;
                            endif;
                        else;
                            break;
                        endif;
                    next;
                endif;
            endif;
            
            return(%&return_string%);
        endfunction;
    // bazaar/index/bazaarNameCheck
        // Identical to bazaarItemCheck, except does not use GETSLOT, instead uses GETSLOTITEMEXT and checks if all Item Names are found.
            // Params:
                // {string} <&find_names[]>    The Names of the Items to look for
            // Returns a Boolean indicating whether or not every single Item was found in the GUI, Inventory, or Mouse.
        function bazaarNameCheck(&find_names[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:293
            return_boolean = false;
            foreach(&find_names[],&find_name,#fi);
                found_names[%#fi%] = false;
            next;
            
            if(true);
                // Look for the Item in all available Slots.
                if(true);
                    // Check the Container
                    if(%CONTAINERSLOTS% > 0);
                        #r_start  = 0;
                        #r_end    = %CONTAINERSLOTS% - 37;
                        for(#f_slot,%#r_start%,%#r_end%);
                            getslotitemext(%#f_slot%,&f_item,,,&t);
                            if((%&f_item% != "air") && (%&f_item% != "stained_glass_pane"));
                                &f_name   = strip(%&t%);
                                #f_index  = indexof(&find_names[],,%&f_name%);
                                if(%#f_index% != -1);
                                    found_names[%#f_index%] = true;
                                    #false_index            = indexof(found_names[],,false);
                                    if(%#false_index% == -1);
                                        full_break = true;
                                        break;
                                    endif;
                                endif;
                            endif;
                        next;
                        if(%full_break%);
                            return(True);
                        endif;
                    endif;
                    
                    // Check the Mouse
                    if(!%f_match%);
                        &m_item = getmouseitem(,#m_stack,#m_data,&m_nbt);
                        if(%&m_item% != "air");
                            &m_nbt  = strip(%&m_nbt%);
                            &m_name = getItemName(%&m_nbt%,%&m_item%);
                            #f_index  = indexof(&find_names[],,%&m_name%);
                            if(%#f_index% != -1);
                                found_names[%#f_index%] = true;
                                #false_index            = indexof(found_names[],,false);
                                if(%#false_index% == -1);
                                    return(True);
                                endif;
                            endif;
                        endif;
                    endif;
                    
                    // Check the Inventory
                    if(!%f_match%);
                        #r_start  = 9;
                        #r_end    = 43;
                        for(#f_slot,%#r_start%,%#r_end%);
                            &f_item = getslotiteminv(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                            if((%&f_item% != "air") && (%&f_item% != "stained_glass_pane"));
                                &f_nbt   = strip(%&f_nbt%);
                                &f_name  = getItemName(%&f_nbt%,%&f_item%);
                                #f_index = indexof(&find_names[],,%&f_name%);
                                if(%#f_index% != -1);
                                    found_names[%#f_index%] = true;
                                    #false_index            = indexof(found_names[],,false);
                                    if(%#false_index% == -1);
                                        break;
                                    endif;
                                endif;
                            endif;
                        next;
                    endif;
                endif;
            endif;
            
            #false_index = indexof(found_names[],,false);
            if(%#false_index% == -1);
                return(True);
            endif;
            return(False);
        endfunction;
    // bazaar/index/bazaarItemCheck
        // Iterates over all available Slots, looking for a match for each Item defined in the &find_items[] and &find_names[] Arrays.
        // If a match for each item is found, will return True. Else, returns False. Checks Mouse as well.
            // Params:
                // {string} <&find_items[]>    The MCIDs of the Items to look for
                // {string} <&find_names[]>    The Names of the Items to look for
            // Returns a Boolean indicating whether or not every single Item was found in the GUI, Inventory, or Mouse.
        function bazaarItemCheck(&find_items[],&find_names[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:219
            return_boolean = true;
            foreach(&find_items[],&find_item,#fi);
                &find_name = %&find_names[%#fi%]%;
                f_match    = false;
                
                // Look for the Item in all available Slots.
                if(true);
                    // Check the Container
                    if(%CONTAINERSLOTS% > 0);
                        #r_start  = 0;
                        #r_end    = %CONTAINERSLOTS% - 37;
                        #r_offset = 0;
                        for(#r_slot,%#r_start%,%#r_end%);
                            getslot(%&find_item%,#f_slot,%#r_offset%);
                            if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                                #r_offset = %#f_slot% + 1;
                                &f_item   = getslotitemnbt(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                                &f_nbt    = strip(%&f_nbt%);
                                &f_name   = getItemName(%&f_nbt%,%&f_item%);
                                f_match   = ((%&f_item% == %&find_item%) && (%&f_name% == %&find_name%));
                                if(%f_match%);
                                    break;
                                endif;
                            else;
                                break;
                            endif;
                        next;
                    endif;
                    
                    // Check the Mouse
                    if(!%f_match%);
                        &m_item = getmouseitem(,#m_stack,#m_data,&m_nbt);
                        &m_nbt  = strip(%&m_nbt%);
                        &m_name = getItemName(%&m_nbt%,%&m_item%);
                        f_match = ((%&m_item% == %&find_item%) && (%&m_name% == %&find_name%));
                    endif;
                    
                    // Check the Inventory
                    if(!%f_match%);
                        #r_start  = 9;
                        #r_end    = 43;
                        #r_offset = 9;
                        for(#r_slot,%#r_start%,%#r_end%);
                            getslotinv(%&find_item%,#f_slot,%#r_offset%);
                            if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                                #r_offset = %#f_slot% + 1;
                                &f_item   = getslotiteminv(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                                &f_nbt    = strip(%&f_nbt%);
                                &f_name   = getItemName(%&f_nbt%,%&f_item%);
                                f_match   = ((%&f_item% == %&find_item%) && (%&f_name% == %&find_name%));
                                if(%f_match%);
                                    break;
                                endif;
                            else;
                                break;
                            endif;
                        next;
                    endif;
                endif;
                
                // Break early if we did not find a match for this Item.
                if(!%f_match%);
                    return_boolean = false;
                    break;
                endif;
            next;
            return(%return_boolean%);
        endfunction;
    // bazaar/index/getBazaarGUIType
        // Reads variables regarding the currently opened Bazaar GUI to determine it's Type.
            // Params: None
            // Returns a String ENUM of:
                //    CATEGORY, SUBCATEGORY, PRODUCT,
                //    BUY_INSTANT_QTY, BUY_INSTANT_QTY_SIGN, BUY_INSTANT_CONFIRM,
                //    BUY_ORDER_QTY, BUY_ORDER_QTY_SIGN, BUY_ORDER_PRICE, BUY_ORDER_PRICE_SIGN, BUY_ORDER_CONFIRM, BUY_ORDER_MANAGE, BUY_ORDER_FLIP,
                //    SELL_INSTANT_QTY, SELL_INSTANT_INVENTORY,
                //    SELL_ORDER_QTY, SELL_ORDER_QTY_SIGN, SELL_ORDER_PRICE, SELL_ORDER_PRICE_SIGN, SELL_ORDER_CONFIRM, SELL_ORDER_MANAGE,
                //    ORDER_MANAGE,
                //    GRAPHS,
                //    NONE
            // If not currently in a Bazaar GUI, "NONE" will be returned.
                //  ENUM                      |    VALUE
                //  CATEGORY                  |    Category Path
                //  SUBCATEGORY               |    Subcategory Path
                //  PRODUCT                   |    Product Path
                //  BUY_INSTANT_QTY           |    Product Path (Go Back Arrow's nbt => display.Lore.0 == /To (?<itemName>.+)/)
                //  BUY_INSTANT_QTY_SIGN      |    NULL
                //  BUY_INSTANT_CONFIRM       |    Product Path (Go Back Arrow's nbt => display.Lore.0 == /To (?<itemName>.+)/)
                //  BUY_ORDER_QTY             |    Product Path (Go Back Arrow's nbt => display.Lore.0 == /To (?<itemName>.+)/)
                //  BUY_ORDER_QTY_SIGN        |    NULL
                //  BUY_ORDER_PRICE           |    Product Path (Go Back Arrow's nbt => display.Lore.0 == /To (?<itemName>.+)/)
                //  BUY_ORDER_PRICE_SIGN      |    NULL
                //  BUY_ORDER_CONFIRM         |    Product Path (Buy Order nbt => display.lore.4 == /Order: .*?x (?<itemName>.+)/)
                //  BUY_ORDER_MANAGE          |    NULL
                //  BUY_ORDER_FLIP            |    NULL
                //  SELL_INSTANT_QTY          |    Product Path (Go Back Arrow's nbt => display.Lore.0 == /To (?<itemName>.+)/)
                //  SELL_INSTANT_INVENTORY    |    NULL
                //  SELL_ORDER_QTY            |    Product Path (Go Back Arrow's nbt => display.Lore.0 == /To (?<itemName>.+)/)
                //  SELL_ORDER_QTY_SIGN       |    NULL
                //  SELL_ORDER_PRICE          |    Product Path (Go Back Arrow's nbt => display.Lore.0 == /To (?<itemName>.+)/)
                //  SELL_ORDER_PRICE_SIGN     |    NULL
                //  SELL_ORDER_CONFIRM        |    Product Path (Buy Order nbt => display.lore.4 == /Selling: .*?x (?<itemName>.+)/)
                //  SELL_ORDER_MANAGE         |    NULL (Category), Subcategory Path, Product Path (Go Back Arrow's nbt => display.lore.0 == /To (?<ambiguous>.+)/)
                //  ORDER_MANAGE              |    NULL
                //  GRAPHS                    |    Product Path (Go Back Arrow's nbt => display.Lore.0 == /To (?<itemName>.+)/)
                //  NONE                      |    NULL
        function getBazaarGUIType();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:598
            // Setup GUI Type Path Arrays to influence our logic on how to find the Path to the current GUI.
            if(true);
                // GUI Types where we should not attempt to determine the Path.
                &gui_nulls[] = split(", ","BUY_INSTANT_QTY_SIGN, BUY_ORDER_QTY_SIGN, BUY_ORDER_PRICE_SIGN, BUY_ORDER_MANAGE, BUY_ORDER_FLIP, SELL_INSTANT_INVENTORY, SELL_ORDER_QTY_SIGN, SELL_ORDER_PRICE_SIGN, SELL_ORDER_MANAGE, ORDER_MANAGE, NONE, SELL_ORDER_MANAGE");
                
                // GUI Types where we should attempt to determine the Path by finding the Go Back Arrow and reading the Item Name.
                &gui_path_back_arrow[] = split(", ","BUY_INSTANT_QTY, BUY_ORDER_QTY, BUY_ORDER_PRICE, SELL_INSTANT_QTY, SELL_ORDER_QTY, SELL_ORDER_PRICE, GRAPHS");
                
                // GUI Types that have a function to extract the Path.
                &gui_path_functions[] = split(", ","CATEGORY, SUBCATEGORY, PRODUCT");
                
                // GUI Types that have a non-standard Path determining logic
                &gui_path_non_standard[] = split(", ","BUY_ORDER_CONFIRM, SELL_ORDER_CONFIRM, BUY_INSTANT_CONFIRM");
            endif;
            
            if((%GUI% == "GUICHEST") || (%GUI% == "GUIEDITSIGN"));
                if(%GUI% == "GUICHEST");
                    // Can be any of:
                        // CATEGORY, SUBCATEGORY, PRODUCT, BUY_INSTANT_QTY, BUY_INSTANT_CONFIRM, BUY_ORDER_QTY, BUY_ORDER_PRICE, BUY_ORDER_CONFIRM, BUY_ORDER_MANAGE,
                        // SELL_INSTANT_QTY, SELL_INSTANT_INVENTORY, SELL_ORDER_QTY, SELL_ORDER_PRICE, SELL_ORDER_CONFIRM, SELL_ORDER_MANAGE, ORDER_MANAGE, GRAPHS, NONE
                    
                    // Rule out simple CONTAINERNAME Checks
                        // After this check, can be any of:
                        // CATEGORY, SUBCATEGORY, PRODUCT, BUY_INSTANT_QTY, BUY_ORDER_MANAGE, SELL_INSTANT_QTY, SELL_ORDER_MANAGE, GRAPHS, NONE
                    if(true);
                        &exact_containers[]  = split(", ","How many do you want?, How much do you want to pay?, Confirm Buy Order, How many are you selling?, At what price are you selling?, Confirm Sell Offer, Co-op Bazaar Orders, Your Bazaar Orders, Confirm Instant Buy, Are you sure?");
                        &exact_gui_types[]   = split(", ","BUY_ORDER_QTY, BUY_ORDER_PRICE, BUY_ORDER_CONFIRM, SELL_ORDER_QTY, SELL_ORDER_PRICE, SELL_ORDER_CONFIRM, ORDER_MANAGE, ORDER_MANAGE, BUY_INSTANT_CONFIRM, SELL_INSTANT_INVENTORY");
                        #exact_container_idx = indexof(&exact_containers[],,%CONTAINERNAME%);
                        if(%#exact_container_idx% != -1);
                            &bazaar_gui = %&exact_gui_types[%#exact_container_idx%]%;
                        endif;
                    endif;
                    
                    // Check if we are in a Category
                        // After this check, can be any of:
                        // SUBCATEGORY, PRODUCT, BUY_INSTANT_QTY, BUY_ORDER_MANAGE, SELL_INSTANT_QTY, SELL_ORDER_MANAGE, GRAPHS, NONE
                    if(%&bazaar_gui% == "");
                        ifmatches(%CONTAINERNAME%,"^Bazaar \u279c (?:Farming|Mining|Combat|Woods & Fishes|Oddities)$");
                            &bazaar_gui = "CATEGORY";
                        endif;
                    endif;
                    
                    // Check if we are in a Subcategory GUI. Subcategory GUIs will have Sell Inventory Now (Chest), Go Back (Arrow), Manage Orders (Book).
                        // After this check, can be any of:
                        // PRODUCT, BUY_INSTANT_QTY, BUY_ORDER_MANAGE, SELL_INSTANT_QTY, SELL_ORDER_MANAGE, GRAPHS, NONE
                    if(%&bazaar_gui% == "");
                        &check_items[]  = split(", ","chest, book");
                        &check_names[]  = split(", ","Sell Inventory Now, Manage Orders");
                        subcategory_gui = bazaarItemCheck(&check_items[],&check_names[]);
                        if(%subcategory_gui%);
                            &bazaar_gui = "SUBCATEGORY";
                        endif;
                    endif;
                    
                    // Check if we are in a Product GUI. Product GUIs will have View Graphs item.
                        // After this check, can be any of:
                        // BUY_INSTANT_QTY, BUY_ORDER_MANAGE, SELL_INSTANT_QTY, SELL_ORDER_MANAGE, GRAPHS, NONE
                    if(%&bazaar_gui% == "");
                        &check_items[] = split(", ","paper, filled_map");
                        &check_names[] = split(", ","View Graphs, Create Buy Order");
                        product_gui    = bazaarItemCheck(&check_items[],&check_names[]);
                        if(%product_gui%);
                            &bazaar_gui = "PRODUCT";
                        endif;
                    endif;
                    
                    // Check if we are in a Order Manage GUI.
                        // After this check, can be any of:
                        // BUY_INSTANT_QTY, SELL_INSTANT_QTY, GRAPHS, NONE
                    if((%&bazaar_gui% == "") && (%CONTAINERNAME% == "Order options"));
                        &check_items[]       = split(", ","stained_hardened_clay, name_tag");
                        &check_names[]       = split(", ","Cancel Order, Flip Order");
                        buy_order_manage_gui = bazaarItemCheck(&check_items[],&check_names[]);
                        if(%buy_order_manage_gui%);
                            &bazaar_gui = "BUY_ORDER_MANAGE";
                        else;
                            &bazaar_gui = "SELL_ORDER_MANAGE";
                        endif;
                    endif;
                    
                    // Check if we are in a BUY_INSTANT_QTY GUI.
                        // After this check, can be any of:
                        // SELL_INSTANT_QTY, GRAPHS, NONE
                    if(%&bazaar_gui% == "");
                        &check_names[]      = split(", ","Buy only one!, Fill my inventory!");
                        buy_instant_qty_gui = bazaarNameCheck(&check_names[]);
                        if(%buy_instant_qty_gui%);
                            &bazaar_gui = "BUY_INSTANT_QTY";
                        endif;
                    endif;
                    
                    // Check if we are in a SELL_INSTANT_QTY GUI.
                        // After this check, can be any of:
                        // GRAPHS, NONE
                    if(%&bazaar_gui% == "");
                        &check_names[]       = split(", ","Sell a single item!, Sell a stack!");
                        sell_instant_qty_gui = bazaarNameCheck(&check_names[]);
                        if(%sell_instant_qty_gui%);
                            &bazaar_gui = "SELL_INSTANT_QTY";
                        endif;
                    endif;
                    
                    // Check if we are in a GRAPHS GUI.
                        // After this check, can be any of:
                        // NONE
                    if(%&bazaar_gui% == "");
                        &check_names[] = split(", ","Buy Price 31d 7d 24h, Buy Orders Volume 31d 7d 24h");
                        &check_items[] = split(", ","paper, paper");
                        graphs_gui     = bazaarItemCheck(&check_items[],&check_names[]);
                        if(%graphs_gui%);
                            &bazaar_gui = "GRAPHS";
                        endif;
                    endif;
                elseif(%GUI% == "GUIEDITSIGN");
                    // Can be any of:
                        // BUY_ORDER_QTY_SIGN, BUY_ORDER_PRICE_SIGN, BUY_ORDER_FLIP, SELL_ORDER_QTY_SIGN, SELL_ORDER_PRICE_SIGN, BUY_INSTANT_QTY_SIGN, NONE
                        //
                        
                    // Rule out simple CONTAINERNAME Checks
                        // After this check, can be any of:
                        // BUY_INSTANT_QTY_SIGN, NONE
                    if(true);
                        &exact_containers[]  = split(", ","How many do you want?, How much do you want to pay?, How many are you selling?, At what price are you selling?, Order options");
                        &exact_gui_types[]   = split(", ","BUY_ORDER_QTY_SIGN, BUY_ORDER_PRICE_SIGN, SELL_ORDER_QTY_SIGN, SELL_ORDER_PRICE_SIGN, BUY_ORDER_FLIP");
                        #exact_container_idx = indexof(&exact_containers[],,%CONTAINERNAME%);
                        if(%#exact_container_idx% != -1);
                            &bazaar_gui = %&exact_gui_types[%#exact_container_idx%]%;
                        endif;
                    endif;
                    
                    // Check if we are in BUY_INSTANT_QTY_SIGN GUI.
                        // After this check, can be any of:
                        // NONE
                    if(%&bazaar_gui% == "");
                        // CONTAINERNAME will always be maximum of 31 characters long, in format:
                        // <product> <arrow> Instant Buy
                        // <arrow> Instant Buy length = 14
                        // <product> + <...arrow> = 31
                        
                        &try_suffixes[]         = split(", "," \u279c Instant Buy, \u279c Instant Bu,  \u279c Instant B,  \u279c Instant ,  \u279c Instant,  \u279c Instan,  \u279c Insta,  \u279c Inst,  \u279c Ins,  \u279c In,  \u279c I,  \u279c ,  \u279c,  ");
                        #enforce_max_len_at_idx = 10; // If we match any of the suffixes above past this Index, only accept it if CONTAINERNAME's length >= 31.
                        #container_name_length  = strlen(%CONTAINERNAME%);
                        foreach(&try_suffixes[],&try_suffix,#tsi);
                            ifmatches(%CONTAINERNAME%,"%&try_suffix%$");
                                if((%#tsi% < %#enforce_max_len_at_idx%) || (%#container_name_length% >= 31));
                                    buy_instant_qty_gui = true;
                                    break;
                                elseif((%#tsi% >= %#enforce_max_len_at_idx%) && (%#container_name_length% < 31));
                                    break;
                                endif;
                            endif;
                        next;
                        
                        if(%buy_instant_qty_gui%);
                            &bazaar_gui = "BUY_INSTANT_QTY_SIGN";
                        endif;
                    endif;
                endif;
            endif;
            
            // Apply GUI Path Detection Logic
            if(true);
                if(%&bazaar_gui% == "");
                    &bazaar_gui = "NONE";
                endif;
                
                #null_index         = indexof(&gui_nulls[],,%&bazaar_gui%);
                #arrow_index        = indexof(&gui_path_back_arrow[],,%&bazaar_gui%);
                #non_standard_index = indexof(&gui_path_non_standard[],,%&bazaar_gui%);
                #function_index     = indexof(&gui_path_functions[],,%&bazaar_gui%);
                if(true);
                    if(%#null_index% != -1);
                        &bazaar_path = "NULL";
                    elseif(%#arrow_index% != -1);
                        &arrow_nbt = searchItemNBT("Go Back","arrow");
                        ifmatches(%&arrow_nbt%,".");
                            &match_string = jsonget("display.Lore.0",%&arrow_nbt%);
                            ifmatches(%&match_string%,"To (.+)",&previous_name,1);
                                #product_index = getBazaarIndex(%&previous_name%);
                                if(%#product_index% == -1);
                                    &bazaar_path = "ERROR_NOT_FOUND";
                                else;
                                    &bazaar_path = %@&mkb_baz_paths[%#product_index%]%;
                                endif;
                            endif;
                        endif;
                    elseif(%#non_standard_index% != -1);
                        &gui_enums[]                 = split(", ","BUY_INSTANT_CONFIRM, BUY_ORDER_CONFIRM, SELL_ORDER_CONFIRM");
                        &gui_names[]                 = split(", ","Custom Amount, Buy Order, Sell Offer");
                        &gui_lore_regex[]            = split("!, ","(.+)!, Order: [\d\.,\-]+x (.+)!, Selling: [\d\.,\-]+x (.+)");
                        #gui_lore_index[]            = split(", ","0, 4, 4");
                        #gui_enum_index              = indexof(&gui_enums[],,%&bazaar_gui%);
                        if(%#gui_enum_index% != -1);
                            &search_nbt = searchItemNBT(%&gui_names[%#gui_enum_index%]%,"");
                            ifmatches(%&search_nbt%,".");
                                &gui_lore_string = jsonget("display.Lore.%#gui_lore_index[%#gui_enum_index%]%",%&search_nbt%);
                                ifmatches(%&gui_lore_string%,"^ERROR_");
                                    log("&4Error: Could not extract a Lore String from index &c%#gui_lore_index[%#gui_enum_index%]%&4 from NBT: &c%&search_nbt%&4!");
                                    &bazaar_path = "ERROR_NOT_FOUND";
                                elseifmatches(%&gui_lore_string%,%&gui_lore_regex[%#gui_enum_index%]%,&capture_group,1);
                                    log("&aFound capture group &d%&capture_group%&a from string &d%&gui_lore_string%&a.");
                                    #product_index = getBazaarIndex(%&capture_group%);
                                    if(%#product_index% == -1);
                                        &bazaar_path = "ERROR_NOT_FOUND";
                                        log("&4Error: Could not find index of &d%&capture_group%&7 as a Bazaar Product!");
                                    else;
                                        &bazaar_path = %@&mkb_baz_paths[%#product_index%]%;
                                        log("&aFound index of &d%&capture_group%&a to be &e%#product_index%&a!");
                                    endif;
                                else;
                                    &bazaar_path = "ERROR_NOT_FOUND";
                                    log("&4Error: Could not match &d%&gui_lore_regex[%#gui_enum_index%]%&4 against Lore String: &c%&gui_lore_string%&4.");
                                endif;
                            else;
                                &bazaar_path = "ERROR_NOT_FOUND";
                                log("&4Error: Could not find any Item named &d%&gui_names[%#gui_enum_index%]%&4 in the Current GUI!");
                            endif;
                        else;
                            &bazaar_path = "ERROR_NOT_FOUND";
                            log("&4Error: Could not find &&bazaar_gui &c%&bazaar_gui%&4 in &gui_enums[]!");
                        endif;
                    elseif(%#function_index% != -1);
                        if(%&bazaar_gui% == "CATEGORY");
                            &bazaar_path = getCurrentBazaarCategoryPath();
                        elseif(%&bazaar_gui% == "SUBCATEGORY");
                            &bazaar_path = getCurrentBazaarSubcategoryPath();
                        elseif(%&bazaar_gui% == "PRODUCT");
                            &bazaar_path = getCurrentBazaarProductPath();
                        endif;
                    endif;
                endif;
            endif;
            
            return(%&bazaar_gui%,%&bazaar_path%);
        endfunction;
    // bazaar/index/isPathSiblingOf
        // Checks if the Current Path is a Sibling (same Subcategory) as the Other Path.
            // Params:
                // {string} <&other_path>
                // {string} [&current_path]    If omitted, will calculate
            // Returns a Boolean
        function isPathSiblingOf(&other_path,&current_path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1231
            if(%&current_path% == "");
                &current_path[] = getBazaarGUIType();
                if(%&current_path[0]% == "NONE");
                    return(False);
                endif;
                &current_path = %&current_path[1];
            endif;
            
            &other_parts[] = split(".",%&other_path%);
            &curr_parts[]  = split(".",%&current_path%);
            foreach(&other_parts[],&other_part,#op);
                &curr_part = %&curr_parts[%#op%]%;
                if(%&other_part% != %&curr_part%);
                    break;
                else;
                    &matched_parts[] = %&other_part%;
                    &matched_path    = join(".",&matched_parts[]);
                    &matched_type    = jsonget("%&matched_path%.type",%@&mkb_baz_json%);
                    if(%&matched_type% == "SUBCATEGORY");
                        return_boolean = true;
                    endif;
                endif;
            next;
            return(%return_boolean%);
        endfunction;
    // misc/index/canDoInteraction
        // Checks if we can 'do' an Interaction by determining whether we have waited a whole amount of <#ticks_per_action> in <#waited_ticks>.
        // Basically a modulo operation. If return True, execute Action. If not, skip action and keep waiting.
            // Params:
                // {number} [#waited_ticks=0]    Amount of Ticks that have been waited thus far
                // {number} [#tick_wait=20]      Ticks to wait in between actions
            // Returns a Boolean
            // Example:
                //    can_do_action = canDoInteraction(%#waited_ticks%,%#tick_wait%);
        function canDoInteraction(#waited_ticks=0,#tick_wait=20);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:43
            #actions_done  = %#waited_ticks% / %#tick_wait%;
            #ticks_to_next = %#waited_ticks% - (%#actions_done% * %#tick_wait%);
            can_do_action  = %#ticks_to_next% == 0;
            return(%can_do_action%);
        endfunction;
    // debug/index/debug_error
        // Logs a message to chat with an error prefix.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_error(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:49
            // &matcher       = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement   = "&$1";
            // &string        = regexreplace(&string,%&matcher%,%&replacement%);
            &error_message = "&4Error > &c%&string%";
            &error_message = regexreplace(&error_message,"&7","&c");
            &error_message = "&7%&script_debug_name%&7: %&error_message%";
            if(%debug_enabled%);
                log(%&error_message%);
            endif;
            return(%&error_message%);
        endfunction;
    // info/index/hasTimeExceeded
        // Used to determine whether to timeout a function.
            // Params:
                // {number} <#start_time>        The start timestamp to subtract from current timestamp
                // {number} <#timeout_sec>       The amount of seconds to check if difference between now & start is >=.
                // {number} [do_timeout=true]    If false, will always return false (used as shorthand for functions that
                //                               use this function to determine whether or not they have timed out).
            // Returns a boolean indicating whether or not <#start_timestamp> was >= <#seconds> ago.
            // Example:
                //    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
        function hasTimeExceeded(#start_time,#timeout_sec,do_timeout=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:10
            #elapsed_sec   = %TIMESTAMP% - #start_time;
            return_boolean = ((%do_timeout%) && (#elapsed_sec >= #timeout_sec));
            return(%return_boolean%);
        endfunction;
    // gui/index/decodeContainerString
        // Decodes a Container String into an Array of it's components.
            // Params:
            //      {string} <&container_string>    A container string generated by getContainerString
            //
            // Returns an Array:
            //  0 {string} &container_gui   The string value of "%GUI%" from the Container String
            //  1 {string} &container_name  The string value of "%CONTAINERNAME%" from the Container String
            //  2 {number} #container_slots The number value of "%CONTAINERSLOTS%" from the Container String
            //
            // If the Container String holds NBT Item Data, elements 3, ... are the ENCODED NBT strings.
            //
        function decodeContainerString(&container_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:358
            &decoded_string = decode(%&container_string%);
            &decoded_vars[] = split("$",%&decoded_string%);
            #decoded_length = arraysize(&decoded_vars[]);
            
            &decoded_data[] = split("|",%&decoded_vars[0]%);
            if(%#decoded_length% > 1);
                &encoded_nbt[] = split("~",%&decoded_vars[1]%);
                push(&decoded_data[],&encoded_nbt[*]);
            endif;
            return(&decoded_data[]);
        endfunction;
    // gui/index/getContainerString
        // Encodes the current values of GUI, CONTAINERNAME, CONTAINERSLOTS, and optionally Slot Data from each slot in the Container
        // into a string using encode(). Used to check if the GUI has updated.
            // Params:
            //      {boolean} [include_items=false] If true, will call indexGUI and append it's data to the Container String.
            //
            // Returns a string encoded with encode() in format 'GUI|CONTAINERNAME|CONTAINERSLOTS[$<slot_nbt>~<slot_nbt>~<...>]'.
            // The [$<slot_nbt>~<slot_nbt>~<...>] portion is only included if [include_items] is true.
        function getContainerString(include_items=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:274
            &env_var_str = "%GUI%|%CONTAINERNAME%|%CONTAINERSLOTS%";
            if(%include_items%);
                if(%CONTAINERSLOTS% > 0);
                    #container_start = 0;
                    #container_end   = %CONTAINERSLOTS% - 37;
                    #inventory_start = %CONTAINERSLOTS% - 36;
                    #inventory_end   = %CONTAINERSLOTS% - 1;
                    #range_start     = %#container_start%;
                    #range_end       = %#inventory_end%;
                    for(#slot,%#range_start%,%#range_end%);
                        &f_item     = getslotitemnbt(%#slot%,,#f_stack,#f_data,&f_nbt);
                        &f_nbt      = strip(%&f_nbt%);
                        &f_nbt      = encode(%&f_nbt%);
                        &out_data[] = "%&f_item%|%#f_stack%|%#f_data%|%&f_nbt%";
                    next;
                endif;
                &gui_items   = join("~",&out_data[]);
                &env_var_str = "%&env_var_str%$%&gui_items%";
            endif;
            &return_string = encode(%&env_var_str%);
            return(%&return_string%);
        endfunction;
    // gui/index/enteredNewGUI
        // Checks if we are in a new GUI by comparing the <&init_container_string> to the current Container String returned by getContainerString.
            // Params:
            //      {string} <&init_container_string>   A Container String generated when we were on the Initial GUI that we want to check for an Update from.
            //      {boolean} [include_items=false]     Set this to true if [include_items] was used on the Initial call to getContainerString.
            //
            // Returns a boolean indicating whether or not the GUI has changed.
        function enteredNewGUI(&init_container_string,include_items=false,allow_mouse_full=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:304
            &mouse_item = getmouseitem(,#mouse_stack,#mouse_data,&mouse_nbt);
            if((%&mouse_item% != "air") && (!%allow_mouse_full%));
                return(False);
            endif;
            
            &mouse_nbt             = strip(%&mouse_nbt%);
            &mouse_nbt             = encode(%&mouse_nbt%);
            &curr_container_string = getContainerString(%include_items%);
            if(&curr_container_string != &init_container_string);
                if(%include_items%);
                    &init_data[] = call("decodeContainerString",%&init_container_string%);
                    &curr_data[] = call("decodeContainerString",%&curr_container_string%);
                    foreach(&init_data[],&init_data,#dei);
                        &curr_data = %&curr_data[%#dei%]%;
                        if(%&curr_data% != %&init_data%);
                            if(%#dei% <= 2);
                                return_boolean = True;
                                break;
                            else;
                                &init_data_arr[] = split("|",%&init_data%);
                                &init_data_item  = %&init_data_arr[0]%;
                                &init_data_nbt   = %&init_data_arr[3]%;
                                &curr_data_arr[] = split("|",%&curr_data%);
                                &curr_data_item  = %&curr_data_arr[0]%;
                                &curr_data_nbt   = %&curr_data_arr[3]%;
                                mouse_match      = (((%&init_data_item% == "air") && (%&mouse_nbt% == %&curr_data_nbt%)) || ((%&curr_data_item% == "air") && (%&mouse_nbt% == %&init_data_nbt%)));
                                
                                if(!%mouse_match%);
                                    return_boolean = True;
                                    break;
                                endif;
                            endif;
                        endif;
                    next;
                    return(%return_boolean%);
                endif;
                
                return(True);
            endif;
            return(False);
        endfunction;
    // debug/index/debug_log
        // Logs a message to chat if debug is enabled.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_log(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:30
            // &matcher     = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement = "&$1";
            // &string      = regexreplace(&string,%&matcher%,%&replacement%);
            &out_string  = "&7%&script_debug_name%&7: %&string%";
            if(%debug_enabled%);
                log(%&out_string%);
            endif;
            return(%&out_string%);
        endfunction;
    // misc/index/getNewTimeoutSec
        // Adjusts <#timeout_sec> to be <#timeout_sec> minus amount of seconds elapsed since <#start_time>.
            // Params:
                // {number} <#start_time>         Timestamp of fn start in caller script
                // {number} <#timeout_sec>        Timeout seconds passed to caller script
                // {boolean} [do_timeout=true]    Whether or not the timeout is active (if it is, the function will always
                //                                return a positive number. If it is not, it will allow <= 0 numbers).
            // Returns the new Timeout in Seconds
            // Example:
                //    #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
        function getNewTimeoutSec(#start_time,#timeout_sec,do_timeout=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:59
            #recursive_timeout = %#timeout_sec%;
            if(%do_timeout%);
                #recursive_timeout = %#timeout_sec% - (%TIMESTAMP% - %#start_time%);
                if(%#recursive_timeout% <= 0);
                    #recursive_timeout = 1;
                endif;
            endif;
            return(%#recursive_timeout%);
        endfunction;
    // gui/index/localGUI
        // Changes the current GUI to a local GUI.
            // Params:
            //      {string} [&target_gui="NONE"]         - The Target GUI to switch to. Can be any of the following strings:
            //                                              "NONE", "GUIINVENTORY", "GUICHAT".
            //      {number} [#wait_ticks=@#def_wait_ticks]- Amount of ticks (1t = 50ms) to wait between each action (press/GUI).
            //
            // Returns a boolean indicating whether or not GUI == <&target_gui> at end of function.
        function localGUI(&target_gui="NONE",#wait_ticks=20);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:11
            &valid_guis[] = split(", ","NONE, GUIINVENTORY, GUICHAT");
            #valid_gui    = indexof(&valid_guis[],,%&target_gui%);
            if(#valid_gui == -1);
                #valid_gui = 0;
            endif;
            &target_gui = ucase(%&valid_guis[%#valid_gui%]%);
            
            do;
                if(%GUI% == %&target_gui%);
                    break;
                elseif(%GUI% != "NONE");
                    press("escape");
                    do(%#wait_ticks%);
                        wait("1t");
                    until(%GUI% == "NONE");
                else;
                    if(%&target_gui% == "GUIINVENTORY");
                        gui("inventory");
                    elseif(%&target_gui% == "GUICHAT");
                        gui("chat");
                    endif;
                    
                    do(%#wait_ticks%);
                        wait("1t");
                    until(%GUI% != "NONE");
                endif;
            until(%GUI% == %&target_gui%);
            return_boolean = %GUI% == %&target_gui%;
            return(%return_boolean%);
        endfunction;
    // movement/index/splitCoordString
        // Given a coordinate string, splits it up by tunnel characters and returns an integer array.
            // Params:
            //      {string} [&coord_string="%XPOS%|%YPOS%|%ZPOS%"] The coordinate string to split up
            //
            // Returns an Array where the 0th element is the XPOS, 1st is YPOS, and 2nd is ZPOS.
        function splitCoordString(&coord_string="%XPOS%|%YPOS%|%ZPOS%");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:6
            &pos[] = split("|",%&coord_string%);
            &x     = %&pos[0]%;
            &y     = %&pos[1]%;
            &z     = %&pos[2]%;
            &arr[] = split(", ","%&x%, %&y%, %&z%");
            return(&arr[]);
        endfunction;
    // movement/index/fnCalcYawTo
        // Given an X, Y, Z value (and/or coordinate string), calculates the yaw and pitch values required to look at the value.
            // Params:
            //      {string} <&coordinate_string>   The Coordinate String, or X position.
            //      {string} [&y_pos]               The Y position (only required if <&coordinate_string> is a single value).
            //      {string} [&z_pos]               The Z position (only required if <&coordinate_string> is a single value).
            //
            // Returns an Array where element 0 = yaw, element 1 = dist, element 2 = pitch.
        function fnCalcYawTo(&coordinate_string,&y_pos,&z_pos);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:34
            &x_pos = %&coordinate_string%;
            ifmatches(%&coordinate_string%,"(.+)\|(.+)\|(.+)");
                &split_pos[] = splitCoordString(%&coordinate_string%);
                &x_pos       = %&split_pos[0]%;
                &y_pos       = %&split_pos[1]%;
                &z_pos       = %&split_pos[2]%;
            endif;
            
            calcyawto(%&x_pos%,%&y_pos%,%&z_pos%,#calc_yaw,#calc_dist,#calc_pitch);
            #calc_yaw = %#calc_yaw% + 180;
            if(%#calc_yaw% > 360);
                #calc_yaw = %#calc_yaw% - 360;
            elseif(%#calc_yaw% == 360);
                #calc_yaw = 0;
            endif;
            
            return(%#calc_yaw%,%#calc_dist%,%#calc_pitch%);
        endfunction;
    // info/index/getEntityPos
        // Given an Entity Name expression (and optionally the Entity Type and/or Range), uses the Entities Iterator to find them and return their position.
            // Params:
            //      {string} <&entity_expr>         A regular expression to use in the iterator filter
            //      {string} [&entity_type]         Optional entity type to use in the iterator filter
            //      {string} [&entity_range]        Optional max range to use in the iterator filter
            //      {boolean} [return_float=false]  If set to true, will return the entity's XPOSF, YPOSF, ZPOSF instead of integers.
            //
            // Returns an Array where element 0 = XPOS[F], 1 = YPOS[F], 2 = ZPOS[F]. Will return a string array no matter what,
            // if cannot find entity the first value of this array will be an empty string.
        function getEntityPos(&entity_expr,&entity_type="",&entity_range="",return_float=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:610
            &filter_terms[] = "name:%&entity_expr%";
            if(%&entity_type% != "");
                &filter_terms[] = "type:%&entity_expr%";
            endif;
            &filter_terms = join(",",&filter_terms[]);
            &filter_terms = "filter:{%&filter_terms%}"
            if(%&entity_range% != "");
                &filter_terms = "%&filter_terms%,range:%&entity_range%";
            endif;
            
            foreach("entities(%&filter_terms%)");
                if(%return_float%);
                    &out_arr[] = %ENTITYXPOSF%;
                    &out_arr[] = %ENTITYYPOSF%;
                    &out_arr[] = %ENTITYZPOSF%;
                else;
                    &out_arr[] = %ENTITYXPOS%;
                    &out_arr[] = %ENTITYYPOS%;
                    &out_arr[] = %ENTITYZPOS%;
                endif;
                found = true;
                break;
            next;
            
            if(!%found%);
                &out_arr[0] = "";
            endif;
            return(&out_arr[]);
        endfunction;
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/xEval
        // Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&expression>              The arithmetic expression to evaluate with `eval`.
                // {boolean} [coerce_integer=false]    If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
            // Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
        function xEval(&expression,coerce_integer=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:276
            debug              = false;
            &script_debug_name = "&9xEval&7";
            debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
            &return_string     = eval(%&expression%);
            debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
            &return_string     = convertENote(%&return_string%);
            debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
            if(%coerce_integer%);
                debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
                &return_string = formatnumber(%&return_string%,0,true);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
            return(%&return_string%);
        endfunction;
    // movement/index/isStalled
        // Used to check if the player is "stalled" (not moving more than [#stall_break] absolute distance)
        // for more than [#seconds] seconds.
            // Params:
            //      {number} #start_timestamp   The timestamp the last known 'unstalled' position was recorded at
            //      {string} &start_position    The coordinate string of the last known 'unstalled' position
            //      {number} [#seconds=5]       Amount of seconds required to have passed with no more than [#stall_break]
            //                                  blocks of absolute movement to consider as a stall
            //      {number} [#stall_break=3]   Blocks of absolute movement required to consider as having moved
            //
            // Returns an Array where element 0 is a boolean indicating whether or not the Player is stalled, and
            // element 1 is a boolean indicating whether or not to update the stall position / timestamp.
        function isStalled(#start_timestamp=%TIMESTAMP%,&start_position="%XPOS%|%YPOS%|%ZPOS%",#seconds=5,#stall_break=3);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:65
            #last_pos[] = splitCoordString(%&start_position%);
            #curr_pos[] = splitCoordString();
            #abs_diff   = xEval("sqrt((%#last_pos[0]% - %#curr_pos[0]%)^2) + sqrt((%#last_pos[1]% - %#curr_pos[1]%)^2) + sqrt((%#last_pos[2]% - %#curr_pos[2]%)^2)",true);
            
            update_pos = #abs_diff >= #stall_break;
            is_stalled = !%update_pos%;
            if(%is_stalled%);
                is_stalled = hasTimeExceeded(%#start_timestamp%,%#seconds%);
            endif;
            return(%over_limit%,%update_pos%);
        endfunction;
    // info/index/withinBounds
        // Checks if a number is <= min && >= max.
            // Params:
            //      {number} <#number>  The number to check if is between min && max.
            //      {number} <#min>     The minimum value for <#number>
            //      {number} <#max>     The maximum value for <#number>
            //
            // Returns a boolean indicating whether or not the number is between the specified values.
        function withinBounds(#number,#min,#max);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:23
            return_boolean = ((#number >= #min) && (#number <= #max));
            return(%return_boolean%);
        endfunction;
    // movement/index/getCoordString
        // Generates a coordinate string from the input numbers
            // Params:
            //      {number} [#x=%XPOS%]    The X Position
            //      {number} [#x=%YPOS%]    The Y Position
            //      {number} [#x=%ZPOS%]    The Z Position
            //
            // Returns the coordinate string.
        function getCoordString(#x=%XPOS%,#y=%YPOS%,#z=%ZPOS%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:22
            &coord_string = "%XPOS%|%YPOS%|%ZPOS%";
            return(%&coord_string%);
        endfunction;
    // movement/index/baritoneGoto
        // Takes input of a coordinate position in the world to move to, as well as optional setting pairs to pass along
        // to baritone, then instructs Baritone to move to the position in the world.
            // Params:
            //      {string} <&target_position>     The Coordinate string to move to (X|Y|Z).
            //      {string} [&coord_bounds[]]      An optional array of coordinate bounds (idx 0 = min coord bound, idx 1 = max coord bound)
            //                                      strings. If provided, will exit the function and kill Baritone should the Player exit
            //                                      these bounds.
            //      {number} [#timeout_sec=300]     Maximum amount of seconds for the function to wait before timing out and exiting. Set to -1
            //                                      to disable timeouts.
            //      {number} [#stall_sec=5]         Maximum amount of seconds for the function to be stalled in nearly the same X/Y/Z position (no more
            //                                      than 3 blocks of absolute distance) before timing out and exiting. Set to -1 to disable stall timeouts.
            //      {string} [...&setting_pairs[]]  An optional array of key value Baritone Setting pairs to pass through to
            //                                      Baritone before executing the movement. By default, this function will always
            //                                      use the settings defined below. If you pass in these settings' keys, your values
            //                                      will be used instead of the defaults. You can pass in other settings as well, if
            //                                      needed. The format to pass key value pairs in is: '<key>|<value>'.
                // Baritone Settings Used:
                //  allowPlace              : false
                //  allowBreak              : false
                //  allowSprint             : true
                //  allowDiagonalDescend    : true
                //  allowDiagonalAscend     : true
                //  allowParkour            : true
                //  allowParkourAscend      : true
                //  antiCheatCompatibility  : true
                //  allowWalkOnBottomSlab   : true
                //  allowWaterBucketFall    : false
                //  blocksToAvoid           : spruce_fence,spruce_fence_gate,birch_fence,birch_fence_gate,jungle_fence,jungle_fence_gate,acacia_fence,acacia_fence_gate,dark_oak_fence,dark_oak_fence_gate,nether_brick_fence,cobblestone_wall
                //  freeLook                : false
                //  overshootTraverse       : true
                //  randomLooking           : 0.03
                //  sprintAscends           : true
                //  sprintInWater           : false
        function baritoneGoto(&target_position,&coord_bounds[],#timeout_sec=300,#stall_sec=5,...&setting_pairs[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:150
            log("baritoneGoto : target_position = %&target_position%");
            // Validate input parameters
            if(true);
                // Issue Baritone Settings
                if(true);
                    // Default Settings
                        &baritone_keys[] = "allowBreak";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "allowPlace";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "allowSprint";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowDiagonalDescend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowDiagonalAscend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowParkour";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowParkourAscend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "antiCheatCompatibility";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowWalkOnBottomSlab";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowWaterBucketFall";
                        &baritone_vals[] = "false";
                        
                        &baritone_keys[] = "blocksToAvoid";
                        &baritone_vals[] = "spruce_fence,spruce_fence_gate,birch_fence,birch_fence_gate,jungle_fence,jungle_fence_gate,acacia_fence,acacia_fence_gate,dark_oak_fence,dark_oak_fence_gate,nether_brick_fence,cobblestone_wall";
        
                        &baritone_keys[] = "freeLook";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "overshootTraverse";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "randomLooking";
                        &baritone_vals[] = "0.03";
        
                        &baritone_keys[] = "sprintAscends";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "sprintInWater";
                        &baritone_vals[] = "false";
                    foreach(&setting_pairs[],&setting_pair,#spi);
                        &setting_pair[] = split("|",%&setting_pair%);
                        &setting_key    = %&setting_pair[0]%;
                        if(%&setting_key% != "");
                            &setting_val = %&setting_pair[1]%;
                            #setting_idx = indexof(&baritone_keys[],,%&setting_key%);
                            if(#setting_idx != -1);
                                &baritone_vals[%#setting_idx%] = %&setting_val%;
                            else;
                                &baritone_keys[] = %&setting_key%;
                                &baritone_vals[] = %&setting_val%;
                            endif;
                        endif;
                    next;
                    
                    foreach(&baritone_keys[],&baritone_key,#bki);
                        &baritone_val = %&baritone_vals[%#bki%]%;
                        baritonecommand("set %&baritone_key% %&baritone_val%");
                    next;
                endif;
                
                // Setup bounds and exit conditions
                if(true);
                    foreach(&coord_bounds[],&coord_bound,#cbi);
                        ifmatches(%&coord_bound%,"(.+)\|(.+)\|(.+)");
                            #coords[]   = splitCoordString(%&coord_bound%);
                            #bounds_x[] = %#coord[0]%;
                            #bounds_y[] = %#coord[1]%;
                            #bounds_z[] = %#coord[2]%;
                        endif;
                    next;
                    #bounds_x = arraysize(#bounds_x[]);
                    do_coord_bound = #bounds_x >= 2;
                    if(%do_coord_bound%);
                        #final_idx = #bounds_x - 1;
                        sort("ASC",#bounds_x[]);
                        sort("ASC",#bounds_y[]);
                        sort("ASC",#bounds_z[]);
                        #min_bound_x = %#bounds_x[0]%;
                        #min_bound_y = %#bounds_y[0]%;
                        #min_bound_z = %#bounds_z[0]%;
                        #max_bound_x = %#bounds_x[%#final_idx%]%;
                        #max_bound_y = %#bounds_y[%#final_idx%]%;
                        #max_bound_z = %#bounds_z[%#final_idx%]%;
                    endif;
                    
                    #target_pos[] = splitCoordString(%&target_position%);
                    #target_x    := %#target_pos[0]%;
                    #target_y    := %#target_pos[1]%;
                    #target_z    := %#target_pos[2]%;
                endif;
                
                do_timeout  = #timeout_sec != -1;
                do_stall    = #stall_sec != -1;
                #start_time = %TIMESTAMP%;
                
                if(%do_stall%);
                    #stall_time = #start_time;
                    &stall_pos  = getCoordString();
                endif;
            endif;
            
            // Start moving to the position.
            localGUI("NONE");
            baritonecommand("goto %#target_x% %#target_y% %#target_z%");
            do;
                // Exit any GUI if we are in one.
                if(%GUI% != "NONE");
                    localGUI("NONE");
                endif;
                
                // Check if we have timed out
                break_condition = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                if(%break_condition%);
                    break;
                endif;
                
                // Check if we have exited the boundaries
                if(%do_coord_bound%);
                    wait("1t");
                    in_bounds_x     = withinBounds(%XPOS%,%#min_bound_x%,%#max_bound_x%);
                    in_bounds_y     = withinBounds(%YPOS%,%#min_bound_y%,%#max_bound_y%);
                    in_bounds_z     = withinBounds(%ZPOS%,%#min_bound_z%,%#max_bound_z%);
                    break_condition = !((%in_bounds_x%) && (%in_bounds_y%) && (%in_bounds_z%));
                    if(%break_condition%);
                        break;
                    endif;
                endif;
                
                // Check if we are on the correct position
                return_boolean = ((%XPOS% == #target_x) && (%YPOS% == #target_y) && (%ZPOS% == #target_z));
                if(%return_boolean%);
                    break;
                endif;
                
                // Check if we have stalled out
                if(%do_stall%);
                    wait("1t");
                    stall_data[]    = isStalled(%#start_time%,%&start_pos%,%#stall_sec%);
                    break_condition = %stall_data[0]%;
                    update_stall    = %stall_data[1]%;
                    if(%break_condition%);
                        break;
                    elseif(%update_stall%);
                        #stall_time = %TIMESTAMP%;
                        &stall_pos  = getCoordString();
                    endif;
                endif;
                
                wait("1t");
            until((!%BARITONEWORKING%) || (%break_condition%) || (%return_boolean%));
            
            if((!%BARITONEWORKING%) && (!%break_condition%));
                return_boolean = ((%XPOS% == #target_x) && (%YPOS% == #target_y) && (%ZPOS% == #target_z));
            elseif(%BARITONEWORKING%);
                baritonecommand("stop");
            endif;
            return(%return_boolean%);
        endfunction;
    // math/index/absDiff
        // Given input of two numbers, finds the absolute difference between them.
            // Params:
            //      {string} <&first_number>    The first number (can be integer or float)
            //      {string} <&second_number>   The second number (can be integer or float)
            //
            // Returns the absolute difference between the two numbers. If either number is a float,
            // a float number is returned. Otherwise, an integer is returned.
        function absDiff(&first_number,&second_number);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:8
            ifmatches(%&first_number%,"\.");
                float = true;
            elseifmatches(%&second_number%,"\.");
                float = true;
            endif;
            
            if(%float%);
                &diff = xEval("%&first_number% - %&second_number%");
                ifmatches(%&diff%,"-");
                    &diff = xEval("%&diff% * -1");
                endif;
                return(%&diff%);
            else;
                #first  := %&first_number%;
                #second := %&second_number%;
                #diff    = %#first% - %#second%;
                if(#diff < 0);
                    #diff = #diff * -1;
                endif;
                return(%#diff%);
            endif;
        endfunction;
    // gui/index/regexTest
        // Tests if the regular expression <&expression> matches against <&input_string>.
            // Params:
            //      {string} <&input_string>    The input string to test against <&expression>.
            //      {string} <&expression>      The regular expression to test against <&input_string>.
            //
            // Returns a boolean indicating whether or not the <&expression> matches against the <&input_string>.
        function regexTest(&input_string,&expression);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:49
            ifmatches(%&input_string%,%&expression%);
                return_bool = true;
            endif;
            return(%return_bool%);
        endfunction;
    // info/index/getSkyblockAreaFromWTFMAP
        // Attempts to read the SkyBlock Area from the /wtfmap command + chatfilter.
            // Params:
            //      {number} [#timeout_sec=30]  Max amount of seconds to wait for Chat Filter to read the wtfmap output.
            //                                  Set to -1 to disable timeout.
            //      {number} [#wait_ticks=60]   Amount of ticks to wait between attempts to issue the command.
            //
            // Returns the String returned from the Command (i.e. "SkyBlock Dynamic"), or "-1" if cannot be found/timed out.
        function getSkyblockAreaFromWTFMAP(#timeout_sec=30,#wait_ticks=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:422
            debug              = true;
            &script_debug_name = "&3getSkyBlockAreaFromWTFMAP&7";
            
            @cannot_use_wtfmap = false;
            @&wtfmap           = "";
            #start_time        = %TIMESTAMP%;
            do_timeout         = #timeout_sec != -1;
            &return_string     = "-1";
            do;
                func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                if(%func_timeout%);
                    break;
                endif;
                    
                debug_log(%debug%,%&script_debug_name%,"echoing '/wtfmap'...");
                echo("/wtfmap");
                do(%#wait_ticks%);
                    wait("1t");
                    got_response   = ((%@&wtfmap% != "") || (%@cannot_use_wtfmap%));
                until(%got_response%);
                if((%got_response%) && (%@&wtfmap% != ""));
                    &return_string = %@&wtfmap%;
                    break;
                endif;
            until((%got_response%) || (%func_timeout%));
            return(%&return_string%);
        endfunction;
    // info/index/getScoreboardSkyBlockArea
        // Attempts to read the Scoreboard to find the Player's AREA on Hypixel SkyBlock (i.e. 'Private Island', 'Hub', 'Bank', etc).
            // Params:
            //      None
            //
            // Returns the string found on the Scoreboard following the Gem Character, or "-1" if not able to be parsed.
        function getScoreboardSkyBlockArea();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:456
            &return_string = -1;
            foreach("teams");
                &joint_team = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                &joint_team = trim(%&joint_team%);
                &joint_team = regexreplace(&joint_team,"^\s*","");
                ifmatches(%&joint_team%,"\u23E3 (.+)",&found_area,1);
                    &return_string = %&found_area%;
                endif;
            next;
            return(%&return_string%);
        endfunction;
    // info/index/getSkyBlockPlayerListInfo
        // Returns an Array of information extracted from the Hypixel SkyBlock PlayerList.
            // Params:
            //      {string} [...&extract_vars[]]   The variables to extract from the Player List. Valid values are:
            //                                      'AREA', 'SERVER', 'PROFILE', 'BANK', 'SKILLS', 'SPEED', 'STRENGTH',
            //                                      'CRIT_CHANCE', 'CRIT_DAMAGE', 'ATTACK_SPEED'. If no values are provided,
            //                                      will return variables 'AREA', and 'PROFILE' by default.
            //
            // Returns an Array of the extracted variables indexed in the order they were passed to the Function,
            // or if no variables were able to be extracted, the first element of this Array will be -1.
        function getSkyBlockPlayerListInfo(...&extract_vars[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:258
            // Setup valid variables
            if(true);
                &valid_vars[]  = split(", ","AREA, SERVER, PROFILE, BANK, SKILLS, SPEED, STRENGTH, CRIT_CHANCE, CRIT_DAMAGE, ATTACK_SPEED");
                #extract_len   = arraysize(&extract_vars[]);
                assign_default = #extract_len == 0;
                if(!%assign_default%);
                    foreach(&valid_vars[],&valid_var);
                        #extract_idx = indexof(&extract_vars[],,%&valid_var%);
                        if(#extract_idx != -1);
                            &use_out_vars[] = %&valid_var%;
                            #use_out_idxs[] = %#extract_idx%;
                            matched[]       = false;
                        endif;
                    next;
                    #use_out_len   = arraysize(&use_out_vars[]);
                    assign_default = #use_out_len == 0;
                endif;
                
                if(!%assign_default%);
                    sort("ASC",#use_out_idxs[],&use_out_vars[]);
                else;
                    &use_out_vars[] = split(", ","AREA, PROFILE");
                    matched[]       = split(", ","false, false");
                endif;
            endif;
            
            // Compile matches
            if(true);
                #return_index = indexof(&use_out_vars[],,"AREA");
                if(#index_area != -1);
                    &match_names[] = "!C-b";
                    &match_exprs[] = "Area: (.+)"; // Area: Private Island
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SERVER");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!C-c";
                    &match_exprs[%#return_index%] = "Server: (.+)"; // Server: mini787Q
                endif;
                
                #return_index = indexof(&use_out_vars[],,"PROFILE");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-b";
                    &match_exprs[%#return_index%] = "Profile: (.+)"; // Profile: Pineapple
                endif;
                
                #return_index = indexof(&use_out_vars[],,"BANK");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-d";
                    &match_exprs[%#return_index%] = "Bank: (.+)"; // Bank: 50/50
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SKILLS");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-g";
                    &match_exprs[%#return_index%] = "Skills: (.+)"; // Skills: Foraging 17: 24.1%
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SPEED");
                if(#return_index != -1);
                    &tmp_expr_char                = char("10022");
                    &match_names[%#return_index%] = "!D-h";
                    &match_exprs[%#return_index%] = "Speed: %&tmp_expr_char%(.+)"; // Speed: ✦220
                endif;
                
                #return_index = indexof(&use_out_vars[],,"STRENGTH");
                if(#return_index != -1);
                    &tmp_expr_char                = char("10049");
                    &match_names[%#return_index%] = "!D-i";
                    &match_exprs[%#return_index%] = "Strength: %&tmp_expr_char%(.+)"; // Strength: ❁149
                endif;
                
                #return_index = indexof(&use_out_vars[],,"CRIT_CHANCE");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9763");
                    &match_names[%#return_index%] = "!D-j";
                    &match_exprs[%#return_index%] = "Crit Chance: %&tmp_expr_char%(.+)"; // Crit Chance: ☣64
                endif;
                
                #return_index  = indexof(&use_out_vars[],,"CRIT_DAMAGE");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9760");
                    &match_names[%#return_index%] = "!D-k";
                    &match_exprs[%#return_index%] = "Crit Damage: %&tmp_expr_char%(.+)"; // Crit Damage: ☠130
                endif;
                
                #return_index  = indexof(&use_out_vars[],,"ATTACK_SPEED");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9876");
                    &match_names[%#return_index%] = "!D-l";
                    &match_exprs[%#return_index%] = "Attack Speed: %&tmp_expr_char%(.+)"; // Attack Speed: ⚔0
                endif;
            endif;
            
            foreach("players");
                #line_index = indexof(&match_names[],,%PLAYERNAME%);
                if(#line_index != -1);
                    matched[%#line_index%] = true;
                    &line_text             = strip(%PLAYERDISPLAYNAME%);
                    &line_text             = trim(%&line_text%);
                    ifmatches(%&line_text%,%&match_exprs[%#line_index%]%,&capture_group,1);
                        &return_array[%#line_index%] = %&capture_group%;
                        #non_matched_var_index       = indexof(matched[],,false);
                        if(#non_matched_var_index == -1);
                            break;
                        endif;
                    endif;
                endif;
            next;
            
            #return_len = arraysize(&return_array[]);
            if(#return_len == 0);
                &return_array[] = -1;
            endif;
            return(&return_array[]);
        endfunction;
    // info/index/getSkyBlockArea
        // Gets the SkyBlock Server Type that we are currently connected to. Returns SKYBLOCK_HUB, SKYBLOCK_HOME, or OTHER. OTHER is only returned if
        // the Function cannot determine whether it is on a SkyBlock Server, or if it is not on a SkyBlock Server.
            // Params:
            //      None
            //
            // Returns one of the following strings: 'SKYBLOCK_HUB', 'SKYBLOCK_HOME', 'OTHER'. 'OTHER' is returned if none of the functions return any
            // parseable values.
        function getSkyBlockArea();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:577
            &playerlist_area = getSkyBlockPlayerListInfo("AREA");
            if(%&playerlist_area% == "-1");
                &scoreboard_area = getScoreboardSkyBlockArea();
                if(%&scoreboard_area% == "-1");
                    &wtfmap_area = getSkyBlockAreaFromWTFMAP();
                    if(%&wtfmap_area% == "SkyBlock Hub");
                        return("SKYBLOCK_HUB");
                    elseif(%&wtfmap_area% == "SkyBlock Dynamic");
                        return("SKYBLOCK_HOME");
                    endif;
                    return("OTHER");
                elseif(%&playerlist_area% == "Your Island");
                    return("SKYBLOCK_HOME");
                else;
                    return("SKYBLOCK_HUB");
                endif;
            elseif(%&playerlist_area% == "Private Island");
                return("SKYBLOCK_HOME");
            else;
                return("SKYBLOCK_HUB");
            endif;
        endfunction;
    // info/index/isInLimbo
        // Checks if the Player is in Limbo by reading the Dimension, as well as checking to see if there are any signs at the sign positions
        // where they normally are in Limbo.
            // Params:
            //      None
            //
            // Returns a boolean indicating whether or not the Player is in Limbo.
        function isInLimbo();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:475
            if((%YPOS% > 35) || (%DIMENSION% != "END"));
                return(False);
            endif;
            
            #limbo_x = -20;
            #limbo_y = 32;
            #limbo_z = 21;
            
            if((%XPOS% == #limbo_x) && (%YPOS% == #limbo_y) && (%ZPOS% == #limbo_z));
                return(True);
            endif;
            
            &armor_vars[] = split(", ","ITEM, BOOTSID, LEGGINGSID, CHESTPLATEID, HELMID");
            all_air       = true;
            foreach(&armor_vars[],&armor_var);
                &armor_val = "%%&armor_var%%";
                if(%&armor_val% != "air");
                    all_air = false;
                    break;
                endif;
            next;
            if((%SLOTSFULL% == 0) && (%all_air%));
                return(True);
            endif;
            
            #sign_x   = -21;
            #sign_y[] = split(", ","31, 32, 33");
            #sign_z[] = split(", ","20, 21, 22");
            foreach(#sign_y[],#sign_y);
                foreach(#sign_z[],#sign_z);
                    &block_id = getid(%#sign_x%,%#sign_y%,%#sign_z%);
                    if(&block_id == "wall_sign");
                        in_limbo = true;
                        break;
                    endif;
                next;
            next;
        endfunction;
    // info/index/getHypixelGamemodeFromScoreboard
        // Attempts to read the Scoreboard (foreach("teams") ... prefix + suffix ... next) to find the Player's location on Hypixel
            // Params:
            //      None
            //
            // Returns one of the following strings: 'LOBBY', 'SKYBLOCK', or 'OTHER'. 'OTHER' indicates that the function
            // was not able to determine which area the Player is located in.
        function getHypixelGamemodeFromScoreboard();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:382
            &return_string = "OTHER";
            
            // Setup indicator strings
            if(true);
                &match_expr[] = "Games in this lobby are"; // Only shown in Prototype Lobby Servers
                &match_area[] = "LOBBY";
                
                &match_expr[] = "^Achievements: .+$"; // Only shown in Hypixel Main Lobby Servers
                &match_area[] = "LOBBY";
                
                &match_expr[] = "^Purse: [0-9,.]+"; // Only shown in SkyBlock Servers
                &match_area[] = "SKYBLOCK";
                
                &match_expr[] = "^Bits: [0-9,.]+"; // Only shown in SkyBlock Servers
                &match_area[] = "SKYBLOCK";
            endif;
            
            foreach("teams");
                &joint_team = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                &joint_team = trim(%&joint_team%);
                &joint_team = regexreplace(&joint_team,"^\s*","");
                foreach(&match_expr[],&match_expr,#mei);
                    ifmatches(%&joint_team%,%&match_expr%);
                        &return_string = %&match_area[%#mei%]%;
                        break;
                    endif;
                next;
            next;
            
            return(%&return_string%);
        endfunction;
    // info/index/getHypixelGamemode
        // Gets the current Gamemode / Gametype that the Player is in by reading the Scoreboard, etc.
        // Params:
        //      None
        //
        // Returns one of: 'LOBBY', 'LIMBO', 'SKYBLOCK', or 'OTHER'.
        function getHypixelGamemode();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:520
            if(true);
                do(3);
                    // Check to see if we can read the Gamemode from the 9th Hotbar Slot.
                    if(true);
                        #static_hb_end = 44;
                        &found_item    = getslotiteminv(%#static_hb_end%,,#found_stack,#found_data,&found_nbt);
                        &found_nbt     = strip(%&found_nbt%);
                        &found_name    = getItemName(%&found_nbt%,%&found_item%);
                        
                        &known_names[] = split(", ","Lobby Selector (Right Click), SkyBlock Menu (Right Click)");
                        &known_areas[] = split(", ","LOBBY, SKYBLOCK");
                        #known_index   = indexof(&known_names[],,%&found_name%);
                        if(%#known_index% != -1);
                            &return_string = %&known_areas[%#known_index%]%;
                            break;
                        endif;
                    endif;
                    
                    // Cant find the Gamemode from the 9th Hotbar Slot, have to read additional Data. Check to see if we can find any Data from the Playerlist.
                    &skyblock_area = getSkyBlockPlayerListInfo("AREA");
                    if(%&skyblock_area% != "-1");
                        &return_string = "SKYBLOCK";
                        break;
                    endif;
                    
                    // Try to read the location from the Scoreboard.
                    &scoreboard_location = getHypixelGamemodeFromScoreboard();
                    if(%&scoreboard_location% != "OTHER");
                        &return_string = %&scoreboard_location%;
                        break;
                    endif;
                    
                    // Check if we are in Limbo as a last resort
                    in_limbo = isInLimbo();
                    if(%in_limbo%);
                        &return_string = "LIMBO";
                        break;
                    endif;
                    
                    wait("1000ms");
                loop;
            endif;
            
            if(%&return_string% != "");
                return(%&return_string%);
            endif;
            return("OTHER");
        endfunction;
    // misc/index/miscValidate
        // Validates that <&search_term> is found in the <&array[]>, and/or if it is not found in the <&array[]>, the value of the element
        // found at [#default_idx=0] is returned. Set [#default_idx] to -1 to indicate that no default value should be used.
            // Params:
            //      {array} <&elements[]>       The Array to search for <&search_term> in.
            //      {string} <&search_term>     The Search Term to check if exists in <&elements[]>.
            //      {number} [#default_idx=0]   The Index of the Element in <&elements[]> to use as the default return value
            //                                  if <&search_term> is not found within the Array. If -1, will be taken as no default
            //                                  value should be used.
            //
            // Returns the element from the <&elements[]> Array that <&search_term> matches, or if no match was found and [#default_idx]
            // is not -1, the element at [#default_idx] in the <&elements[]> Array. If [#default_idx] is -1, an empty string is returned.
        function miscValidate(&search_term,#default_idx=0,...&elements[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:12
            #term_index = indexof(&elements[],,%&search_term%);
            if(%#term_index% != -1);
                &return_string = %&elements[%#term_index%]%;
            elseif(%#default_idx% != -1);
                &return_string = %&elements[%#default_idx%]%;
            endif;
            return(%&return_string%);
        endfunction;
    // movement/index/gotoServer
        // Given a Server type to get to, gets to the Server type from wherever we are. Returns a boolean indicating
        // whether or not the action was successful.
            // Params:
            //      {string} [&target_server="SKYBLOCK_HOME"]   The target server to get to. Valid values are: 'SKYBLOCK',
            //                                                  'SKYBLOCK_HUB', 'SKYBLOCK_HOME. Defaults to 'SKYBLOCK_HOME'.
            //                                                  If set to 'SKYBLOCK', will accept any SkyBlock server.
            //      {number} [#command_wait_ticks=100]          Amount of ticks to wait between issuing each command needed.
            //      {number} [#timeout_sec=300]                 Amount of seconds to attempt this action before timing out and
            //                                                  returning false. Set to -1 to make the action try to go on indefinitely.
            //                                                  Defaults to 300 (5 minutes).
            //      {boolean} [force_cmd=false]                 If set to true, will force the function to send a command to try and
            //                                                  get to the correct server regardless of whether or not it is already on it
            //                                                  at time of function call.
            //
            // Returns a boolean indicating whether or not the Player is on the [&target_server] at the time of function exit.
        function gotoServer(&target_server="SKYBLOCK_HOME",#command_wait_ticks=100,#timeout_sec=300,force_cmd=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:339
            debug              = true;
            &script_debug_name = "&4gotoServer";
            
            &target_server = miscValidate(%&target_server%,0,"SKYBLOCK_HOME","SKYBLOCK_HUB","SKYBLOCK");
            do_timeout     = #timeout_sec > 0;
            #start_time    = %TIMESTAMP%;
            &encode_vars[] = split(", ","@&auto-restarts-case, @world_changed, BIOME, DIMENSION, XPOS, YPOS, ZPOS"); // Variables used to detect a world change event.
            first_loop     = false;
            #min_tick_wait = %#command_wait_ticks% / 2; // used to ensure we do not spam requests if we switch servers quickly
            
            do;
                if(%do_timeout%);
                    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                    if(%func_timeout%);
                        debug_error(%debug%,%&script_debug_name%,"Function timed out.");
                        break;
                    endif;
                endif;
                
                // Figure out what type of command we are going to need to issue.
                if(!%do_override%);
                    &hypixel_gamemode = getHypixelGamemode(); // 'LOBBY', 'LIMBO', 'SKYBLOCK', or 'OTHER'.
                    debug_log(%debug%,%&script_debug_name%,"force_cmd: %force_cmd%, target_server: %&target_server%, hypixel_gamemode: %&hypixel_gamemode%");
                    if(%&hypixel_gamemode% == "SKYBLOCK");
                        return_boolean = %&target_server% == "SKYBLOCK";
                        if((%return_boolean%) && ((!%force_cmd%) || (%first_loop%)));
                            debug_log(%debug%,%&script_debug_name%,"Got to target_server 'SKYBLOCK'.");
                            break;
                        endif;
                        
                        &skyblock_area = getSkyBlockArea(); // 'SKYBLOCK_HUB', 'SKYBLOCK_HOME', 'OTHER'
                        debug_log(%debug%,%&script_debug_name%,"force_cmd: %force_cmd%, target_server: %&target_server%, hypixel_gamemode: %&hypixel_gamemode%, skyblock_area: %&skyblock_area%");
                        return_boolean = %&target_server% == %&skyblock_area%;
                        if((%return_boolean%) && ((!%force_cmd%) || (%first_loop%)));
                            debug_log(%debug%,%&script_debug_name%,"Got to target_server '%&skyblock_area%'.");
                            break;
                        endif;
                        
                        if(%&skyblock_area% == "SKYBLOCK_HUB");
                            if((%force_cmd%) && (%&target_server% == "SKYBLOCK_HUB"));
                                &echo_command = "/warp hub";
                            else;
                                &echo_command = "/warp home";
                            endif;
                        elseif(%&skyblock_area% == "SKYBLOCK_HOME");
                            &echo_command = "/warp hub";
                        elseif(%&skyblock_area% == "OTHER");
                            &echo_command = "/lobby";
                        endif;
                    elseif(%&hypixel_gamemode% == "LIMBO");
                        &echo_command = "/lobby";
                    elseif(%&hypixel_gamemode% == "LOBBY");
                        &echo_command = "/play skyblock";
                    elseif(%&hypixel_gamemode% == "OTHER");
                        &echo_command = "/lobby";
                    endif;
                else;
                    // Issue the override "/lobby" command to break out of the "Cannot send chat message" loop.
                    &echo_command = "/lobby";
                    do_override   = false;
                endif;
                debug_log(%debug%,%&script_debug_name%,"echo_command: &d%&echo_command%");
                
                // Issue the command and wait for an update in our environment variables.
                if(true);
                    if((#waited_ticks > 0) && (#waited_ticks < #command_wait_ticks));
                        do;
                            wait("1t");
                            inc(#waited_ticks);
                        until(%#waited_ticks% >= %#command_wait_ticks%);
                    endif;
                
                    foreach(&encode_vars[],&encode_var,#evi);
                        ifmatches(%&encode_var%,"(?-i:[a-z])"); // Unset any global variables, i.e. '@world_changed'.
                            unset(%&encode_var%);
                        endif;
                        &initial_vals[%#evi%] = "%%&encode_var%%";
                    next;
                    
                    debug_log(%debug%,%&script_debug_name%,"running %&echo_command%");
                    echo(%&echo_command%);
                    env_updated   = false;
                    #waited_ticks = 0;
                    do(%#command_wait_ticks%);
                        wait("1t");
                        inc(#waited_ticks);
                        foreach(&encode_vars[],&encode_var,#evi);
                            &encode_val = "%%&encode_var%%";
                            if(%&initial_vals[%#evi%]% != %&encode_val%);
                                env_updated = true; // Break early as soon as we detect some sort of change in our environment.
                                break;
                            endif;
                        next;
                    until(%env_updated%);
                    
                    // Check to see if we hit the @&auto-restarts-case ("Cannot send chat message")
                    if(%@&auto-restarts-case% != "");
                        do_override = true;
                    endif;
                endif;
                
                first_loop = true;
            until((%func_timeout%) || ((%return_boolean%) && ((!%force_cmd%) || (%first_loop%))));
            
            return(%return_boolean%);
        endfunction;
    // movement/index/getMiddlePointCoordRange
        // Given a minimum and maximum coordinate string, splits both of them, then finds the middle most value.
            // Params:
            //      {string} <&min_coord_string>    The minimum coordinate string
            //      {string} <&max_coord_string>    The maximum coordinate string
            //
            // Returns an Array where the 0th element is the XPOS, 1st is YPOS, and 2nd is ZPOS. The value is the
            // middle point (min X + max X / 2, etc) of each coordinate point.
        function getMiddlePointCoordRange(&min_coord_string,&max_coord_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:105
            #min_coord[] = splitCoordString(%&min_coord_string%);
            #max_coord[] = splitCoordString(%&max_coord_string%);
            
            #avg_pos_x   = (%#min_coord[0]% + %#max_coord[0]%) / 2;
            #avg_pos_y   = (%#min_coord[1]% + %#max_coord[1]%) / 2;
            #avg_pos_z   = (%#min_coord[2]% + %#max_coord[2]%) / 2;
            
            log("getMiddlePointCoordRange: avg x %#avg_pos_x%, avg y %#avg_pos_y%, avg z %#avg_pos_z%");
            return(%#avg_pos_x%,%#avg_pos_y%,%#avg_pos_z%);
        endfunction;
    // movement/index/expandCoordStringToRange
        // Given a coordinate string, splits it up by tunnel characters and returns the minimum and maximum
        // coordinate strings, evaluated by +/- [#expand_by] to each coordinate point.
            // Params:
            //      {string} [&coord_string="%XPOS%|%YPOS%|%ZPOS%"] The coordinate string to split up
            //      {number} [#expand_by=1]                         The offset to apply to each coordinate point
            //
            // Returns an Array where the first element is the minimum string and second element is maximum string.
        function expandCoordStringToRange(&coord_string="%XPOS%|%YPOS%|%ZPOS%",#expand_by=1);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:85
            #expand_greater = %#expand_by%;
            #expand_lesser  = %#expand_by% * -1;
            #coord_array[]  = splitCoordString(%&coord_string%);
            foreach(#coord_array[],#coord_pos,#cpi);
                #min_coord[%#cpi%] = %#coord_pos% + %#expand_lesser%;
                #max_coord[%#cpi%] = %#coord_pos% + %#expand_greater%;
            next;
            &min_string = join("|",#min_coord[]);
            &max_string = join("|",#max_coord[]);
            return(%&min_string%,%&max_string%);
        endfunction;
    // movement/index/goto
        // Given a position string (and/or a server and coordinate string), gets the Player to the
        // required Server then moves them to the required position.
            // Params:
            //      {string} [&position]        The name of the pre-defined position to move to. Valid strings are:
                //  'HUB'                   : SkyBlock Hub
                //  'HOME'                  : SkyBlock Home (Private Island)
                //  'BANKER'                : SkyBlock Hub => Banker NPC
                //  'BAZAAR'                : SkyBlock Hub => Bazaar NPC
                // Note that in order to use the 'BAZAAR' or 'BAZAAR_AGENT' term, Chat Filter must be setup with 'You need level 7 in Farming, Foraging and Mining to access this feature!'
                // in order to cancel the function in the event that the User is not yet level 10.
                //  'BUILDER'               : SkyBlock Hub => Builder NPC
                //  'MAD_REDSTONE_ENGINEER' : SkyBlock Hub => Builder NPC => Downstairs Redstone NPC (alt. strings: 'REDSTONE_ENGINEER', 'REDSTONE_MERCHANT')
                //  'BITS'                  : SkyBlock Hub => Elizabeth NPC (Community Center)
                //  'ALCHEMIST'             : SkyBlock Hub => Alchemist NPC
                //  'AUCTION'               : SkyBlock Hub => Auction NPC
                //  'JACOB'                 : SkyBlock Hub => Jacob NPC
                //  Note that in order to use the 'JACOB' term, Chat Filter must be setup with '\[NPC\] Jacob: You need Farming 10 to participate!' in order to cancel
                //  the function in the event that the User is not yet level 10.
                //  'ANITA'                 : SkyBlock Hub => Anita NPC
                //  'ANVIL'                 : SkyBlock Hub => Anvil (at Blacksmith)
                //  'REFORGE_ANVIL'         : SkyBlock Hub => Reforge Anvil (at Blacksmith / Smithmonger)
                //  'ENCHANTMENT_TABLE'     : SkyBlock Hub => Enchantment Table Building (Library)
                //  'LIBRARIAN'             : SkyBlock Hub => Librarian NPC
                //  'FREE_COOKIE'           : SkyBlock Hub => Community Center => City Project
                //  'WHEAT_FIELDS'          : SkyBlock Hub => Wheat Fields
                //  'COAL_MINE'             : SkyBlock Hub => Coal Mine
                //  'GOLD_MINE'             : SkyBlock Hub => Coal Mine => Gold Mine
                //  'FOREST'                : SkyBlock Hub => Forest
                //  'HUB_SECLUDED'          : SkyBlock Hub => Random secluded location
                //  'HUB_SELECTOR'          : SkyBlock Hub => Hub Selector NPC (alt. strings              : 'SELECTOR')
                //  'FARM_MERCHANT'         : SkyBlock Hub => Farm Merchant NPC (alt. strings             : 'FARM', 'FARM MERCHANT', 'FARMER', 'FARMER MERCHANT')
                //  'MINE_MERCHANT'         : SkyBlock Hub => Mine Merchant NPC (alt. strings             : 'MINE', 'MINE MERCHANT', 'MINER', 'MINER MERCHANT')
                //  'LUMBER_MERCHANT'       : SkyBlock Hub => Lumber Merchant NPC (alt. strings           : 'LUMBER', 'LUMBER MERCHANT')
            //      {boolean} [open_gui=false]  Whether or not to open the GUI this Position is bound to once we have
            //                                  arrived.
            //      {number} [#timeout_sec=300] Amount of seconds to continue to attempt to execute this movement for before
            //                                  timing out and returning false. If set to -1, will take it as no timeout, do it
            //                                  forever until successful completion.
            //      {string} [&server]          The name of the Server the position exists on. Only required if
            //                                  [&position] is omitted. Valid values are 'HUB', 'HOME'.
            //      {string} [&coord_string]    The coordinate string of the position to move to in format X|Y|Z.
            //                                  Only required if [&position] is omitted and [&server] is provided.
            //
            // Returns a boolean indicating whether or not the movement was successful.
        function goto(&position,open_gui=false,#timeout_sec=300,&server,&coord_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:491
            // Check if need to setup position string indexes
            if(true);
                #pos_param_len = arraysize(@&goto_pos_params[]);
                #last_build    = %@#goto_pos_last_build%;
                &curr_config   = %CONFIG%;
                &curr_config   = regexreplace(&curr_config,"-dev$","");
                #curr_build    = getbuild(%&curr_config%);
                refresh_index  = ((#pos_param_len == 0) || (#last_build == 0) || ((#last_build != #curr_build) && (#curr_build != -1)));
                
                if(%refresh_index%);
                    unset(@&goto_pos_params[]);         // parameters used to select a position to go to
                    unset(@&goto_pos_min[]);            // min coordinate bound strings
                    unset(@&goto_pos_max[]);            // max coordinate bound strings
                    unset(@&goto_pos_server[]);         // server type (hub, home)
                    unset(@&goto_pos_entity[]);         // entity name for use in foreach ... entities or NULL if no entity
                    unset(@&goto_pos_container[]);      // name of container if entity or goto_pos_override_look
                    unset(@&goto_pos_override_look[]);  // coordinate string to calcyawto & look at if not entity
                    unset(@&goto_pos_chat_cancel[]);    // pointer to global bool var to unset before actions, if turns true while running, cancel
                    
                    if(true);
                        // Home / Private Island
                            @&goto_pos_params[]        = "HOME";
                            @&goto_pos_min[]           = "NULL";
                            @&goto_pos_max[]           = "NULL";
                            @&goto_pos_server[]        = "SKYBLOCK_HOME";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Hub Spawnpoint @ Hub
                            @&goto_pos_params[]        = "HUB";
                            @&goto_pos_min[]           = "-4|69|-71";
                            @&goto_pos_max[]           = "-2|71|-69";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Hub Selector @ Village
                            @&goto_pos_params[]        = "HUB_SELECTOR, SELECTOR, SERVER_SELECTOR, SERVER SELECTOR, HUB SELECTOR";
                            @&goto_pos_min[]           = "-12|69|-70";
                            @&goto_pos_max[]           = "-10|71|-68";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Hub Selector";
                            @&goto_pos_container[]     = "SkyBlock Hub Selector";
                            @&goto_pos_override_look[] = "-10.0|71.5|-67.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Banker @ Bank
                            @&goto_pos_params[]        = "BANKER";
                            @&goto_pos_min[]           = "-26|70|-62";
                            @&goto_pos_max[]           = "-24|72|-60";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Banker";
                            @&goto_pos_container[]     = "^(?:Bank|Personal Bank Account)$";
                            @&goto_pos_override_look[] = "-24.5|72.5|-58.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bazaar @ Bazaar Alley
                            &char_unicode_escaped      = "\u279C"; // bazaar fat arrow
                            @&goto_pos_params[]        = "BAZAAR";
                            @&goto_pos_min[]           = "-32|69|-77";
                            @&goto_pos_max[]           = "-30|71|-75";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bazaar";
                            @&goto_pos_container[]     = "Bazaar %&char_unicode_escaped% (?:Farming|Mining|Combat|Woods & Fishes|Oddities)";
                            @&goto_pos_override_look[] = "-32.5|72.5|-76.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_bazaar";
                        // Lumber Merchant @ Village
                            @&goto_pos_params[]        = "LUMBER_MERCHANT, LUMBER, LUMBER MERCHANT";
                            @&goto_pos_min[]           = "-51|69|-72";
                            @&goto_pos_max[]           = "-49|71|-70";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Lumber Merchant";
                            @&goto_pos_container[]     = "Lumber Merchant";
                            @&goto_pos_override_look[] = "-49.5|71.5|-68.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Builder @ Builder's House
                            @&goto_pos_params[]        = "BUILDER";
                            @&goto_pos_min[]           = "-53|70|-31";
                            @&goto_pos_max[]           = "-51|72|-29";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Builder";
                            @&goto_pos_container[]     = "Builder";
                            @&goto_pos_override_look[] = "-51.0|72.5|-27.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Wool Weaver @ Builder's House
                            @&goto_pos_params[]        = "WOOL_WEAVER, WOOL WEAVER, WOOL";
                            @&goto_pos_min[]           = "-48|73|-34";
                            @&goto_pos_max[]           = "-46|75|-32";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Wool Weaver";
                            @&goto_pos_container[]     = "Wool Weaver";
                            @&goto_pos_override_look[] = "-47.0|75.5|-30.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Mad Redstone Engineer @ Builder's House
                            @&goto_pos_params[]        = "MAD_REDSTONE_ENGINEER, REDSTONE_ENGINEER, REDSTONE_MERCHANT, MAD RESTONE ENGINEER, REDSTONE ENGINEER, REDSTONE MERCHANT, REDSTONE";
                            @&goto_pos_min[]           = "-54|64|-32";
                            @&goto_pos_max[]           = "-52|66|-30";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Mad Redstone Engineer";
                            @&goto_pos_container[]     = "Mad Redstone Engineer";
                            @&goto_pos_override_look[] = "-52.0|66.5|-29.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Lumberjack @ Forest
                            @&goto_pos_params[]        = "LUMBERJACK, FOREST";
                            @&goto_pos_min[]           = "-113|73|-37";
                            @&goto_pos_max[]           = "-111|75|-35";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Lumberjack";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "-112.5|75.5|-36.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Adventurer @ Village
                            @&goto_pos_params[]        = "ADVENTURER, ADVENTURER_MERCHANT";
                            @&goto_pos_min[]           = "-43|69|-68";
                            @&goto_pos_max[]           = "-41|71|-66";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Adventurer";
                            @&goto_pos_container[]     = "Adventurer";
                            @&goto_pos_override_look[] = "-41.5|71.5|-64.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bazaar Agent @ Bazaar Alley
                            &char_unicode_escaped      = "\u279C"; // bazaar fat arrow
                            @&goto_pos_params[]        = "BAZAAR_AGENT";
                            @&goto_pos_min[]           = "-41|69|-79";
                            @&goto_pos_max[]           = "-39|71|-77";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bazaar Agent";
                            @&goto_pos_container[]     = "Bazaar %&char_unicode_escaped% (?:Farming|Mining|Combat|Woods & Fishes|Oddities)";
                            @&goto_pos_override_look[] = "-39.5|71.5|-78.90625";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_bazaar";
                        // Vault @ Bank
                            @&goto_pos_params[]        = "VAULT";
                            @&goto_pos_min[]           = "-29|70|-63";
                            @&goto_pos_max[]           = "-27|72|-61";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Vault";
                            @&goto_pos_container[]     = "^(?:Unlock Bank|Personal) Vault\??$";
                            @&goto_pos_override_look[] = "-28.5|72.8125|-61.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Alchemist @ Village
                            @&goto_pos_params[]        = "ALCHEMIST";
                            @&goto_pos_min[]           = "41|69|-63";
                            @&goto_pos_max[]           = "43|71|-61";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Alchemist";
                            @&goto_pos_container[]     = "Alchemist";
                            @&goto_pos_override_look[] = "41.5|71.5|-63.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Fish Merchant @ Village
                            @&goto_pos_params[]        = "FISH_MERCHANT, FISH MERCHANT, FISH";
                            @&goto_pos_min[]           = "49|67|-84";
                            @&goto_pos_max[]           = "51|69|-82";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Fish Merchant";
                            @&goto_pos_container[]     = "Fish Merchant";
                            @&goto_pos_override_look[] = "52.5|69.5|-82.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Plumber Joe @ Village
                            @&goto_pos_params[]        = "PLUMBER_JOE, PLUMBER JOE, PLUMBER";
                            @&goto_pos_min[]           = "56|69|-80";
                            @&goto_pos_max[]           = "58|71|-78";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Plumber Joe";
                            @&goto_pos_container[]     = "Plumber Joe";
                            @&goto_pos_override_look[] = "56.5|71.59375|-77.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Kat @ Village
                            @&goto_pos_params[]        = "KAT";
                            @&goto_pos_min[]           = "32|70|-102";
                            @&goto_pos_max[]           = "34|72|-100";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Kat";
                            @&goto_pos_container[]     = "Pet Sitter";
                            @&goto_pos_override_look[] = "34.5|72.59375|-100.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Zog @ Village
                            @&goto_pos_params[]        = "ZOG";
                            @&goto_pos_min[]           = "32|69|-95";
                            @&goto_pos_max[]           = "34|71|-93";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Zog";
                            @&goto_pos_container[]     = "Zog";
                            @&goto_pos_override_look[] = "33.5|71.5|-95.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bea @ Village
                            @&goto_pos_params[]        = "BEA";
                            @&goto_pos_min[]           = "27|69|-92";
                            @&goto_pos_max[]           = "29|71|-90";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bea";
                            @&goto_pos_container[]     = "Bea";
                            @&goto_pos_override_look[] = "30.5|71.5|-90.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // George @ Village
                            @&goto_pos_params[]        = "GEORGE";
                            @&goto_pos_min[]           = "31|76|-93";
                            @&goto_pos_max[]           = "33|78|-91";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "George";
                            @&goto_pos_container[]     = "Offer Pets";
                            @&goto_pos_override_look[] = "32.5|78.5|-93.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Jacob @ Farmhouse
                            @&goto_pos_params[]        = "JACOB";
                            @&goto_pos_min[]           = "21|70|-69";
                            @&goto_pos_max[]           = "23|72|-67";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Jacob";
                            @&goto_pos_container[]     = "Jacob's Farming Contests";
                            @&goto_pos_override_look[] = "23.0|72.5|-69.0";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_jacob";
                        // Anita @ Farmhouse
                            @&goto_pos_params[]        = "ANITA";
                            @&goto_pos_min[]           = "23|76|-71";
                            @&goto_pos_max[]           = "25|78|-69";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Anita";
                            @&goto_pos_container[]     = "Anita";
                            @&goto_pos_override_look[] = "23.0|78.5|-69.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Farm Merchant @ Village
                            @&goto_pos_params[]        = "FARM_MERCHANT, FARM MERCHANT, FARMER_MERCHANT, FARMER MERCHANT, FARMER, FARM";
                            @&goto_pos_min[]           = "13|69|-73";
                            @&goto_pos_max[]           = "15|71|-71";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Farm Merchant";
                            @&goto_pos_container[]     = "Farm Merchant";
                            @&goto_pos_override_look[] = "15.5|71.5|-71.78125";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Elizabeth @ Community Center
                            @&goto_pos_params[]        = "ELIZABETH, BITS";
                            @&goto_pos_min[]           = "0|70|-103";
                            @&goto_pos_max[]           = "2|72|-101";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Elizabeth";
                            @&goto_pos_container[]     = "Community Shop";
                            @&goto_pos_override_look[] = "0.0|72.5|-101.0";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_elizabeth";
                        // City Project @ Community Center
                            @&goto_pos_params[]        = "FREE_COOKIE, CITY_PROJECT";
                            @&goto_pos_min[]           = "8|72|-110";
                            @&goto_pos_max[]           = "10|74|-108";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "CITY PROJECT";
                            @&goto_pos_container[]     = "Project";
                            @&goto_pos_override_look[] = "12.0|73.53125|-108.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Auction Agent @ Auction House
                            @&goto_pos_params[]        = "AUCTIONS, AUCTION, AUCTION_HOUSE, AUCTION HOUSE, AH";
                            @&goto_pos_min[]           = "-32|71|-89";
                            @&goto_pos_max[]           = "-30|73|-87";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Auction Agent";
                            @&goto_pos_container[]     = "(?:Co-op )?Auction House";
                            @&goto_pos_override_look[] = "-31.0|74.5|-85.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_ah";
                        // Librarian @ Library
                            @&goto_pos_params[]        = "LIBRARIAN, LIBRARY, LIBRARIAN_MERCHANT, LIBRARY_MERCHANT, LIBRARIAN MERCHANT, LIBRARY MERCHANT";
                            @&goto_pos_min[]           = "-36|68|-113";
                            @&goto_pos_max[]           = "-34|70|-111";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Librarian";
                            @&goto_pos_container[]     = "Librarian";
                            @&goto_pos_override_look[] = "-35.5|70.59375|-112.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Enchanting Table @ Library
                            @&goto_pos_params[]        = "ENCHANTMENT_TABLE, ENCHANTMENT TABLE, ENCHANTMENT, ENCHANTING_TABLE, ENCHANTING TABLE, ENCHANTING, ENCHANT_TABLE, ENCHANT TABLE, ENCHANT";
                            @&goto_pos_min[]           = "-36|68|-113";
                            @&goto_pos_max[]           = "-34|70|-111";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Enchant Item";
                            @&goto_pos_override_look[] = "-37|69|-111";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Mine Merchant @ Coal Mine
                            @&goto_pos_params[]        = "MINE_MERCHANT, MINE MERCHANT, MINER_MERCHANT, MINER MERCHANT, MINE, MINER";
                            @&goto_pos_min[]           = "-10|67|-124";
                            @&goto_pos_max[]           = "-8|69|-122";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Mine Merchant";
                            @&goto_pos_container[]     = "Mine Merchant";
                            @&goto_pos_override_look[] = "-9.0|69.5|-125.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Blacksmith @ Blacksmith
                            @&goto_pos_params[]        = "ANVIL";
                            @&goto_pos_min[]           = "-29|68|-128";
                            @&goto_pos_max[]           = "-27|70|-126";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Anvil";
                            @&goto_pos_override_look[] = "-28|69|-129";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Smithmonger @ Blacksmith
                            @&goto_pos_params[]        = "SMITHMONGER";
                            @&goto_pos_min[]           = "-32|68|-137";
                            @&goto_pos_max[]           = "-30|70|-135";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Smithmonger";
                            @&goto_pos_container[]     = "Smithmonger";
                            @&goto_pos_override_look[] = "-32.5|70.59375|-135.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_smithmonger";
                        // Reforge Anvil @ Blacksmith/Smithmonger
                            @&goto_pos_params[]        = "REFORGE_ANVIL, REFORGE ANVIL, REFORGE";
                            @&goto_pos_min[]           = "-32|68|-137";
                            @&goto_pos_max[]           = "-30|70|-135";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Reforge Item \(Advanced\)";
                            @&goto_pos_override_look[] = "-29|69|-137";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Wheat Fields @ Farm in Hub
                            @&goto_pos_params[]        = "WHEAT_FIELDS, WHEAT FIELDS, WHEAT, FIELDS";
                            @&goto_pos_min[]           = "42|70|-144";
                            @&goto_pos_max[]           = "44|72|-142";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Coal Mine @ Coal Mine in Hub
                            @&goto_pos_params[]        = "COAL_MINE, COAL MINE, COAL";
                            @&goto_pos_min[]           = "-21|70|-166";
                            @&goto_pos_max[]           = "-19|72|-164";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                    endif;
                    
                    @#goto_pos_last_build = %#curr_build%;
                endif;
            endif;
            
            // Find the position we are going to need to go to.
            if(true);
                #position_index = -1;
                if(%&position% != "");
                    foreach(@&goto_pos_params[],&goto_pos_params,#gpi);
                        &goto_pos_params[] = split(", ",%&goto_pos_params%);
                        #goto_pos_index    = indexof(&goto_pos_params[],,%&position%);
                        if(#goto_pos_index != -1);
                            debug_log(%@fn_debug%,%&script_debug_name%,"goto > pos found in %&goto_pos_params% (%&goto_pos_params[%#goto_pos_index%]%)");
                            #position_index = #gpi;
                            break;
                        endif;
                    next;
                endif;
                if(#position_index != -1);
                    #auction_index          = indexof(&goto_pos_params[],,"AUCTION");
                    if(#auction_index != -1);
                        #auction_y      =  72;
                        #auction_min_x  = -39;
                        #auction_max_x  = -29;
                        #auction_row_z1 = -88;
                        #auction_row_z2 = -94;
                        
                        
                    else;
                        &goto_pos_min = %@&goto_pos_min[%#position_index%]%;
                        &goto_pos_max = %@&goto_pos_max[%#position_index%]%;
                    endif;
                    &goto_pos_server        = %@&goto_pos_server[%#position_index%]%;
                    &goto_pos_entity        = %@&goto_pos_entity[%#position_index%]%;
                    &goto_pos_container     = %@&goto_pos_container[%#position_index%]%;
                    &goto_pos_override_look = %@&goto_pos_override_look[%#position_index%]%;
                    &goto_pos_chat_cancel   = %@&goto_pos_chat_cancel[%#position_index%]%;
                elseif((%&server% != "") && (%&coord_string% != ""));
                    &goto_pos_arr[]         = expandCoordStringToRange(%&coord_string%);
                    &goto_pos_min           = %&goto_pos_arr[0]%;
                    &goto_pos_max           = %&goto_pos_arr[1]%;
                    &goto_pos_server        = %&server%;
                    &goto_pos_entity        = "NULL";
                    &goto_pos_container     = "NULL";
                    &goto_pos_override_look = "NULL";
                    &goto_pos_chat_cancel   = "NULL";
                endif;
            endif;
            
            // Start moving towards the position we need to go to.
            if(true);
                // Setup loop variables
                if(true);
                    do_timeout      = #timeout_sec != -1;
                    #start_time     = %TIMESTAMP%;
                    #fn_timeout     = -1
                    do_open_gui     = ((%open_gui%) && (%&goto_pos_container% != "") && (%&goto_pos_container% != "NULL"));
                    log("do_open_gui : %do_open_gui%")
                    do_coord_bound  = ((%&goto_pos_min% != "NULL") && (%&goto_pos_max% != "NULL"));
                    if(%do_coord_bound%);
                        log("goto_pos_min %&goto_pos_min%, goto_pos_max %&goto_pos_max%")
                        #goto_pos_avg[] = getMiddlePointCoordRange(%&goto_pos_min%,%&goto_pos_max%);
                        #goto_pos_min[] = splitCoordString(%&goto_pos_min%);
                        #goto_pos_max[] = splitCoordString(%&goto_pos_max%);
                        
                        // Setup coordinate position points
                        if(true);
                            #goto_pos_min_x = %#goto_pos_min[0]%;
                            #goto_pos_min_y = %#goto_pos_min[1]%;
                            #goto_pos_min_z = %#goto_pos_min[2]%;
                            
                            #goto_pos_max_x = %#goto_pos_max[0]%;
                            #goto_pos_max_y = %#goto_pos_max[1]%;
                            #goto_pos_max_z = %#goto_pos_max[2]%;
                            
                            #goto_pos_avg_x = %#goto_pos_avg[0]%;
                            #goto_pos_avg_y = %#goto_pos_avg[1]%;
                            #goto_pos_avg_z = %#goto_pos_avg[2]%;
                            &goto_pos_avg   = "%#goto_pos_avg_x%|%#goto_pos_avg_y%|%#goto_pos_avg_z%";
                        endif;
                    endif;
                    
                    use_override_look = ((%do_open_gui%) && (%&goto_pos_override_look% != "NULL"));
                    if(%use_override_look%);
                        &override_look_pos[] = splitCoordString(%&goto_pos_override_look%);
                        &calc_look_x         = %&override_look_pos[0]%;
                        &calc_look_y         = %&override_look_pos[1]%;
                        &calc_look_z         = %&override_look_pos[2]%;
                    endif;
                    
                    use_chat_cancel = ((%do_open_gui%) && (%&goto_pos_chat_cancel% != "NULL"));
                    if(%use_chat_cancel%);
                        unset(%&goto_pos_chat_cancel%);
                    endif;
                    
                    #static_hub_x = -3;
                    #static_hub_y = 70;
                    #static_hub_z = -70;
                endif;
                do;
                    // Check if we should timeout and exit early
                    if(true);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            break;
                        elseif(%do_timeout%);
                            #elapsed_sec = %TIMESTAMP% - #start_time;
                            #fn_timeout  = #timeout_sec - #elapsed_sec;
                        endif;
                    endif;
                    
                    on_server = gotoServer(%&goto_pos_server%,100,%#fn_timeout%);
                    if(%on_server%);
                        // If we are on the correct server, check to see if we can exit now, or if we need to do more stuff.
                        pos_condition = !%do_coord_bound%;
                        if(%do_coord_bound%);
                            in_bounds_x   = withinBounds(%XPOS%,%#goto_pos_min_x%,%#goto_pos_max_x%);
                            in_bounds_y   = withinBounds(%YPOS%,%#goto_pos_min_y%,%#goto_pos_max_y%);
                            in_bounds_z   = withinBounds(%ZPOS%,%#goto_pos_min_z%,%#goto_pos_max_z%);
                            pos_condition = ((%in_bounds_x%) && (%in_bounds_y%) && (%in_bounds_z%));
                            debug_log(%@fn_debug%,%&script_debug_name%,"goto > in_bounds_x : %in_bounds_x%, in_bounds_y = %in_bounds_y%, in_bounds_z = %in_bounds_z%");
                        endif;
                        
                        gui_condition = !%do_open_gui%;
                        if(%do_open_gui%);
                            gui_condition = regexTest(%CONTAINERNAME%,%&goto_pos_container%);
                            log("gui_condition : %gui_condition% (%CONTAINERNAME%, %&goto_pos_container%)");
                            if(%use_chat_cancel%);
                                chat_cancel_val := "%%&goto_pos_chat_cancel%%";
                                if(%chat_cancel_val%);
                                    log("chat cancelled")
                                    break;
                                endif;
                            endif;
                        endif;
                        
                        return_boolean = ((%pos_condition%) && (%gui_condition%));
                        log("return_boolean: %return_boolean%")
                        if(!%return_boolean%);
                            if(!%pos_condition%);
                                use_baritone = %&goto_pos_server% != "SKYBLOCK_HUB";
                                
                                // If the server is HUB, check to see if it would be faster for us to /warp hub => navigate instead of just going there using Baritone.
                                if(%&goto_pos_server% == "SKYBLOCK_HUB");
                                    #curr_dist_x   = absDiff(%#goto_pos_avg_x%,%XPOS%);
                                    #curr_dist_y   = absDiff(%#goto_pos_avg_y%,%YPOS%);
                                    #curr_dist_z   = absDiff(%#goto_pos_avg_z%,%ZPOS%);
                                    #curr_sum_dist = #curr_dist_x + #curr_dist_y + #curr_dist_z;
                                    #hub_dist_x    = absDiff(%#goto_pos_avg_x%,%#static_hub_x%);
                                    #hub_dist_y    = absDiff(%#goto_pos_avg_y%,%#static_hub_y%);
                                    #hub_dist_z    = absDiff(%#goto_pos_avg_z%,%#static_hub_z%);
                                    #hub_sum_dist  = #hub_dist_x + #hub_dist_y + #hub_dist_z;
                                    use_baritone   = #hub_sum_dist >= #curr_sum_dist;
                                    
                                    &log_vars[] = split(", ","#curr_dist_x, #curr_dist_y, #curr_dist_z, #curr_sum_dist, #hub_dist_x, #hub_dist_y, #hub_dist_z, #hub_sum_dist, use_baritone");
                                    foreach(&log_vars[],&log_var,#lvi);
                                        &log_val = "%%&log_var%%";
                                        log("&7%#lvi% > %&log_var% : &d%&log_val%");
                                    next;
                                    
                                    if(!%use_baritone%);
                                        if(%do_timeout%);
                                            #elapsed_sec = %TIMESTAMP% - #start_time;
                                            #fn_timeout  = #timeout_sec - #elapsed_sec;
                                        endif;
                                        on_server = gotoServer("SKYBLOCK_HUB",100,%#fn_timeout%,true);
                                    endif;
                                endif;
                                
                                if(%use_baritone%);
                                    // Use Baritone to navigate to the "average" position.
                                    log("goto > 2154 goto_pos_avg : %&goto_pos_avg%")
                                    baritone_outcome = baritoneGoto(%&goto_pos_avg%,,%#fn_timeout%);
                                    if((%gui_condition%) && (%baritone_outcome%));
                                        return_boolean = true;
                                        break;
                                    endif;
                                endif;
                            elseif(!%gui_condition%);
                                // Attempt to open the correct Container.
                                if(!%use_override_look%);
                                    &entity_pos[] = getEntityPos(".*%&goto_pos_entity%",,5,true);
                                    &calc_look_x  = %&entity_pos[0]%;
                                    if(%&calc_look_x% == "");
                                        log("&4Unexpected Error in movement/index.txt fn#Goto: Cannot find entity with name &e%&goto_pos_entity%&4!")
                                        break;
                                    endif;
                                    &calc_look_y  = %&entity_pos[1]%;
                                    &calc_look_z  = %&entity_pos[2]%;
                                endif;
                                #calc_vars[] = fnCalcYawTo(%&calc_look_x%,%&calc_look_y%,%&calc_look_z%);
                                #calc_yaw    = %#calc_vars[0]%;
                                #calc_dist   = %#calc_vars[1]%;
                                #calc_pitch  = %#calc_vars[2]%;
                                localGUI("NONE");
                                
                                looks(%#calc_yaw%,%#calc_pitch%,"0.500");
                                key("use");
                                &init_container_string = getContainerString();
                                do(20);
                                    new_gui = enteredNewGUI(%&init_container_string%);
                                    wait("1t");
                                until(%new_gui%);
                            endif;
                        endif;
                    else;
                        // Not on Server, not really sure how to fix this ...
                        log("&4Unexpected Error in movement/index.txt fn#Goto: Not on correct Hypixel Server after attempting fn#GotoServer")
                        break;
                    endif;
                until((%return_boolean%) || (%func_timeout%));
            endif;
            
            return(%return_boolean%);
        endfunction;
    // tablist/index/getGodPotionExpiryTimestamp
        // Reads the Tab List to find whether or not the Player has a God Potion effect enabled. If so,
        // returns the Seconds Timestamp of when that God Potion will expire. If not, returns -1.
            // Params:
            //      None
            //
            // Returns the Seconds Timestamp of when the Effect expires, or -1 if the Effect is not active.
        function getGodPotionExpiryTimestamp();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:26
            &time_expression = "You have a God Potion active! (?:(\d+):)?(?:(\d+):)?(?:(\d+))";
            #expiry_ts       = -1;
            foreach("tablist");
                ifmatches(%CLEANLINE%,%&time_expression%);
                    match(%CLEANLINE%,%&time_expression%,{#hours,#minutes,#seconds});
                    #expiry_ts = %TIMESTAMP% + ((#days * 86400) + (#hours * 3600) + (#minutes * 60) + #seconds);
                    log("%#hours% hours, %#minutes% minutes, %#seconds% seconds")
                    break;
                endif;
            next;
            return(#expiry_ts);
        endfunction;
    // tablist/index/getCookieExpiryTimestamp
        // Reads the Tab List to find whether or not the Player has a Booster Cookie effect enabled. If so,
        // returns the Seconds Timestamp of when that Booster Cookie will expire. If not, returns -1.
            // Params:
            //      None
            //
            // Returns the Seconds Timestamp of when the Effect expires, or -1 if the Effect is not active.
        function getCookieExpiryTimestamp();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:7
            &time_expression = "(?:(\d+)d\s*)?(?:(\d+)h\s*)?(?:(\d+)m\s*)?(?:(\d+)s)";
            #expiry_ts       = -1;
            foreach("tablist");
                ifmatches(%CLEANLINE%,"Cookie Buff\n(.+)",&cookie_buff_time,1);
                    match(%&cookie_buff_time%,%&time_expression%,{#days,#hours,#minutes,#seconds});
                    #expiry_ts = %TIMESTAMP% + ((#days * 86400) + (#hours * 3600) + (#minutes * 60) + #seconds);
                    break;
                endif;
            next;
            return(#expiry_ts);
        endfunction;
    // tablist/index/getEffectExpiryTimestamp
        // Wrapper that dynamically calls getCookieExpiryTimestamp or getGodPotionExpiryTimestamp based on input.
            // Params:
            //      {string} [&type="COOKIE"]   The Effect Type to get the Expiry Timestamp of. One of: 'COOKIE', 'GODPOT'.
            //
            // Returns the Seconds Timestamp of when the Effect expires, or -1 if the Effect is not active.
        function getEffectExpiryTimestamp(&type="COOKIE");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:73
            &type      = miscValidate(%&type%,0,"COOKIE","GODPOT");
            #expiry_ts = -1;
            if(%&type% == "COOKIE");
                #expiry_ts = getCookieExpiryTimestamp();
            elseif(%&type% == "GODPOT");
                #expiry_ts = getGodPotionExpiryTimestamp();
            endif;
            return(%#expiry_ts%);
        endfunction;
    // tablist/index/isEffectEnabled
        // Wrapper that dynamically calls isCookieEnabled or isGodPotionEnabled based on input.
            // Params:
            //      {string} [&type="COOKIE"]       The Effect Type to get the Expiry Timestamp of. One of: 'COOKIE', 'GODPOT'.
            //      {number} [#expiry_offset_sec=0] An offset in seconds to apply to the real expiry timestamp used
            //                                      to report whether the effect should be considered 'active' or not.
            //                                      For example, if set to 300, if the cookie expires within 300 seconds / 5 min,
            //                                      will return false (when otherwise, it would return true.)
            //
            // Returns the Seconds Timestamp of when the Effect expires, or -1 if the Effect is not active.
        function isEffectEnabled(&type="COOKIE",#expiry_offset_sec=0);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:93
            #effect_expiry_ts = getEffectExpiryTimestamp(%&type%);
            effect_enabled    = %TIMESTAMP% < (#effect_expiry_ts - #expiry_offset_sec);
            return(%effect_enabled%);
        endfunction;
    // gui/index/remoteGUI
        // Changes the current GUI to a remote GUI.
        // NOTE: For /viewcollection commands to work, CHATFILTER must include:
            // Expression:
                //    ifmatches(%CHATCLEAN%,"^You haven't found this item yet!$");
                //        @remote_gui_collection_unlock_exception = true;
                //    endif;
            // Params:
                // {string}    <&target_gui>                     String ENUM. List of available GUIs below.
                // {number}    [#wait_ticks=@#def_wait_ticks]    Amount of time to wait for in ticks (1t = 50ms)
                // {number}    [#timeout_sec=60]                 Maximum amount of seconds to spend attempting to enter the specified
                //                                               GUI. If this function takes more than or equal to this amount of seconds
                //                                               to complete, the function will exit and return False. Set to -1 for infinite.
            // Returns a Boolean indicating whether or not we were able to enter the specified GUI.
            // Example                       : in_gui = remoteGUI("SB_MENU");
            // Valid ENUMs for <&target_gui> :
                //  'SB_MENU'              : /sbmenu
                //  'TRADES'               : /sbmenu => emerald item
                //  'BOOSTER'              : /sbmenu => cookie item
                //  'STATS'                : /sbmenu => skull item (stats menu)
                //    'ACCESSORY_BAG'        : /sbmenu => accessory bag item (slot 53)
                //  'CALENDAR'             : /calendar
                //  'STORAGE'              : /storage
                //  'ENDERCHEST'           : /enderchest
                //  'PROFILES'             : /profiles
                //  'EFFECTS'              : /effects (note; cannot disable effects from this GUI)
                //  'CRAFT_ITEM'           : /craft
                //  'ANVIL'                : /anvil (only works if booster cookie effect is applied)
                //  'BAZAAR'               : /bazaar (only works if booster cookie effect is applied)
                //  'AUCTION_HOUSE'        : /auctions (only works if booster cookie effect is applied)
                //  'ENCHANTING'           : /enchantingtable (only works if booster cookie effect is applied)
                //  'SKILLS'               : /skills
                    //  'SKILLS_FARMING'       : /skills => farming
                    //  'SKILLS_MINING'        : /skills => mining
                    //  'SKILLS_COMBAT'        : /skills => combat
                    //  'SKILLS_FORAGING'      : /skills => foraging
                    //  'SKILLS_FISHING'       : /skills => fishing
                    //  'SKILLS_ENCHANTING'    : /skills => enchanting
                    //  'SKILLS_ALCHEMY'       : /skills => alchemy
                    //  'SKILLS_RUNECRAFTING'  : /skills => runecrafting
                    //  'SKILLS_SOCIAL'        : /skills => social
                    //  'SKILLS_TAMING'        : /skills => taming
                    //  'SKILLS_DUNGEONEERING' : /skills => dungeoneering
                //  'SB_SETTINGS'          : /viewsettings
                    //  'SB_SETTINGS_PERSONAL' : /viewsettings => personal
                    //  'SB_SETTINGS_COMMS'    : /viewsettings => comms
                    //  'SB_SETTINGS_IS'       : /viewsettings => island
                    //  'SB_SETTINGS_API'      : /viewsettings => api
                    //  'SB_SETTINGS_IS_MGMT'  : /viewsettings => island management
                //  'HY_SETTINGS'          : /settings
                    //  'HY_SETTINGS_GAME'     : /settings => game
                    //  'HY_SETTINGS_CHAT'     : /settings => chat
                    //  'HY_SETTINGS_SOCIAL'   : /settings => social
                    //  'HY_SETTINGS_LOBBY'    : /settings => lobby
                    //  'HY_SETTINGS_API'      : /settings => api
                    //  'HY_SETTINGS_GUILD'    : /settings => guild
                //  'COLLECTIONS'          : /collections
                    //  'COLLECTIONS_INK_SACK:3'             : /viewcollection INK_SACK:3             (Cocoa Beans)
                    //  'COLLECTIONS_CARROT_ITEM'            : /viewcollection CARROT_ITEM            (Carrot)
                    //  'COLLECTIONS_CACTUS'                 : /viewcollection CACTUS                 (Cactus)
                    //  'COLLECTIONS_RAW_CHICKEN'            : /viewcollection RAW_CHICKEN            (Raw Chicken)
                    //  'COLLECTIONS_SUGAR_CANE'             : /viewcollection SUGAR_CANE             (Sugar Cane)
                    //  'COLLECTIONS_PUMPKIN'                : /viewcollection PUMPKIN                (Pumpkin)
                    //  'COLLECTIONS_WHEAT'                  : /viewcollection WHEAT                  (Wheat)
                    //  'COLLECTIONS_SEEDS'                  : /viewcollection SEEDS                  (Seeds)
                    //  'COLLECTIONS_MUSHROOM_COLLECTION'    : /viewcollection MUSHROOM_COLLECTION    (Mushroom)
                    //  'COLLECTIONS_RABBIT'                 : /viewcollection RABBIT                 (Raw Rabbit)
                    //  'COLLECTIONS_NETHER_STALK'           : /viewcollection NETHER_STALK           (Nether Wart)
                    //  'COLLECTIONS_MUTTON'                 : /viewcollection MUTTON                 (Mutton)
                    //  'COLLECTIONS_MELON'                  : /viewcollection MELON                  (Melon)
                    //  'COLLECTIONS_POTATO_ITEM'            : /viewcollection POTATO_ITEM            (Potato)
                    //  'COLLECTIONS_LEATHER'                : /viewcollection LEATHER                (Leather)
                    //  'COLLECTIONS_PORK'                   : /viewcollection PORK                   (Raw Porkchop)
                    //  'COLLECTIONS_FEATHER'                : /viewcollection FEATHER                (Feather)
                    //  'COLLECTIONS_INK_SACK:4'             : /viewcollection INK_SACK:4             (Lapis Lazuli)
                    //  'COLLECTIONS_REDSTONE'               : /viewcollection REDSTONE               (Redstone)
                    //  'COLLECTIONS_COAL'                   : /viewcollection COAL                   (Coal)
                    //  'COLLECTIONS_ENDER_STONE'            : /viewcollection ENDER_STONE            (End Stone)
                    //  'COLLECTIONS_QUARTZ'                 : /viewcollection QUARTZ                 (Nether Quartz)
                    //  'COLLECTIONS_SAND'                   : /viewcollection SAND                   (Sand)
                    //  'COLLECTIONS_IRON_INGOT'             : /viewcollection IRON_INGOT             (Iron Ingot)
                    //  'COLLECTIONS_GEMSTONE_COLLECTION'    : /viewcollection GEMSTONE_COLLECTION    (Gemstone)
                    //  'COLLECTIONS_OBSIDIAN'               : /viewcollection OBSIDIAN               (Obsidian)
                    //  'COLLECTIONS_DIAMOND'                : /viewcollection DIAMOND                (Diamond)
                    //  'COLLECTIONS_COBBLESTONE'            : /viewcollection COBBLESTONE            (Cobblestone)
                    //  'COLLECTIONS_GLOWSTONE_DUST'         : /viewcollection GLOWSTONE_DUST         (Glowstone Dust)
                    //  'COLLECTIONS_GOLD_INGOT'             : /viewcollection GOLD_INGOT             (Gold Ingot)
                    //  'COLLECTIONS_GRAVEL'                 : /viewcollection GRAVEL                 (Gravel)
                    //  'COLLECTIONS_HARD_STONE'             : /viewcollection HARD_STONE             (Hard Stone)
                    //  'COLLECTIONS_MITHRIL_ORE'            : /viewcollection MITHRIL_ORE            (Mithril)
                    //  'COLLECTIONS_EMERALD'                : /viewcollection EMERALD                (Emerald)
                    //  'COLLECTIONS_ICE'                    : /viewcollection ICE                    (Ice)
                    //  'COLLECTIONS_NETHERRACK'             : /viewcollection NETHERRACK             (Netherrack)
                    //  'COLLECTIONS_ENDER_PEARL'            : /viewcollection ENDER_PEARL            (Ender Pearl)
                    //  'COLLECTIONS_SLIME_BALL'             : /viewcollection SLIME_BALL             (Slimeball)
                    //  'COLLECTIONS_MAGMA_CREAM'            : /viewcollection MAGMA_CREAM            (Magma Cream)
                    //  'COLLECTIONS_GHAST_TEAR'             : /viewcollection GHAST_TEAR             (Ghast Tear)
                    //  'COLLECTIONS_SULPHUR'                : /viewcollection SULPHUR                (Gunpowder)
                    //  'COLLECTIONS_ROTTEN_FLESH'           : /viewcollection ROTTEN_FLESH           (Rotten Flesh)
                    //  'COLLECTIONS_SPIDER_EYE'             : /viewcollection SPIDER_EYE             (Spider Eye)
                    //  'COLLECTIONS_BONE'                   : /viewcollection BONE                   (Bone)
                    //  'COLLECTIONS_BLAZE_ROD'              : /viewcollection BLAZE_ROD              (Blaze Rod)
                    //  'COLLECTIONS_STRING'                 : /viewcollection STRING                 (String)
                    //  'COLLECTIONS_LOG_2'                  : /viewcollection LOG_2                  (Acacia Wood)
                    //  'COLLECTIONS_LOG:1'                  : /viewcollection LOG:1                  (Spruce Wood)
                    //  'COLLECTIONS_LOG:3'                  : /viewcollection LOG:3                  (Jungle Wood)
                    //  'COLLECTIONS_LOG:2'                  : /viewcollection LOG:2                  (Birch Wood)
                    //  'COLLECTIONS_LOG'                    : /viewcollection LOG                    (Oak Wood)
                    //  'COLLECTIONS_LOG_2:1'                : /viewcollection LOG_2:1                (Dark Oak Wood)
                    //  'COLLECTIONS_WATER_LILY'             : /viewcollection WATER_LILY             (Lily Pad)
                    //  'COLLECTIONS_PRISMARINE_SHARD'       : /viewcollection PRISMARINE_SHARD       (Prismarine Shard)
                    //  'COLLECTIONS_INK_SACK'               : /viewcollection INK_SACK               (Ink Sack)
                    //  'COLLECTIONS_RAW_FISH'               : /viewcollection RAW_FISH               (Raw Fish)
                    //  'COLLECTIONS_RAW_FISH:3'             : /viewcollection RAW_FISH:3             (Pufferfish)
                    //  'COLLECTIONS_RAW_FISH:2'             : /viewcollection RAW_FISH:2             (Clownfish)
                    //  'COLLECTIONS_RAW_FISH:1'             : /viewcollection RAW_FISH:1             (Raw Salmon)
                    //  'COLLECTIONS_PRISMARINE_CRYSTALS'    : /viewcollection PRISMARINE_CRYSTALS    (Prismarine Crystals)
                    //  'COLLECTIONS_CLAY'                   : /viewcollection CLAY                   (Clay)
                    //  'COLLECTIONS_SPONGE'                 : /viewcollection SPONGE                 (Sponge)
        function remoteGUI(&target_gui,#tick_wait=20,#timeout_sec=60);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:489
            &script_debug_name = "&9remoteGUI";
            debug              = true;
            do_timeout         = #timeout_sec > 0;
            #start_time        = %TIMESTAMP%;
            
            // Validate input
            if(true);
                &valid_guis[] = split(", ","SB_MENU, TRADES, ACCESSORY_BAG, BOOSTER, STATS, CALENDAR, STORAGE, ENDERCHEST, PROFILES, EFFECTS, CRAFT_ITEM, ANVIL, BAZAAR, AUCTION_HOUSE, ENCHANTING, SKILLS, SKILLS_FARMING, SKILLS_MINING, SKILLS_COMBAT, SKILLS_FORAGING, SKILLS_FISHING, SKILLS_ENCHANTING, SKILLS_ALCHEMY, SKILLS_RUNECRAFTING, SKILLS_SOCIAL, SKILLS_TAMING, SKILLS_DUNGEONEERING, SB_SETTINGS, SB_SETTINGS_PERSONAL, SB_SETTINGS_COMMS, SB_SETTINGS_IS, SB_SETTINGS_API, SB_SETTINGS_IS_MGMT, HY_SETTINGS, HY_SETTINGS_GAME, HY_SETTINGS_CHAT, HY_SETTINGS_SOCIAL, HY_SETTINGS_LOBBY, HY_SETTINGS_API, HY_SETTINGS_GUILD, COLLECTIONS, COLLECTIONS_INK_SACK:3, COLLECTIONS_CARROT_ITEM, COLLECTIONS_CACTUS, COLLECTIONS_RAW_CHICKEN, COLLECTIONS_SUGAR_CANE, COLLECTIONS_PUMPKIN, COLLECTIONS_WHEAT, COLLECTIONS_SEEDS, COLLECTIONS_MUSHROOM_COLLECTION, COLLECTIONS_RABBIT, COLLECTIONS_NETHER_STALK, COLLECTIONS_MUTTON, COLLECTIONS_MELON, COLLECTIONS_POTATO_ITEM, COLLECTIONS_LEATHER, COLLECTIONS_PORK, COLLECTIONS_FEATHER, COLLECTIONS_INK_SACK:4, COLLECTIONS_REDSTONE, COLLECTIONS_COAL, COLLECTIONS_ENDER_STONE, COLLECTIONS_QUARTZ, COLLECTIONS_SAND, COLLECTIONS_IRON_INGOT, COLLECTIONS_GEMSTONE_COLLECTION, COLLECTIONS_OBSIDIAN, COLLECTIONS_DIAMOND, COLLECTIONS_COBBLESTONE, COLLECTIONS_GLOWSTONE_DUST, COLLECTIONS_GOLD_INGOT, COLLECTIONS_GRAVEL, COLLECTIONS_HARD_STONE, COLLECTIONS_MITHRIL_ORE, COLLECTIONS_EMERALD, COLLECTIONS_ICE, COLLECTIONS_NETHERRACK, COLLECTIONS_ENDER_PEARL, COLLECTIONS_SLIME_BALL, COLLECTIONS_MAGMA_CREAM, COLLECTIONS_GHAST_TEAR, COLLECTIONS_SULPHUR, COLLECTIONS_ROTTEN_FLESH, COLLECTIONS_SPIDER_EYE, COLLECTIONS_BONE, COLLECTIONS_BLAZE_ROD, COLLECTIONS_STRING, COLLECTIONS_LOG_2, COLLECTIONS_LOG:1, COLLECTIONS_LOG:3, COLLECTIONS_LOG:2, COLLECTIONS_LOG, COLLECTIONS_LOG_2:1, COLLECTIONS_WATER_LILY, COLLECTIONS_PRISMARINE_SHARD, COLLECTIONS_INK_SACK, COLLECTIONS_RAW_FISH, COLLECTIONS_RAW_FISH:3, COLLECTIONS_RAW_FISH:2, COLLECTIONS_RAW_FISH:1, COLLECTIONS_PRISMARINE_CRYSTALS, COLLECTIONS_CLAY, COLLECTIONS_SPONGE");
                #valid_index  = indexof(&valid_guis[],,%&target_gui%);
                &target_gui   = ucase(%&valid_guis[%#valid_index%]%);
                if(%#valid_index% == -1);
                    debug_error(%debug%,%&script_debug_name%,"Invalid TargetGUI &4%&target_gui%&7 passed.");
                    return(False);
                endif;
                debug_log(%debug%,%&script_debug_name%,"TargetGUI: %&target_gui%");
            endif;
            
            // Define different GUI types.
            if(true);
                // SkyBlock Command GUIs (has a shortcut command, no caveats as to when the command can be used).
                if(true);
                    // GUI Parameter Terms
                    &command_guis[] = split(", ","HY_SETTINGS, SB_SETTINGS, SB_MENU, CALENDAR, STORAGE, ENDERCHEST, PROFILES, EFFECTS, CRAFT_ITEM, SKILLS, COLLECTIONS, COLLECTIONS_INK_SACK:3, COLLECTIONS_CARROT_ITEM, COLLECTIONS_CACTUS, COLLECTIONS_RAW_CHICKEN, COLLECTIONS_SUGAR_CANE, COLLECTIONS_PUMPKIN, COLLECTIONS_WHEAT, COLLECTIONS_SEEDS, COLLECTIONS_MUSHROOM_COLLECTION, COLLECTIONS_RABBIT, COLLECTIONS_NETHER_STALK, COLLECTIONS_MUTTON, COLLECTIONS_MELON, COLLECTIONS_POTATO_ITEM, COLLECTIONS_LEATHER, COLLECTIONS_PORK, COLLECTIONS_FEATHER, COLLECTIONS_INK_SACK:4, COLLECTIONS_REDSTONE, COLLECTIONS_COAL, COLLECTIONS_ENDER_STONE, COLLECTIONS_QUARTZ, COLLECTIONS_SAND, COLLECTIONS_IRON_INGOT, COLLECTIONS_GEMSTONE_COLLECTION, COLLECTIONS_OBSIDIAN, COLLECTIONS_DIAMOND, COLLECTIONS_COBBLESTONE, COLLECTIONS_GLOWSTONE_DUST, COLLECTIONS_GOLD_INGOT, COLLECTIONS_GRAVEL, COLLECTIONS_HARD_STONE, COLLECTIONS_MITHRIL_ORE, COLLECTIONS_EMERALD, COLLECTIONS_ICE, COLLECTIONS_NETHERRACK, COLLECTIONS_ENDER_PEARL, COLLECTIONS_SLIME_BALL, COLLECTIONS_MAGMA_CREAM, COLLECTIONS_GHAST_TEAR, COLLECTIONS_SULPHUR, COLLECTIONS_ROTTEN_FLESH, COLLECTIONS_SPIDER_EYE, COLLECTIONS_BONE, COLLECTIONS_BLAZE_ROD, COLLECTIONS_STRING, COLLECTIONS_LOG_2, COLLECTIONS_LOG:1, COLLECTIONS_LOG:3, COLLECTIONS_LOG:2, COLLECTIONS_LOG, COLLECTIONS_LOG_2:1, COLLECTIONS_WATER_LILY, COLLECTIONS_PRISMARINE_SHARD, COLLECTIONS_INK_SACK, COLLECTIONS_RAW_FISH, COLLECTIONS_RAW_FISH:3, COLLECTIONS_RAW_FISH:2, COLLECTIONS_RAW_FISH:1, COLLECTIONS_PRISMARINE_CRYSTALS, COLLECTIONS_CLAY, COLLECTIONS_SPONGE");
                    
                    // Commands to issue to enter the correct GUI while on SkyBlock.
                    &command_text[] = split(", ","/settings, /viewsettings, /sbmenu, /calendar, /storage, /enderchest, /profiles, /effects, /craft, /skills, /collections, /viewcollection INK_SACK:3, /viewcollection CARROT_ITEM, /viewcollection CACTUS, /viewcollection RAW_CHICKEN, /viewcollection SUGAR_CANE, /viewcollection PUMPKIN, /viewcollection WHEAT, /viewcollection SEEDS, /viewcollection MUSHROOM_COLLECTION, /viewcollection RABBIT, /viewcollection NETHER_STALK, /viewcollection MUTTON, /viewcollection MELON, /viewcollection POTATO_ITEM, /viewcollection LEATHER, /viewcollection PORK, /viewcollection FEATHER, /viewcollection INK_SACK:4, /viewcollection REDSTONE, /viewcollection COAL, /viewcollection ENDER_STONE, /viewcollection QUARTZ, /viewcollection SAND, /viewcollection IRON_INGOT, /viewcollection GEMSTONE_COLLECTION, /viewcollection OBSIDIAN, /viewcollection DIAMOND, /viewcollection COBBLESTONE, /viewcollection GLOWSTONE_DUST, /viewcollection GOLD_INGOT, /viewcollection GRAVEL, /viewcollection HARD_STONE, /viewcollection MITHRIL_ORE, /viewcollection EMERALD, /viewcollection ICE, /viewcollection NETHERRACK, /viewcollection ENDER_PEARL, /viewcollection SLIME_BALL, /viewcollection MAGMA_CREAM, /viewcollection GHAST_TEAR, /viewcollection SULPHUR, /viewcollection ROTTEN_FLESH, /viewcollection SPIDER_EYE, /viewcollection BONE, /viewcollection BLAZE_ROD, /viewcollection STRING, /viewcollection LOG_2, /viewcollection LOG:1, /viewcollection LOG:3, /viewcollection LOG:2, /viewcollection LOG, /viewcollection LOG_2:1, /viewcollection WATER_LILY, /viewcollection PRISMARINE_SHARD, /viewcollection INK_SACK, /viewcollection RAW_FISH, /viewcollection RAW_FISH:3, /viewcollection RAW_FISH:2, /viewcollection RAW_FISH:1, /viewcollection PRISMARINE_CRYSTALS, /viewcollection CLAY, /viewcollection SPONGE");
                    
                    // Regular Expression to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &command_expr[] = split(", ","Game Settings, Settings, SkyBlock Menu, Calendar and Events, Storage, Ender Chest, Profile Management, Active Effects, Craft Item, Your Skills, ^Collection$, ^Cocoa Beans Collection$, ^Carrot Collection$, ^Cactus Collection$, ^Raw Chicken Collection$, ^Sugar Cane Collection$, ^Pumpkin Collection$, ^Wheat Collection$, ^Seeds Collection$, ^Mushroom Collection$, ^Raw Rabbit Collection$, ^Nether Wart Collection$, ^Mutton Collection$, ^Melon Collection$, ^Potato Collection$, ^Leather Collection$, ^Raw Porkchop Collection$, ^Feather Collection$, ^Lapis Lazuli Collection$, ^Redstone Collection$, ^Coal Collection$, ^End Stone Collection$, ^Nether Quartz Collection$, ^Sand Collection$, ^Iron Ingot Collection$, ^Gemstone Collection$, ^Obsidian Collection$, ^Diamond Collection$, ^Cobblestone Collection$, ^Glowstone Dust Collection$, ^Gold Ingot Collection$, ^Gravel Collection$, ^Hard Stone Collection$, ^Mithril Collection$, ^Emerald Collection$, ^Ice Collection$, ^Netherrack Collection$, ^Ender Pearl Collection$, ^Slimeball Collection$, ^Magma Cream Collection$, ^Ghast Tear Collection$, ^Gunpowder Collection$, ^Rotten Flesh Collection$, ^Spider Eye Collection$, ^Bone Collection$, ^Blaze Rod Collection$, ^String Collection$, ^Acacia Wood Collection$, ^Spruce Wood Collection$, ^Jungle Wood Collection$, ^Birch Wood Collection$, ^Oak Wood Collection$, ^Dark Oak Wood Collection$, ^Lily Pad Collection$, ^Prismarine Shard Collection$, ^Ink Sack Collection$, ^Raw Fish Collection$, ^Pufferfish Collection$, ^Clownfish Collection$, ^Raw Salmon Collection$, ^Prismarine Crystals Collection$, ^Clay Collection$, ^Sponge Collection$");
                    
                    // SkyBlock Skill GUIs
                    if(true);
                        // GUI Parameter Terms
                        &sb_skill_guis[] = split(", ","SKILLS_FARMING, SKILLS_MINING, SKILLS_COMBAT, SKILLS_FORAGING, SKILLS_FISHING, SKILLS_ENCHANTING, SKILLS_ALCHEMY, SKILLS_RUNECRAFTING, SKILLS_SOCIAL, SKILLS_TAMING, SKILLS_DUNGEONEERING");
                        
                        // Commands to issue to enter the correct GUI while on SkyBlock.
                        &sb_skill_text[] = split(", ","/viewskill FARMING, /viewskill MINING, /viewskill COMBAT, /viewskill FORAGING, /viewskill FISHING, /viewskill ENCHANTING, /viewskill ALCHEMY, /viewskill RUNECRAFTING, /viewskill SOCIAL, /viewskill TAMING, /viewskill DUNGEONEERING");
                        
                        // Regular Expression to match against CONTAINERNAME to determine whether we are in the correct GUI.
                        &sb_skill_expr[] = split(", ","Farming Skill, Mining Skill, Combat Skill, Foraging Skill, Fishing Skill, Enchanting Skill, Alchemy Skill, Runecrafting Skill, Social Skill, Taming Skill, Dungeoneering");
                        
                        push(&command_guis[],&sb_skill_guis[*]);
                        push(&command_text[],&sb_skill_text[*]);
                        push(&command_expr[],&sb_skill_expr[*]);
                    endif;
                endif;
                
                // SBMENU GUIs (must type /sbmenu before continuing).
                if(true);
                    // GUI Parameter Terms
                    &sbmenu_guis[] = split(", ","TRADES, BOOSTER, STATS, ACCESSORY_BAG");
                    
                    // Item Base Items to look for in SBMENU to click on to progress
                    &sbmenu_item[] = split(", ","emerald, cookie, skull, skull");
                    
                    // Item Display Names to look for in SBMENU to click on to progress
                    &sbmenu_name[] = split(", ","Trades, Booster Cookie, Your SkyBlock Profile, Accessory Bag");
                    
                    // Regular Expressions to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &sbmenu_expr[] = split(", ","Trades, Booster Cookie, Your SkyBlock Profile, Accessory Bag");
                endif;
                
                // SkyBlock Setting GUIs (must type /viewsettings before continuing).
                if(true);
                    // GUI Parameter Terms
                    &sbsetting_guis[] = split(", ","SB_SETTINGS_PERSONAL, SB_SETTINGS_COMMS, SB_SETTINGS_IS, SB_SETTINGS_API, SB_SETTINGS_IS_MGMT");
                    
                    // Item Base Items to look for in SB_SETTINGS to click on to progress
                    &sbsetting_item[] = split(", ","skull, sign, repeater, comparator, grass");
                    
                    // Item Display Names to look for in SB_SETTINGS to click on to progress
                    &sbsetting_name[] = split(", ","Personal, Comms, Island Settings, API Settings, Island Management");
                    
                    // Regular Expressions to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &sbsetting_expr[] = split(", ","Settings - Personal, Settings - Comms, Settings - Island Settings, Settings - API, Island Management");
                endif;
                
                // Hypixel Setting GUIs (must type /settings before continuing).
                if(true);
                    // GUI Parameter Terms
                    &hysetting_guis[] = split(", ","HY_SETTINGS_GAME, HY_SETTINGS_CHAT, HY_SETTINGS_SOCIAL, HY_SETTINGS_LOBBY, HY_SETTINGS_API, HY_SETTINGS_GUILD");
                    
                    // Item Base Items to look for in HY_SETTINGS to click on to progress
                    &hysetting_item[] = split(", ","comparator, paper, iron_bars, nether_star, web, dye");
                    
                    // Item Display Names to look for in HY_SETTINGS to click on to progress
                    &hysetting_name[] = split(", ","Game Settings, Chat Settings, Social Settings, Lobby Settings, API Settings, Personal Guild Settings");
                    
                    // Regular Expressions to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &hysetting_expr[] = split(", ","Game Settings, Chat Settings, Social Settings, Lobby Settings, API Settings, Personal Guild Settings");
                endif;
                
                // Booster Cookie Effect GUIs (must have Booster Cookie Effect enabled).
                if(true);
                    // GUI Parameter Terms
                    &booster_guis[] = split(", ","BOOSTER, ANVIL, BAZAAR, AUCTION_HOUSE, ENCHANTING");
                    
                    // Commands to issue to enter the correct GUI while on SkyBlock.
                    &booster_text[] = split(", ","/sbmenu, /av, /bz, /ah, /et");
                    
                    // Item Base Items to look for in SBMENU to Progress (only required for 'BOOSTER' exception)
                    &booster_item[] = split(", ","cookie");
                    
                    // Item Display Names to look for in SBMENU to click on to progress (only required for 'BOOSTER' exception)
                    &booster_name[] = split(", ","Booster Cookie");
                    
                    &baz_strings = "(?:Farming|Mining|Combat|Woods & Fishes|Oddities)";
                    
                    // Regular Expression to match against CONTAINERNAME to determine whether we are in the correct GUI.
                    &booster_expr[] = split(", ","Booster Cookie, Anvil, Bazaar \u279C %&baz_strings%, ^(?:Co-op )?Auction House$, ^Enchant Item$");
                endif;
            endif;
            
            // Find the type of GUI we are entering.
            if(true);
                #command_index    = indexof(&command_guis[],,%&target_gui%);
                #sbmenu_index     = indexof(&sbmenu_guis[],,%&target_gui%);
                #sbsetting_index  = indexof(&sbsetting_guis[],,%&target_gui%);
                #hysetting_index  = indexof(&hysetting_guis[],,%&target_gui%);
                #booster_index    = indexof(&booster_guis[],,%&target_gui%);
                #collection_index = indexof(&collection_guis[],,%&target_gui%);
                
                // For any of the GUIs categorized under command_guis, sbmenu_guis, sbsetting_guis, and booster_guis,
                // we have to be on some sort of SkyBlock Server for them to work. So, if we are entering a GUI found
                // in any of those arrays, get onto a SkyBlock Server beforehand.
                if((#collection_index != -1) || (#command_index != -1) || (#sbmenu_index != -1) || (#sbsetting_index != -1) || (#booster_index != -1));
                    debug_log(%debug%,%&script_debug_name%,"Using a SkyBlock Only command, making sure we are on SkyBlock before command execution...");
                    #goto_server_timeout = -1;
                    do;
                        if(%do_timeout%);
                            #goto_server_timeout = %#timeout_sec% - (%TIMESTAMP% - %#start_time%);
                        endif;
                        on_server = call("gotoServer","SKYBLOCK",100,%#goto_server_timeout%);
                        if(%on_server%);
                            break;
                        endif;
                        wait("1t");
                        
                        func_timeout = ((%do_timeout%) && ((%TIMESTAMP% - %#start_time%) >= %#timeout_sec%));
                    until((%func_timeout%) || (%on_server%));
                    if(%func_timeout%);
                        #elapsed_sec  = %TIMESTAMP% - %#start_time%;
                        &elapsed_time = sectotime(%#elapsed_sec%);
                        debug_error(%debug%,%&script_debug_name%,"Function timed out during gotoServer calls (elapsed time: &4%&elapsed_time%&7).");
                        return(False);
                    endif;
                    debug_log(%debug%,%&script_debug_name%,"On a valid SkyBlock Server, continuing on...");
                endif;
                
                // Handle Booster stuff beforehand if needed (check if effect is applied).
                if(%#booster_index% != -1);
                    debug_log(%debug%,%&script_debug_name%,"Using a Booster Cookie function");
                    booster_enabled = isEffectEnabled("COOKIE");
                    if(!%booster_enabled%);
                        debug_error(%debug%,%&script_debug_name%,"Booster Cookie effect required for TargetGUI: &4%&target_gui%&7.");
                        return(False);
                    endif;
                endif;
                
                // Handle the unique actions required of each remote GUI type.
                if(true);
                    if((%#booster_index% != -1) || (%#command_index% != -1));
                        // Can just issue commands, no need to open GUIs beforehand.
                        if(%#booster_index% != -1);
                            &command_text     = %&booster_text[%#booster_index%]%;
                            &exit_expr        = %&booster_expr[%#booster_index%]%;
                            booster_exception = %&target_gui% == "BOOSTER";
                            if(%booster_exception%);
                                init_gui   = true;
                                &init_gui  = "SB_MENU";
                                &next_item = %&booster_item[%#booster_index%]%;
                                &next_name = %&booster_name[%#booster_index%]%;
                            endif;
                        elseif(%#command_index% != -1);
                            &command_text     = %&command_text[%#command_index%]%;
                            &exit_expr        = %&command_expr[%#command_index%]%;
                        endif;
                    else;
                        init_gui = true;
                        // Must enter some holding menu before continuing.
                        if(%#sbmenu_index% != -1);
                            // Must enter the 'SkyBlock Menu' (SB_MENU) GUI before continuing.
                            &init_gui  = "SB_MENU";
                            &next_item = %&sbmenu_item[%#sbmenu_index%]%;
                            &next_name = %&sbmenu_name[%#sbmenu_index%]%;
                            &exit_expr = %&sbmenu_expr[%#sbmenu_index%]%;
                        elseif(%#sbsetting_index% != -1);
                            // Must enter the 'SkyBlock Settings' (SB_SETTINGS) GUI before continuing.
                            &init_gui  = "SB_SETTINGS";
                            &next_item = %&sbsetting_item[%#sbsetting_index%]%;
                            &next_name = %&sbsetting_name[%#sbsetting_index%]%;
                            &exit_expr = %&sbsetting_expr[%#sbsetting_index%]%;
                        elseif(%#hysetting_index% != -1);
                            // Must enter the 'Hypixel Settings' (HY_SETTINGS) GUI before continuing.
                            &init_gui  = "HY_SETTINGS";
                            &next_item = %&hysetting_item[%#hysetting_index%]%;
                            &next_name = %&hysetting_name[%#hysetting_index%]%;
                            &exit_expr = %&hysetting_expr[%#hysetting_index%]%;
                        endif;
                    endif;
                    
                    do;
                        ifmatches(%CONTAINERNAME%,%&exit_expr%);
                            debug_log(%debug%,%&script_debug_name%,"Breaking, containername matches exit expr (%CONTAINERNAME%, %&exit_expr%)");
                            break;
                        endif;
                        
                        // Check for function timeout
                        if(%do_timeout%);
                            func_timeout = ((%TIMESTAMP% - %#start_time%) >= %#timeout_sec%);
                            if(%func_timeout%);
                                debug_error(%debug%,%&script_debug_name%,"Function timed out while attempting to open a GUI Container.");
                                break;
                            endif;
                        endif;
                        
                        // Execute GUI actions depending on what type of GUI we are currently in and where we need to go.
                        if(true);
                            // Enter the "pre-requisite" GUI, or echo the Command needed to enter the GUI we want to enter.
                            if(%GUI% == "NONE");
                                in_init_gui = false;
                                // Enter the "pre-requisite" GUI.
                                if(%init_gui%);
                                    in_init_gui = call("remoteGUI",%&init_gui%,%#tick_wait%);
                                else;
                                    // Echo the Command needed to enter the GUI we want to enter.
                                    debug_log(%debug%,%&script_debug_name%,"echoing command %&command_text%...");
                                    unset(@remote_gui_collection_unlock_exception);
                                    echo("%&command_text%");
                                    do(%#tick_wait%);
                                        wait("1t");
                                    while((%GUI% == "NONE") && (!%@remote_gui_collection_unlock_exception%));
                                    if(%@remote_gui_collection_unlock_exception%);
                                        debug_error(%debug%,%&script_debug_name%,"Do not have collection '%&target_gui%' unlocked yet!");
                                        break;
                                    endif;
                                endif;
                            elseif((%init_gui%) && (%in_init_gui%));
                                // In the "pre-requisite" GUI, find the item we want to click.
                                if(true);
                                    // Iterate over Dynamic Container Slots
                                    if(true);
                                        #found_slot = -1;
                                        #r_start    = 0;
                                        #r_end      = %CONTAINERSLOTS% - 37;
                                        &r_item     = "%&next_item%";
                                        &r_name     = "%&next_name%";
                                        for(#r_slot,%#r_start%,%#r_end%);
                                            #f_slot = %#r_slot%;
                                            if(%&r_item%);
                                                getslot(%&r_item%,#f_slot,%#r_offset%);
                                            endif;
                                            
                                            if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                                                #r_offset = %#f_slot% + 1;
                                                &f_item   = getslotitemnbt(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                                                &f_nbt    = strip(%&f_nbt%);
                                                &f_name   = getItemName(%&f_nbt%,%&f_item%);
                                                &f_sbid   = getItemSBID(%&f_nbt%);
                                                m_item    = ((!%&r_item%) || (%&r_item% == %&f_item%));
                                                m_name    = ((!%&r_name%) || (%&r_name% == %&f_name%));
                                                m_sbid    = ((!%&r_sbid%) || (%&r_sbid% == %&f_sbid%));
                                                m_match   = ((%m_item%) && (%m_name%) && (%m_sbid%));
                                                if(%m_match%);
                                                    #found_slot = %#f_slot%;
                                                    break;
                                                endif;
                                            else;
                                                break;
                                            endif;
                                        next;
                                    endif;
                                    
                                    if(%#found_slot% != -1);
                                        &init_gui_string = getContainerString();
                                        entered_new_gui  = false;
                                        do;
                                            slotclick(%#found_slot%);
                                            do(%#tick_wait%);
                                                wait("1t");
                                                entered_new_gui = enteredNewGUI(%&init_gui_string%);
                                            while(!%entered_new_gui%);
                                        while(!%entered_new_gui%);
                                        in_init_gui = !%entered_new_gui%;
                                    else;
                                        debug_error(%debug%,%&script_debug_name%,"Cannot find 'next' item (base: %&next_item%, name: %&next_name%). GUI: %GUI%, CONTAINERNAME: %CONTAINERNAME%, CONTAINERSLOTS: %CONTAINERSLOTS%.");
                                        break;
                                    endif;
                                endif;
                            else;
                                // In a GUI that is not "NONE", have to leave it.
                                exited_gui = localGUI("NONE",%#tick_wait%);
                            endif;
                        endif;
                    untilmatches(%CONTAINERNAME%,%&exit_expr%);
                endif;
            endif;
            
            ifmatches(%CONTAINERNAME%,%&exit_expr%);
                debug_log(%debug%,%&script_debug_name%,"Success!");
                return_boolean = true;
            else;
                debug_log(%debug%,%&script_debug_name%,"Failure!");
            endif;
            return(%return_boolean%);
        endfunction;
    // tablist/index/isCookieEnabled
        // Checks if the Booster Cookie effect is currently enabled.
            // Params:
            //      {number} [#expiry_offset_sec=0] An offset in seconds to apply to the real expiry timestamp used
            //                                      to report whether the effect should be considered 'active' or not.
            //                                      For example, if set to 300, if the cookie expires within 300 seconds / 5 min,
            //                                      will return false (when otherwise, it would return true.)
            //
            // Returns a Boolean that is true if Cookie is enabled, false otherwise.
        function isCookieEnabled(#expiry_offset_sec=0);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/tablist/index.txt:48
            #cookie_exp_ts = getCookieExpiryTimestamp();
            cookie_enabled = %TIMESTAMP% < (#cookie_exp_ts - #expiry_offset_sec);
            return(%cookie_enabled%);
        endfunction;
    // bazaar/index/openBazaar
        // Opens the Bazaar Main Menu GUI.
            // Params:
            //      {boolean} [allow_command=true]  Whether or not to use the /bazaar command if a Booster Cookie effect is enabled.
            //
            // Returns a boolean indicating whether or not we are in the Bazaar Main Menu GUI.
        function openBazaar(allow_command=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:6
            &script_debug_name = "&6openBazaar";
            debug              = true;
            
            // Check if we are already in a valid Bazaar GUI.
            ifmatches(%CONTAINERNAME%,"^Bazaar \u279c (?:Farming|Mining|Combat|Woods & Fishes|Oddities)$");
                if(%GUI% == "GUICHEST");
                    return(True);
                endif;
            endif;
            
            // Make sure that we are on some sort of SkyBlock Server.
            do;
                debug_log(%debug%,%&script_debug_name%,"Getting onto a SkyBlock Server...");
                on_sb_server = gotoServer("SKYBLOCK");
                if(%on_sb_server%);
                    debug_log(%debug%,%&script_debug_name%,"On a valid SkyBlock Server.");
                    break;
                endif;
                debug_log(%debug%,%&script_debug_name%,"Still not on a valid SkyBlock Server...");
                wait("1t");
            until(%on_sb_server%);
            
            // Check if we can/should use the Command.
            if(%allow_command%);
                debug_log(%debug%,%&script_debug_name%,"Checking to see if we can use the Booster Cookie command...");
                cookie_active = isCookieEnabled(300);
                use_command   = %cookie_active%;
                
                // Try to enter the Bazaar GUI via RemoteGUI if we are using the Command.
                if(%use_command%);
                    bazaar_open = remoteGUI("BAZAAR");
                    if(%bazaar_open%);
                        debug_log(%debug%,%&script_debug_name%,"RemoteGUI successfully opened Bazaar.");
                        return(True);
                    endif;
                endif;
            endif;
            
            // If we could not open the Bazaar GUI via RemoteGUI / cannot use the Command, go there in person.
            if(true);
                debug_log(%debug%,%&script_debug_name%,"Could not use Command, or failed to open using RemoteGUI. Using goto...");
                in_bazaar = goto("BAZAAR",true);
                wait("1t");
                return(%in_bazaar%);
            endif;
        endfunction;
    // bazaar/index/progressPath
        // Given a Master Path and the Current Bazaar GUI Path, finds the next Item to click on in the GUI to progress the GUI
        // towards the End Goal and clicks on it until the GUI updates.
            // Params:
                // {string} <&master_path>           The Master (end target) Path
                // {boolean} [allow_command=true]    Whether or not to allow the usage of the /bz command if it is available
                // {number} [#tick_wait=20]          How many Ticks to wait between Item Clicks
                // {number} [#timeout_sec=30]        How many Seconds to wait before fn timeout. <= 0 = no timeout
        function progressPath(&master_path,allow_command=true,#tick_wait=20,#timeout_sec=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1265
            // Setup fn vars
            if(true);
                debug              = true;
                &script_debug_name = "&9progressPath&7";
                do_timeout         = %#timeout_sec% > 0;
                #start_time        = %TIMESTAMP%;
                &current_baz_gui[] = getBazaarGUIType();
                &current_gui_type  = %&current_baz_gui[0]%;
                if((%GUI% == "GUIEDITSIGN") || (%GUI% == "NONE") || (%&current_gui_type% == "NONE"));
                    in_bazaar    = openBazaar(%allow_command%);
                    #timeout_sec = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                    return_bool  = call("progressPath",%&master_path%,%allow_command%,%#tick_wait%,%#timeout_sec%);
                    return(%return_bool%);
                endif;
                &current_gui_path    = %&current_baz_gui[1]%;
                &current_gui_parts[] = split(".",%&current_gui_path%);
                &master_gui_parts[]  = split(".",%&master_path%);
            endif;
            
            // Find whether we are ahead of the Master Path (have to go back), or behind of it (have to go forward), or at the end of the Master Path.
            if(true);
                if(%&master_path% == %&current_gui_path%);
                    debug_log(%debug%,%&script_debug_name%,"master path reached");
                    return(True);
                endif;
                
                foreach(&master_gui_parts[],&master_gui_part,#mgpi);
                    &current_gui_part = %&current_gui_parts[%#mgpi%]%;
                    debug_log(%debug%,%&script_debug_name%,"%#mgpi% > master_part = %&master_gui_part%, current_part = %&current_gui_part%");
                    &read_gui_parts[] = %&master_gui_part%;
                    &last_gui_path    = join(".",&read_gui_parts[]);
                    if((%&current_gui_part% == "") || ((%&current_gui_part% != %&master_gui_part%) && (%&current_gui_type% == "CATEGORY"));
                        &pos_to_master = "FORWARD";
                    elseif(%&current_gui_part% != %&master_gui_part%);
                        &pos_to_master = "BACK";
                    endif;
                    
                    if(%&pos_to_master% != "");
                        debug_log(%debug%,%&script_debug_name%,"pos_to_master: %&pos_to_master%");
                        if(%&master_gui_part% == "holds");
                            &read_gui_path = join(".",&read_gui_parts[]);
                            &read_gui_json = jsonget(%&read_gui_path%,%@&mkb_baz_json%);
                            ifbeginswith(%&read_gui_json%,"[");
                                #next_index       = %#mgpi% + 1;
                                &read_gui_parts[] = %&master_gui_parts[%#next_index%]%;
                            endif;
                        endif;
                        break;
                    endif;
                next;
                debug_log(%debug%,%&script_debug_name%,"curr gui type is %&curr_gui_type%");
                
                if(%&pos_to_master% == "FORWARD");
                    debug_log(%debug%,%&script_debug_name%,"have to go forward");
                    &read_gui_path = join(".",&read_gui_parts[]);
                    &read_gui_json = jsonget(%&read_gui_path%,%@&mkb_baz_json%);
                    &r_name        = jsonget("button.name",%&read_gui_json%);
                    &r_item        = jsonget("button.mcid",%&read_gui_json%);
                    &r_sbid        = jsonget("button.sbid",%&read_gui_json%);
                    ifmatches(%&r_sbid%,"^ERROR_");
                        unset(&r_sbid);
                    endif;
                elseif(%&pos_to_master% == "BACK");
                    debug_log(%debug%,%&script_debug_name%,"have to go backward");
                    &r_name = "Go Back";
                    &r_item = "arrow";
                    ifmatches(%&current_gui_type%,"PRODUCT");
                        sibling_product = isPathSiblingOf(%&master_path%,%&current_gui_path%);
                        if(!%sibling_product%);
                            &r_item = "skull";
                        endif;
                    endif;
                endif;
            endif;
            
            // Attempt to progress the GUI.
            if(true);
                &vars[] = split(" ","&r_name &r_item &r_sbid");
                foreach(&vars[],&var,#v);
                    &val = %%&var%%;
                    &logvar = regexreplace(&var,"(?<!&)&","&&");
                    debug_log(%debug%,%&script_debug_name%,"%#v% > %&logvar% : %&val%");
                next;
                &init_gui = getContainerString(True);
                do;
                    // 1. Check if our Container has updated
                    gui_updated = enteredNewGUI(%&init_gui%,True);
                    if(%gui_updated%);
                        debug_log(%debug%,%&script_debug_name%,"GUI Updated, breaking");
                        break;
                    endif;
                    
                    // 2. Check if the Function has timed out
                    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                    if(%func_timeout%);
                        debug_error(%debug%,%&script_debug_name%,"Function timed out, breaking");
                        break;
                    endif;
                    
                    // 3. If we can Click, try to find the Item in the Container.
                    can_click = canDoInteraction(%#waited_ticks%,%#tick_wait%);
                    if(%can_click%);
                        #i_slot    = -1;
                        #r_start   = 0;
                        #r_end     = %CONTAINERSLOTS% - 37;
                        #r_offset  = %#r_start%;
                        for(#r_slot,%#r_start%,%#r_end%);
                            #f_slot = %#r_slot%;
                            if(%&r_item%);
                                getslot(%&r_item%,#f_slot,%#r_offset%);
                            endif;
                            
                            if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                                #r_offset = %#f_slot% + 1;
                                &f_item   = getslotitemnbt(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                                &f_nbt    = strip(%&f_nbt%);
                                &f_name   = getItemName(%&f_nbt%,%&f_item%);
                                if(%&r_sbid%);
                                    &f_sbid = getItemSBID(%&f_nbt%);
                                endif;
                                debug_log(%debug%,%&script_debug_name%,"found item %&f_item% %&f_name% at slot %#f_slot%");
                                m_item  = ((!%&r_item%) || (%&r_item% == %&f_item%));
                                m_name  = ((!%&r_name%) || (%&r_name% == %&f_name%));
                                m_sbid  = ((!%&r_sbid%) || (%&r_sbid% == %&f_sbid%));
                                m_match = ((%m_item%) && (%m_name%) && (%m_sbid%));
                                debug_log(%debug%,%&script_debug_name%,"m_match: %m_match%");
                                if(%m_match%);
                                    #i_slot = %#f_slot%;
                                    break;
                                endif;
                            else;
                                break;
                            endif;
                        next;
                        
                        if(%#i_slot% != -1);
                            slotclick(%#i_slot%);
                        endif;
                    endif;
                    
                    wait("1t");
                    inc(#waited_ticks);
                until((%func_timeout%) || (%gui_updated%));
            endif;
            
            // Recursive call self.
            if(true);
                if(!%func_timeout%);
                    #timeout_sec   = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                    return_boolean = call("progressPath",%&master_path%,%allow_command%,%#tick_wait%,%#timeout_sec%);
                    return(%return_boolean%);
                endif;
                return(False);
            endif;
        endfunction;
    // gui/index/invslot_to_conslot
        // Takes input of a getslotiteminv indexed inventory slot (static, starts at 9 for top left inv, ends @ 44 bottom right inv)
        // and converts it to it's dynamic position in whatever GUI is currently opened.
            // Params:
            //      {number} <#slot>    The getslotiteminv indexed inventory slot to convert
            //
            // Returns <#slot>'s dynamic slot ID in whichever container is currently opened, or -1 if no container with CONTAINERSLOTS is opened.
        function invslot_to_conslot(#slot);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:62
            if(%CONTAINERSLOTS% >= 1);
                #conslot = (%CONTAINERSLOTS% - 45) + %#slot%;
                return(%#conslot%);
            else;
                return(-1);
            endif;
        endfunction;
    // bazaar/index/getSubcategoryProductInventorySlotFromPath
        // Given a Subproduct's Path, extracts the relevant variables and checks in our Inventory to see whether or not we have any
        // of the Item described in the Subproduct. If we do, returns the first Inventory Slot where the Subproduct was found. If not,
        // returns -1. Slot IDs are Inventory Indexed.
            // Params:
                // {string} <&subproduct_path>    The dot-separated JSON Path of the Subproduct to look for within the Inventory.
                //
            // Returns the first Inventory Slot where the Subproduct was found. If not, returns -1. Slot IDs are Inventory Indexed.
        function getSubcategoryProductInventorySlotFromPath(&subproduct_path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:888
            #return_number = -1;
            #r_start       = 9;
            #r_end         = 43;
            &subprod_json  = jsonget(%&subproduct_path%,%@&mkb_baz_json%);
            &item[]        = jsonget("holds.mcid",%&subprod_json%);
            &name[]        = jsonget("holds.name",%&subprod_json%);
            &sbid[]        = jsonget("holds.sbid",%&subprod_json%);
            &item[]        = jsonget("button.mcid",%&subprod_json%);
            &name[]        = jsonget("button.name",%&subprod_json%);
            &sbid[]        = jsonget("button.sbid",%&subprod_json%);
            &terms[]       = split(", ","item, name, sbid");
            foreach(&terms[],&term,#t);
                &r_ptr = "&r_%&term%";
                &r_arr = "&%&term%[]";
                foreach(%&r_arr%,&entry);
                    ifnotbeginswith(%&entry%,"ERROR");
                        set(%&r_ptr%,%&entry%);
                        break;
                    endif;
                next;
            next;
            
            for(#r_slot,%#r_start%,%#r_end%);
                #f_slot = %#r_slot%;
                if(%&r_item%);
                    getslotinv(%&r_item%,#f_slot,%#r_offset%);
                endif;
                
                if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                    #r_offset = %#f_slot% + 1;
                    &f_item   = getslotiteminv(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                    &f_nbt    = strip(%&f_nbt%);
                    if(%&r_sbid%);
                        &f_sbid = getItemSBID(%&f_nbt%);
                    endif;
                    if(%&r_name%);
                        &f_name = getItemName(%&f_nbt%,%&f_item%);
                    endif;
                    m_item    = ((!%&r_item%) || (%&r_item% == %&f_item%));
                    m_name    = ((!%&r_name%) || (%&r_name% == %&f_name%));
                    m_sbid    = ((!%&r_sbid%) || (%&r_sbid% == %&f_sbid%));
                    m_match   = ((%m_item%) && (%m_name%) && (%m_sbid%));
                    if(%m_match%);
                        #return_number = %#f_slot%;
                        break;
                    endif;
                else;
                    break;
                endif;
            next;
            return(%#return_number%);
        endfunction;
    // bazaar/index/getSubcategoryProductPaths
        // Extracts all the Subproducts of a Subcategory's `holds` field and returns them as an Array.
            // Params:
                // {string} <&subcategory_path>    The dot-separated JSON Path of the Subcategory to get the Subproducts from.
                //
            // Returns an Array of the JSON Paths that are of type SUBPRODUCT within the specified Subcategory.
        function getSubcategoryProductPaths(&subcategory_path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:864
            for(#i,0,99);
                &subproduct_type = jsonget("%&subcategory_path%.holds.%#i%.type",%@&mkb_baz_json%);
                if(%&subproduct_type% == "SUBPRODUCT");
                    &return_array[] = "%&subcategory_path%.holds.%#i%";
                else;
                    break;
                endif;
            next;
            
            #return_array_sz = arraysize(&return_array[]);
            if(%#return_array_sz% == 0);
                &return_array[] = "NONE";
            endif;
            return(&return_array[]);
        endfunction;
    // array/index/arrayLength
        // Returns the zero-indexed length of an Array.
            // Params:
            //        <array> <&array[]>    The Array to measure the length of.
            //
            // Returns the zero-indexed length of the Array (arraysize - 1).
        function arrayLength(&array[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:6
            #array_size   = arraysize(&array[]);
            #array_length = #array_size - 1;
            return(%#array_length%);
        endfunction;
    // bazaar/index/getJSONParent
        // Walks back a Bazaar JSON Path to the Object Type specified in [&stop_at]. Returns the JSON dot-separated path.
            // Params:
                // {string} <&json_path>             The dot-separated JSON Path of the lower-most Object that we want to walk back up from.
                // {string} [&stop_at="CATEGORY"]    The Object Type ENUM to stop at. Valid strings are:
                //                                   CATEGORY, SUBCATEGORY, SUBPRODUCT, BUTTON, PRODUCT.
            // Returns the dot-separated JSON Path in @&mkb_baz_json that can be used to get the Parent Object, or "NONE" if some error occurred.
        function getJSONParent(&json_path,&stop_at="CATEGORY");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:841
            &stop_at       = miscValidate(%&stop_at%,0,"CATEGORY","SUBCATEGORY","SUBPRODUCT","BUTTON","PRODUCT");
            &return_string = "NONE";
            &split_path[]  = split(".",%&json_path%);
            #split_path    = arraylength(&split_path[]);
            for(#to_index,%#split_path%,0);
                unset(&to_index[]);
                push(&to_index[],&split_path[0:%#to_index%]);
                &to_index = join(".",&to_index[]);
                &obj_type = jsonget("%&to_index%.type",%@&mkb_baz_json%);
                if(%&obj_type% == %&stop_at%);
                    &return_string = %&to_index%;
                    break;
                endif;
            next;
            return(%&return_string%);
        endfunction;
    // bazaar/index/getPartsPath
        // Gets the Path corresponding to an Array of Parts.
            // Params:
                // {string} <&parts[]>    The Parts of the Path to join together.
                //
            // Returns the Path String.
        function getPartsPath(&parts[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1001
            #parts = arraysize(&parts[]);
            if((%#parts% >= 1) && (%&parts[0]% != ""));
                &path = join(".",&parts[]);
            endif;
            return(%&path%);
        endfunction;
    // bazaar/index/getPathParts
        // Returns an Array of the 'parts' of a given Path.
            // Params:
                // {string} <&path>    The Path to get the 'parts' of.
                //
            // Returns a String Array.
        function getPathParts(&path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:989
            if(%&path% != "");
                &parts[] = split(".",%&path%);
            endif;
            return(&parts[]);
        endfunction;
    // bazaar/index/getPathJSON
        // Gets the JSON Object found at the specified Path.
            // Params:
                // {string} <&path>    The Path to the JSON Object to retrieve from @&mkb_baz_json.
                //
            // Returns the JSON String Object.
        function getPathJSON(&path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1039
            debug              = true;
            &script_debug_name = "&9getPathJSON";
            
            if(%&path% != "");
                debug_log(%debug%,%&script_debug_name%,"path %&path% not null");
                &object = jsonget(%&path%,%@&mkb_baz_json%);
                ifbeginswith(%&object%,"[");
                    &path_parts[] = getPathParts(%&path%);
                    pop(&path_parts[]);
                    &call_path  = getPartsPath(&path_parts[]);
                    debug_log(%debug%,%&script_debug_name%,"path is array, recursive calling with %&call_path%");
                    &path_json  = call("getPathJSON",%&call_path%);
                    return(%&path_json%);
                endif;
                return(%&object%);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning root");
            return(%@&mkb_baz_json%);
        endfunction;
    // bazaar/index/getPathType
        // Gets the Type of the JSON Object found at the specified Path.
            // Params:
                // {string} <&path>    The Path to the JSON Object to retrieve from @&mkb_baz_json.
                //
            // Returns the JSON Object's Type: ROOT, CATEGORY, SUBCATEGORY, SUBPRODUCT, PRODUCT, BUTTON.
        function getPathType(&path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1065
            &path_json = getPathJSON(%&path%);
            &path_type = jsonget("type",%&path_json%);
            return(%&path_type%);
        endfunction;
    // bazaar/index/getPathDepth
        // Calculates the 'depth' of a Path based off it's Type property in the mkb_baz_json Object.
            // Params:
                // {string} <&path>    The Path to calculate the Depth of.
                //
            // Returns the Integer 'depth' of the Path.
        function getPathDepth(&path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1076
            &path_type = getPathType(%&path%);
            if(%&path_type% == "ROOT");
                #path_depth = 0;
            elseif(%&path_type% == "CATEGORY");
                #path_depth = 1;
            elseif((%&path_type% == "PRODUCT") || (%&path_type% == "SUBCATEGORY"));
                #path_depth = 2;
            else;
                #path_depth = 3;
            endif;
            return(%#path_depth%);
        endfunction;
    // bazaar/index/getFromNewGUICost
        // Calculates the amount of Clicks required to get us from a new Bazaar GUI to <&target_path>.
            // Params:
                // {string} <&target_path>      JSON dot Path
                // {string} [&ancestor_path]    The Type of the Ancestor if known. If is ROOT, will add an additional
                //                              point of cost to the depth. If not, will return the Target's Depth as-is.
        function getFromNewGUICost(&target_path,&ancestor_path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1156
            #target_depth  = getPathDepth(%&target_path%);
            &ancestor_type = getPathType(%&ancestor_path%);
            if(%&ancestor_type% == "ROOT");
                #target_depth = %#target_depth% + 1;
            endif;
            return(%#target_depth%);
        endfunction;
    // bazaar/index/getCommonAncestorPath
        // Finds the Common Ancestor Path String between the Origin Path and the Target Path.
            // Params:
                // {string} <&origin_path>    The Origin JSON Path in @&mkb_baz_json
                // {string} <&target_path>    The Target JSON Path in @&mkb_baz_json
            // Returns the Path to the Common Ancestor, or an empty String if the Root JSON is the Common Ancestor.
        function getCommonAncestorPath(&origin_path,&target_path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1014
            debug              = true;
            &script_debug_name = "&6getCommonAncestorPath";
            
            &origin_parts[]    = getPathParts(%&origin_path%);
            &target_parts[]    = getPathParts(%&target_path%);
            foreach(&origin_parts[],&origin_part,#opi);
                &target_part = %&target_parts[%#opi%]%;
                if(%&origin_part% == %&target_part%);
                    debug_log(%debug%,%&script_debug_name%,"%#opi% > origin_part = %&origin_part%, target_part = %&target_part%");
                    &ancestor_parts[] = %&origin_part%;
                else;
                    break;
                endif;
            next;
            &ancestor_path = getPartsPath(&ancestor_parts[]);
            debug_log(%debug%,%&script_debug_name%,"ancestor path is %&ancestor_path%");
            return(%&ancestor_path%);
        endfunction;
    // bazaar/index/getFromOriginCost
        // Calculates the amount of Clicks required to get us from <&origin_path> to <&target_path>.
            // Params:
                // {string} <&origin_path>      JSON dot Path
                // {string} <&target_path>      JSON dot Path
                // {string} [&origin_type]      String ENUM of GUI Type: BUY_INSTANT_QTY, BUY_INSTANT_QTY_SIGN, BUY_INSTANT_CONFIRM, BUY_ORDER_QTY, BUY_ORDER_QTY_SIGN,
                //                              BUY_ORDER_CONFIRM, BUY_ORDER_MANAGE, BUY_ORDER_FLIP, SELL_INSTANT_QTY, SELL_INSTANT_INVENTORY, SELL_ORDER_QTY, SELL_ORDER_QTY_SIGN,
                //                              SELL_ORDER_PRICE, SELL_ORDER_PRICE_SIGN, SELL_ORDER_CONFIRM, SELL_ORDER_MANAGE, ORDER_MANAGE, GRAPHS
                // {string} [&ancestor_path]    The Ancestor Path between Origin and Target, if known. Will calculate if not known.
        function getFromOriginCost(&origin_path,&target_path,&origin_type,&ancestor_path);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1098
            debug              = true;
            &script_debug_name = "getFromOriginCost";
            
            // Calculate the additional cost of whatever Origin Type we are in.
            if(true);
                &cost_inf[] = split(", ","SELL_INSTANT_INVENTORY, NONE");
                &cost_one[] = split(", ","BUY_INSTANT_QTY, BUY_INSTANT_QTY_SIGN, BUY_ORDER_QTY, BUY_ORDER_QTY_SIGN, BUY_ORDER_PRICE, BUY_ORDER_PRICE_SIGN, BUY_ORDER_CONFIRM, SELL_INSTANT_QTY, SELL_ORDER_QTY, SELL_ORDER_QTY_SIGN, SELL_ORDER_PRICE, SELL_ORDER_PRICE_SIGN, SELL_ORDER_CONFIRM, ORDER_MANAGE, GRAPHS");
                &cost_two[] = split(", ","BUY_INSTANT_CONFIRM, SELL_ORDER_MANAGE, BUY_ORDER_MANAGE, BUY_ORDER_FLIP");
                #inf_index  = indexof(&cost_inf[],,%&origin_type%);
                #one_index  = indexof(&cost_one[],,%&origin_type%);
                #two_index  = indexof(&cost_two[],,%&origin_type%);
                if(%#inf_index% != -1);
                    return(999);
                elseif(%#one_index% != -1);
                    #add_cost = 1;
                elseif(%#two_index% != -1);
                    #add_cost = 2;
                endif;
            endif;
            
            // 1a. Find Common Ancestor between Origin and Target Path.
            if(%&ancestor_path% == "");
                &ancestor_path = getCommonAncestorPath(%&origin_path%,%&target_path%);
            endif;
            
            // 1b. Find all Path's Depths
            #ancestor_depth = getPathDepth(%&ancestor_path%);
            #origin_depth   = getPathDepth(%&origin_path%);
            #target_depth   = getPathDepth(%&target_path%);
            
            // 2a. Calculate the distance from the Origin to the Common Ancestor Path.
            #origin_to_ancestor_dist = %#origin_depth% - %#ancestor_depth%;
            
            // 2b. Calculate the distance from the Common Ancestor to the Target Path.
            &ancestor_type = getPathType(%&ancestor_path%);
            if(%&ancestor_type% == "ROOT");
                #ancestor_augment = 1;
            endif;
            #ancestor_to_target_dist = (%#target_depth% - %#ancestor_depth%) - %#ancestor_augment%;
            
            // 3a. Calculate and return the sum of the distances
            #sum_dist = (%#origin_to_ancestor_dist% + %#ancestor_to_target_dist%) + %#add_cost%;
            
            &vars[] = split(" ","&ancestor_path #ancestor_depth &origin_path #origin_depth &target_path #target_depth #origin_to_ancestor_dist &ancestor_type #ancestor_augment #ancestor_to_target_dist #add_cost #sum_dist");
            foreach(&vars[],&var,#v);
                &val = %%&var%%;
                &logvar = regexreplace(&var,"(?<!&)&","&&");
                debug_log(%debug%,%&script_debug_name%,"%#v% > %&logvar% : %&val%");
            next;
            return(%#sum_dist%);
        endfunction;
    // bazaar/index/getTravelOptions
        // Calculates the cost of each 'travel' option (origin path to target path, close and re-open Bazaar GUI,
        // subproduct => subcategory => subproduct, subproduct click), then sorts them by their cost and returns them.
            // Params:
                // {string} <&origin_path>    JSON dot Path
                // {string} <&target_path>    JSON dot Path
                // {string} [&origin_type]    String ENUM of GUI Type: BUY_INSTANT_QTY, BUY_INSTANT_QTY_SIGN, BUY_INSTANT_CONFIRM, BUY_ORDER_QTY, BUY_ORDER_QTY_SIGN,
                //                            BUY_ORDER_CONFIRM, BUY_ORDER_MANAGE, BUY_ORDER_FLIP, SELL_INSTANT_QTY, SELL_INSTANT_INVENTORY, SELL_ORDER_QTY, SELL_ORDER_QTY_SIGN,
                //                            SELL_ORDER_PRICE, SELL_ORDER_PRICE_SIGN, SELL_ORDER_CONFIRM, SELL_ORDER_MANAGE, ORDER_MANAGE, GRAPHS
            // Returns an Array of Strings in format: '<#cost>|<&enum>', where <#cost> is the cost of taking that Path,
            // and <&enum> is one of: FROM_ORIGIN, FROM_NEW_GUI, FROM_SUBCATEGORY, FROM_PRODUCT.
        function getTravelOptions(&origin_path,&target_path,&origin_type);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1175
            &cost_inf[] = split(", ","SELL_INSTANT_INVENTORY, NONE");
            #cost_inf   = indexof(&cost_inf[],,%&origin_type%);
            
            // 1a. Determine common ancestor
            &ancestor_path = getCommonAncestorPath(%&origin_path%,%&target_path%);
            
            // 2a. Calculate FROM_ORIGIN cost
            if(%#cost_inf% == -1);
                #cost_from_origin = getFromOriginCost(%&origin_path%,%&target_path%,%&origin_type%,%&ancestor_path%);
                #cost_numbers[]   = %#cost_from_origin%;
                &cost_strings[]   = "%#cost_from_origin%|FROM_ORIGIN";
            endif;
            
            // 2b. Calculate FROM_NEW_GUI cost.
            #cost_from_new_gui = getFromNewGUICost(%&target_path%,%&ancestor_path%);
            #cost_numbers[]    = %#cost_from_new_gui%;
            &cost_strings[]    = "%#cost_from_new_gui%|FROM_NEW_GUI";
            
            // 2c. Calculate FROM_SUBCATEGORY cost.
            if(%#cost_inf% == -1);
                &target_type = getPathType(%&target_path%);
                if((%&target_type% == "SUBPRODUCT") || (%&target_type% == "SUBCATEGORY"));
                    &ancestor_type = getPathType(%&ancestor_type%);
                    if(%&ancestor_type% == "SUBCATEGORY");
                        #cost_from_subcategory = 2;
                    else;
                        #cost_from_subcategory = 3;
                    endif;
                    #cost_numbers[] = %#cost_from_subcategory%;
                    &cost_strings[] = "%#cost_from_subcategory%|FROM_SUBCATEGORY";
                endif;
            endif;
            
            // 2d. Calculate FROM_PRODUCT cost.
            if((%#cost_inf% == -1) && ((%&target_type% == "SUBPRODUCT") || (%&target_type% == "PRODUCT")));
                #cost_from_product = 1;
                #cost_numbers[]    = %#cost_from_product%;
                &cost_strings[]    = "%#cost_from_product%|FROM_PRODUCT";
            endif;
            
            // 3a. Sort cost strings by ascending cost_numbers
            #cost_numbers = arraysize(#cost_numbers[]);
            if(%#cost_numbers% > 1);
                sort("ASC",#cost_numbers[],&cost_strings[]);
            endif;
            
            // 3b. Return sorted cost_strings.
            return(&cost_strings[]);
        endfunction;
    // bazaar/index/openBazaarTo
        // Given one or more compatible GUI ENUMs, navigates through the Bazaar into the specified GUI Type.
            // Params:
                // {string} [&search_term]           The Product Path, SBID, Display Name, or Index in the @&mkb_baz_paths Array. If omitted
                //                                   or invalid, will just open the Bazaar.
                // {boolean} [allow_command=true]    Whether or not to allow the usage of the /bz Command.
                // {number} [#tick_wait=20]          Amount of ticks to wait between clicks.
                // {number} [#timeout_sec=30]        Max seconds fn can run for before timing out. <= 0 to infinite loop until success.
            // Returns a Boolean indicating whether or not the specified GUI was correctly opened.
        function openBazaarTo(&search_term,allow_command=true,#tick_wait=20,#timeout_sec=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index.txt:1430
            // Setup fn vars
            if(true);
                // Setup fn vars
                if(true);
                    debug              = true;
                    &script_debug_name = "&6openBazaarTo&7";
                    do_timeout         = %#timeout_sec% > 0;
                    #start_time        = %TIMESTAMP%;
                endif;
                
                // Process params
                if(true);
                    ifmatches(%&search_term%,"^\d+$");
                        #bazaar_index := %&search_term%;
                    else;
                        #bazaar_index  = getBazaarIndex(%&search_term%);
                    endif;
                    
                    #bazaar_paths = arraylength(@&mkb_baz_paths[]);
                    if((%#bazaar_index% >= 0) && (%#bazaar_index% <= %#bazaar_paths%));
                        &bazaar_path = %@&mkb_baz_paths[%#bazaar_index%]%;
                        &bazaar_sbid = %@&mkb_baz_sbids[%#bazaar_index%]%;
                        &bazaar_name = %@&mkb_baz_names[%#bazaar_index%]%;
                        product_mode = true;
                        debug_log(%debug%,%&script_debug_name%,"opening Bazaar to Product &d%&bazaar_name% [%&bazaar_sbid%]");
                    else;
                        debug_log(%debug%,%&script_debug_name%,"opening Bazaar");
                    endif;
                endif;
                
                // Enter Bazaar and find GUI Type
                if(true);
                    &bazaar_gui_type[] = getBazaarGUIType();
                    &bazaar_gui_type   = %&bazaar_gui_type[0]%;
                    if(%&bazaar_gui_type% == "NONE");
                        bazaar_opened = openBazaar(%allow_command%);
                        if(!%bazaar_opened%);
                            debug_error(%debug%,%&script_debug_name%,"Could not open the Bazaar.");
                            return(False);
                        endif;
                        &bazaar_gui_type[] = getBazaarGUIType();
                        &bazaar_gui_type   = %&bazaar_gui_type[0]%;
                    endif;
                    
                    if(!%product_mode%);
                        return(True);
                    endif;
                    
                    &bazaar_gui_path = %&bazaar_gui_type[1]%;
                endif;
            endif;
            
            // Find the possible Travel Paths to this Path.
            if(true);
                &possible_paths[] = getTravelOptions(%&bazaar_gui_path%,%&bazaar_path%,%&bazaar_gui_type%);
                foreach(&possible_paths[],&possible_path,#pp);
                    &possible_path[] = split("|",%&possible_path%);
                    #possible_cost  := %&possible_path[0]%;
                    &possible_enum   = %&possible_path[1]%;
                    if(%&possible_enum% == "FROM_PRODUCT");
                        &search_item_paths[] = %&bazaar_path%;
                    elseif(%&possible_enum% == "FROM_SUBCATEGORY");
                        &subcategory         = getJSONParent(%&bazaar_path%,"SUBCATEGORY");
                        &subcategory_paths[] = getSubcategoryProductPaths(%&subcategory%);
                        foreach(&subcategory_paths[],&subcategory_path,#spi);
                            if(%&subcategory_path% != %&bazaar_path%);
                                &search_item_paths[] = %&subcategory_path%;
                            endif;
                        next;
                    elseif(%&possible_enum% == "FROM_ORIGIN");
                        &valid_enum = %&possible_enum%;
                    elseif(%&possible_enum% == "FROM_NEW_GUI");
                        &valid_enum = %&possible_enum%;
                    endif;
                    
                    #search_item_paths_sz = arraysize(&search_item_paths[]);
                    if(%#search_item_paths_sz% >= 1);
                        foreach(&search_item_paths[],&search_item_path,#sip);
                            #search_item_slot = getSubcategoryProductInventorySlotFromPath(%&search_item_path%);
                            debug_log(%debug%,%&script_debug_name%,"search_item_slot for %&search_item_path% is %#search_item_slot%");
                            if(%#search_item_slot% != -1);
                                &valid_enum = %&possible_enum%;
                                #valid_slot = %#search_item_slot%;
                                break;
                            endif;
                        next;
                        unset(&search_item_paths[])
                    endif;
                    
                    if(%&valid_enum% != "");
                        debug_log(%debug%,%&script_debug_name%,"will be using enum type %&valid_enum% with cost %#possible_cost%!");
                        break;
                    endif;
                next;
            endif;
            
            // Execute actions depending on which Valid ENUM we found.
            if(true);
                if((%&valid_enum% == "FROM_PRODUCT") || (%&valid_enum% == "FROM_SUBCATEGORY"));
                    debug_log(%debug%,%&script_debug_name%,"will be clicking on product");
                    &init_gui = getContainerString(True);
                    do;
                        entered_new_gui = enteredNewGUI(%&init_gui%,True);
                        if(%entered_new_gui%);
                            debug_log(%debug%,%&script_debug_name%,"entered new GUI!");
                            break;
                        endif;
                        
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"function timed out!");
                            break;
                        endif;
                        
                        can_click = canDoInteraction(%#waited_ticks%,%#tick_wait%);
                        if(%can_click%);
                            #click_slot = invslot_to_conslot(%#valid_slot%);
                            debug_log(%debug%,%&script_debug_name%,"updated click slot is %#click_slot%");
                            slotclick(%#click_slot%);
                        endif;
                        
                        wait("1t");
                        inc(#waited_ticks);
                    until((%entered_new_gui%) || (%func_timeout%));
                    if(%func_timeout%);
                        return(False);
                    endif;
                elseif(%&valid_enum% == "FROM_NEW_GUI");
                    localGUI("NONE");
                    in_bazaar = openBazaar(%allow_command%);
                    if(!%in_bazaar%);
                        debug_error(%debug%,%&script_debug_name%,"Could not open the Bazaar");
                        return(False);
                    endif;
                endif;
            endif;
            
            // Progress the Path along to fix any Errors and/or continue the Path.
            if(true);
                if(%do_timeout%);
                    #timeout_sec = %#timeout_sec% - (%TIMESTAMP% - %#start_time%);
                endif;
                return_boolean = progressPath(%&bazaar_path%,%allow_command%,%tick_wait%,%#timeout_sec%);
                return(%return_boolean%);
            endif;
        endfunction;
    // string/index/coerceNumber
        // Coerces an input number string into a valid integer. The input number string can be in E Notation, or contain
        // commas, or contain decimal values, or any mix of the above.
            // Params:
                // {string} <&number_string>                The Number String to Convert into a valid Integer.
                // {string} [&rounding_strategy="ROUND"]    String ENUM that dictates how to handle decimal values. Valid values are:
                //                                          FLOOR (towards negative infinity), CEILING|CEIL (towards positive infinity),
                //                                          TRUNCATE|TRUNC (rounds up or down towards 0), ROUND (towards nearest integer).
                //                                          Defaults to ROUND if omitted or an invalid input is provided.
            // Returns the Number coerced into a valid Integer (real-integer type, not string type. If the input string is not
            // coercable at all, 0 will be returned). If the final value before coercion to integer contains decimals, the coerced value
            // will be rounded according to the [&rounding_strategy] parameter.
            // Example:
                //    Converting a comma split, float string into an Integer
                    //    &number_string     = "100,000.9171";
                    //    &rounding_strategy = "ROUND";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
                    //    log("#number_integer: %#number_integer%"); // '#number_integer: 100001'
                //    Replace the content in the Parameters as needed:
                    //    &number_string     = "Can contain commas, decimals, e. notation, or mix of all three.";
                    //    &rounding_strategy = "One of: FLOOR, CEILING|CEIL, TRUNCATE|TRUNC, ROUND, or empty string.";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
        function coerceNumber(&number_string,&rounding_strategy="ROUND");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:343
            &number_string = replace(&number_string,",");
            &number_string = convertENote(%&number_string%);
            ifcontains(%&number_string%,".");
                &rounding_strategy = miscValidate(%&rounding_strategy%,0,"ROUND","FLOOR","CEILING","CEIL","TRUNCATE","TRUNC");
                if(%&rounding_strategy% == "ROUND");
                    // Round the decimal value to the nearest integer.
                    &return_string = formatnumber(%&number_string%,0,true);
                elseif((%&rounding_strategy% == "TRUNCATE") || (%&rounding_strategy% == "TRUNC"));
                    // Exclude the decimal value entirely.
                    &return_string = regexreplace(&number_string,"\.\d*$");
                else;
                    // Use xEval to evaluate the number_string with the corresponding rounding_term. Instruct
                    // xEval to coerce the value into an integer for us, so any trailing ".0" is stripped from it's
                    // return value.
                    if((%&rounding_strategy% == "CEILING") || (%&rounding_strategy% == "CEIL"));
                        &rounding_term = "ceil";
                    elseif(%&rounding_strategy% == "FLOOR");
                        &rounding_term = "floor";
                    endif;
                    &return_string = xEval("%&rounding_term%(%&number_string%)",true);
                endif;
            else;
                // The Number does not contain a decimal value to begin with, return as usual.
                &return_string = %&number_string%;
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/stringToNumber
        // Coerces a given String to a Number (no decimal points).
            // Params:
                // {string} <&convert_string>    The String to Convert.
                // {number} [#precision=0]       Decimal Precision
            // Returns the Number result of the coercion.
        function stringToNumber(&convert_string,#precision=0);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:113
            #convert_number = coerceNumber(%&convert_string%);
            return(%#convert_number%);
        endfunction;
    // bazaar/index_orders/bazaarQuickOrders
        // Gets a quick Summary of active Bazaar Orders.
            // Params:
                // {boolean} [allow_command=true]    Whether or not we want to allow the usage of the /bz command.
                // {number} [#tick_wait=20]          Amount of Ticks to wait in between Actions (clicks).
                // {number} [#timeout_sec=30]        Amount of Seconds Function can run for before timing out. Set to <= 0 to disable.
            // Returns an Array:
                // 0 {number} #order_amount    Amount of Active Orders
                // 1 {number} #order_items     Amount of Items ready to be claimed
                // 2 {number} #order_coins     Amount of Coins ready to be claimed
        function bazaarQuickOrders(allow_command=true,#tick_wait=20,#timeout_sec=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/bazaar/index_orders.txt:262
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&9bazaarQuickOrders";
                do_timeout         = %#timeout_sec% > 0;
                #start_time        = %TIMESTAMP%;
            endif;
            
            // Begin Looping until we have found our outcome.
            if(true);
                &target_gui   = "CATEGORY";
                #order_amount = 0;
                #order_coins  = 0;
                #order_items  = 0;
                do;
                    // 1. Check if the Function has timed out
                    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                    if(%func_timeout%);
                        exit_condition_reached = true;
                        debug_error(%debug%,%&script_debug_name%,"Function timed out.");
                        break;
                    endif;
                    
                    // 2. Check what Bazaar GUI we are in. If we are in a GUI that has access to the Manage Orders Button, progress to it.
                    if(true);
                        &bazaar_gui[] = getBazaarGUIType();
                        &bazaar_enum  = %&bazaar_gui[0]%;
                        &bazaar_path  = %&bazaar_gui[1]%;
                        #enum_index   = indexof(&order_enums[],,%&bazaar_enum%);
                        if(%&bazaar_enum% == %&target_gui%);
                            // Iterate over Dynamic Container Slots
                            if(true);
                                #r_start  = 0;
                                #r_end    = %CONTAINERSLOTS% - 37;
                                #r_offset = 0;
                                &r_item   = "book";
                                &r_name   = "Manage Orders";
                                for(#r_slot,%#r_start%,%#r_end%);
                                    #f_slot = %#r_slot%;
                                    if(%&r_item%);
                                        getslot(%&r_item%,#f_slot,%#r_offset%);
                                    endif;
                                    
                                    if((%#f_slot% >= %#r_start%) && (%#f_slot% <= %#r_end%));
                                        #r_offset = %#f_slot% + 1;
                                        &f_item   = getslotitemnbt(%#f_slot%,,#f_stack,#f_data,&f_nbt);
                                        &f_nbt    = strip(%&f_nbt%);
                                        &f_name   = getItemName(%&f_nbt%,%&f_item%);
                                        m_item    = ((!%&r_item%) || (%&r_item% == %&f_item%));
                                        m_name    = ((!%&r_name%) || (%&r_name% == %&f_name%));
                                        m_sbid    = ((!%&r_sbid%) || (%&r_sbid% == %&f_sbid%));
                                        m_match   = ((%m_item%) && (%m_name%) && (%m_sbid%));
                                        if(%m_match%);
                                            match(%&f_nbt%,"Orders: (\d+)",#order_amount,1,0);
                                            match(%&f_nbt%,"You have ([0-9,.-]+) items to claim!",&order_items,1,0);
                                            match(%&f_nbt%,"You have ([0-9,.-]+) coins to claim!",&order_coins,1,0);
                                            #order_items           = stringToNumber(%&order_items%);
                                            #order_coins           = stringToNumber(%&order_coins%);
                                            exit_condition_reached = true;
                                            break;
                                        endif;
                                    else;
                                        break;
                                    endif;
                                next;
                            endif;
                        else;
                            if(%GUI% != "NONE");
                                localGUI("NONE");
                            endif;
                            
                            #recurse_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                            bazaar_opened    = openBazaarTo("",%allow_command%,%#tick_wait%,%#recurse_timeout%);
                            if(!%bazaar_opened%);
                                debug_error(%debug%,%&script_debug_name%,"Could not open the Bazaar!");
                                exit_condition_reached = true;
                                break;
                            else;
                                debug_log(%debug%,%&script_debug_name%,"&aSuccessfully entered the Bazaar.");
                            endif;
                        endif;
                    endif;
                    
                    wait("1t");
                until(%exit_condition_reached%);
            endif;
            
            return(%#order_amount%,%#order_items%,%#order_coins%);
        endfunction;
//! @mkb-import-end