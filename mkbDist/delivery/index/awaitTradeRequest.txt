//! @mkb-import-begin
    // info/index/hasTimeExceeded
        // Used to determine whether to timeout a function.
            // Params:
                // {number} <#start_time>        The start timestamp to subtract from current timestamp
                // {number} <#timeout_sec>       The amount of seconds to check if difference between now & start is >=.
                // {number} [do_timeout=true]    If false, will always return false (used as shorthand for functions that
                //                               use this function to determine whether or not they have timed out).
            // Returns a boolean indicating whether or not <#start_timestamp> was >= <#seconds> ago.
            // Example:
                //    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
        function hasTimeExceeded(#start_time,#timeout_sec,do_timeout=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:10
            #elapsed_sec   = %TIMESTAMP% - #start_time;
            return_boolean = ((%do_timeout%) && (#elapsed_sec >= #timeout_sec));
            return(%return_boolean%);
        endfunction;
    // debug/index/debug_error
        // Logs a message to chat with an error prefix.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_error(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:49
            // &matcher       = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement   = "&$1";
            // &string        = regexreplace(&string,%&matcher%,%&replacement%);
            &error_message = "&4Error > &c%&string%";
            &error_message = regexreplace(&error_message,"&7","&c");
            &error_message = "&7%&script_debug_name%&7: %&error_message%";
            if(%debug_enabled%);
                log(%&error_message%);
            endif;
            return(%&error_message%);
        endfunction;
    // array/index/arrayDelete
        // Removes the Element at <#index> from <&array[]> (different from calling unset, completely clears the entry from the Array).
            // Params:
            //        {array} <&array[]>    The Array to unset the specified index from.
            //        {number} <#index>     The Index to unset in the Source Array. If negative, will be taken
            //                              as an offset from the end of the Array (i.e. -1 = array.length - 1).
            //                              If the Index is greater than the length of the Source Array, no element
            //                              will be removed.
        function arrayDelete(&array[],#index);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:295
            #array_size = arraysize(&array[]);
            #array_len  = #array_size - 1;
            if(%#array_size% == 0);
                return(&array[]);
            else;
                if(%#index% < 0);
                    #index = #array_len + #index;
                endif;
                
                if((%#index% >= 0) && (%#index% <= %#array_len%));
                    foreach(&array[],&element,#i);
                        if(%#i% != %#index%);
                            &out_array[] = %&element%;
                        endif;
                    next;
                endif;
            endif;
            return(&out_array[]);
        endfunction;
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/xJsonGet
        // Identical to original `jsonget`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&string_a>    The Key to get in the JSON Object, or the JSON Object itself.
                // {string} <&string_b> The Key to get in the JSON Object, or the JSON Object itself. Must be the other value compared to <&string_a>
            // Returns the value provided by `jsonget`, processed thru `convertENote`. Identical results, only difference is preservation of silently coerced Numbers.
        function xJsonGet(&string_a,&string_b);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:265
            &return_string = jsonget(%&string_a%,%&string_b%);
            &return_string = convertENote(%&return_string%);
            return(%&return_string%);
        endfunction;
    // array/index/arrayLength
        // Returns the zero-indexed length of an Array.
            // Params:
            //        <array> <&array[]>    The Array to measure the length of.
            //
            // Returns the zero-indexed length of the Array (arraysize - 1).
        function arrayLength(&array[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/array/index.txt:6
            #array_size   = arraysize(&array[]);
            #array_length = #array_size - 1;
            return(%#array_length%);
        endfunction;
    // api/minecraft/getMinecraftProfileCacheIndex
        // Checks if a Minecraft Profile is available in the Cached Arrays (@&cached_mc_ [split_ids, joint_ids, usernames, change_ts]).
        // If it is, and the Cache is not invalid, the index the entry can be found at is returned. Otherwise, -1 is returned.
                // Params:
                //        <string>  &search_term   : The term to search for. Can be the username, dashed UUID, or joint UUID.
                //      [boolean] check_validity : True to return the index only if it is valid, false to return the index regardless of it's validity.
                //
                // Returns the index the Profile can be found at in the Cache.
        function getMinecraftProfileCacheIndex(&search_term,check_validity=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/minecraft.txt:8
            &script_debug_name = "&9getMinecraftProfileCacheIndex&7";
            debug              = true;
        
            // Check if the search term can be found in any of the caches.
            if(true);
                #lookup_index  = -1;
                #cache_index[] = indexof(@&cached_mc_split_uuids[],,%&search_term%);
                #cache_index[] = indexof(@&cached_mc_joint_uuids[],,%&search_term%);
                #cache_index[] = indexof(@&cached_mc_usernames[],,%&search_term%);
                foreach(#cache_index[],#cache_index);
                    if(%#cache_index% != -1);
                        #lookup_index = %#cache_index%;
                        break;
                    endif;
                next;
        
                // If we hit a valid cache entry, check if it is valid.
                if(%#lookup_index% != -1);
                    #valid_before = %@#cached_mc_valid_until[%#lookup_index%]%;
                    if((!%check_validity%) || (%#valid_before% >= %TIMESTAMP%));
                        // Player can't change name yet, the cache is valid.
                        return(%#lookup_index%);
                    endif;
                endif;
            endif;
        
            return(-1);
        endfunction;
    // api/minecraft/getMinecraftProfile
        // Gets a User's Minecraft Profile from playerdb.co.
            // Params:
                // {string} &search_term : The term to search for. Can be the username, dashed UUID, or joint UUID.
                //
            // Returns an Array:
                // 0 {boolean} success     : Whether or not the request was successful
                // 1 {string}  &username   : The player's username
                // 2 {string}  &joint_uuid : The player's joint UUID
                // 3 {string}  &split_uuid : The player's split UUID
            // Example:
                //    &minecraft_profile[]   = getMinecraftProfile(%&search_term%);
                //    minecraft_profile     := %&minecraft_profile[0]%;
                //    &minecraft_username    = %&minecraft_profile[1]%;
                //    &minecraft_joint_uuid  = %&minecraft_profile[2]%;
                //    &minecraft_split_uuid  = %&minecraft_profile[3]%;
        function getMinecraftProfile(&search_term);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/api/minecraft.txt:53
            &script_debug_name = "&9getMinecraftProfile&7";
            debug              = false;
        
            // If we are checking the current player, we can skip requests altogether.
            &player_split_uuid = %UUID%;
            &player_joint_uuid = regexreplace(&player_split_uuid,"-","");
            &player_identity[] = split(", ","%&player_split_uuid%, %&player_joint_uuid%, %PLAYER%");
            #player_index      = indexof(&player_identity[],,%&search_term%);
            if(%#player_index% != -1);
                &player_username   = %PLAYER%;
                &player_joint_uuid = %&player_joint_uuid%;
                &player_split_uuid = %UUID%;
                success            = true;
            else;
                // Not checking current player, do API calls.
                #cache_index  = getMinecraftProfileCacheIndex(%&search_term%,false);
                #valid_before = %@#cached_mc_valid_until[%#cache_index%]%;
                if((%#valid_before% >= %TIMESTAMP%) && (%#cache_index% != -1));
                    // Entry is cached, we can skip the request.
                    &player_username   = %@&cached_mc_usernames[%#cache_index%]%;
                    &player_joint_uuid = %@&cached_mc_joint_uuids[%#cache_index%]%;
                    &player_split_uuid = %@&cached_mc_split_uuids[%#cache_index%]%;
                    success            = true;
                else;
                    // Search term is not cached, try the API.
                    if(true);
                        setrequestheader("accept","application/json");
                        setrequestheader("user-agent","MC_API")
                        &api_url  = "https://playerdb.co/api/player/minecraft/%&search_term%";
                        &api_resp = httpget(%&api_url%,,#api_code);
                        &api_code = jsonget("code",%&api_resp%);
                        if(%&api_code% == "player.found");
                            &player_username   = jsonget("data.player.username",%&api_resp%);
                            &player_joint_uuid = jsonget("data.player.raw_id",%&api_resp%);
                            &player_split_uuid = jsonget("data.player.id",%&api_resp%);
                            success            = true;
                        elseif(%debug%);
                            &vars[] = split(" ","&api_url &api_resp &api_code #api_code");
                            foreach(&vars[],&var,#v);
                                &var_ = regexreplace(&var,"&","&&");
                                &val  = "%%&var%%";
                            next;
                        endif;
                    endif;
        
                    // Update the cache entry.
                    if(true);
                        if(%success%);
                            // Search term (could be UUID or Username) was valid and found on a Player.
                            // Update or initialize the Cache entry for the UUID.
                            &player_name_hist      = jsonget("data.player.meta.name_history",%&api_resp%);
                            &player_name_changes[] = getjsonasarray(%&player_name_hist%);
                            #player_name_changes   = arraylength(&player_name_changes[]);
                            if(%#player_name_changes% == 1);
                                &latest_change_time = 0;
                            else;
                                &latest_change_time = xJsonGet("changedToAt",%&player_name_changes[%#player_name_changes%]%);
                                &latest_change_time = match(%&latest_change_time%,"(^.{10})",1);
                            endif;
        
                            // A player can change their name every 30 days since their most recent name change.
                            // Set the 'cache invalidation' timestamp for this entry to be the latest change time + ms in 30 days.
                            #latest_change_time := %&latest_change_time%;
                            #can_change_name_at  = %#latest_change_time% + (60 * 60 * 24 * 30);
                            
                            #uuid_index = indexof(@&cached_mc_split_uuids[],,%&player_split_uuid%);
                            if(%#uuid_index% == -1);
                                @&cached_mc_split_uuids[] = %&player_split_uuid%;
                                @&cached_mc_joint_uuids[] = %&player_joint_uuid%;
                                @&cached_mc_usernames[]   = %&player_username%;
                                @#cached_mc_valid_until[] = %#can_change_name_at%;
                            else;
                                @&cached_mc_usernames[%#uuid_index%]   = %&player_username%;
                                @#cached_mc_valid_until[%#uuid_index%] = %#can_change_name_at%;
                            endif;
                        elseif(%#cache_index% != -1);
                            // Search term (has to be Username) was a previously valid Username on another User, but they have since
                            // changed their Username. We can be certain of this because the Cache was hit successfully, but the request
                            // did not pull up any valid Account.
                            //
                            // Clear the invalid entry from the Cache.
                            //
                            
                            @&cached_mc_split_uuids[] = arrayDelete(@&cached_mc_split_uuids[],%#cache_index%);
                            @&cached_mc_joint_uuids[] = arrayDelete(@&cached_mc_joint_uuids[],%#cache_index%);
                            @&cached_mc_usernames[]   = arrayDelete(@&cached_mc_usernames[],%#cache_index%);
                            @#cached_mc_valid_until[] = arrayDelete(@#cached_mc_valid_until[],%#cache_index%);
                        endif;
                    endif;
                endif;
            endif;
            return(%success%,%&player_username%,%&player_joint_uuid%,%&player_split_uuid%);
        endfunction;
    // delivery/index/awaitTradeRequest
        // Waits for a Trade Request from a given Username, then once one is found, accepts it. If the Request is not detected before
        // [#timeout_sec] seconds passes, the Function will return False. Otherwise, the Function will return True once in a Trade GUI.
            // Params:
                // {string} <&from_username>     The Username of the Player to await a Trade Request from.
                // {number} [#timeout_sec=60]    Max amount of Seconds Function can run for before timing out. Set to <= 0 to disable.
            // Returns a Boolean indicating whether or not we entered a Trade GUI with the specified Player before timeout.
            // Example:
                //    in_trade_gui = awaitTradeRequest("Blitzkrieg");
        function awaitTradeRequest(&from_username,#timeout_sec=60);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/delivery/index.txt:457
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&5awaitTradeRequest&7";
                #start_time        = %TIMESTAMP%;
                do_timeout         = %#timeout_sec% > 0;
                
                // Validate that the <&from_username> Field is a Valid Identifier.
                if(true);
                    &minecraft_profile[]  = getMinecraftProfile(%&from_username%);
                    minecraft_profile    := %&minecraft_profile[0]%;
                    if(!%minecraft_profile%);
                        debug_error(%debug%,%&script_debug_name%,"No Minecraft Account exists under Username '&4%&from_username%&7'!");
                        return(false);
                    endif;
                    &minecraft_username = %&minecraft_profile[1]%;
                endif;
            endif;
            
            // Wait until we are warped into the Party Leader's Server.
            if(true);
                unset(@delivery_cf_match[]);
                unset(@&delivery_cf_expr[]);
                
                @delivery_cf         = true;
                @&delivery_cf_expr[] = "%&minecraft_username% has sent you a trade request. Click here to accept!";
                @&delivery_cf_expr[] = "The /trade request from .*?%&minecraft_username% expired!";
                do;
                    // 1. Check for Function Timeout
                    if(%do_timeout%);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"Function timed out!");
                            break;
                        endif;
                    endif;
                    
                    // 2. Check if any of our expressions have matched
                    if(true);
                        #matched_index = indexof(@delivery_cf_match[],,true);
                        if(%#matched_index% != -1);
                            unset(&echo_command);
                            if(%#matched_index% == 0); // Received a Trade Request. Accept it.
                                &echo_command = "/trade %&minecraft_username%";
                                check_gui     = true;
                            elseif(%#matched_index% == 1); // Trade Request expired. Set GUI check state.
                                check_gui     = false;
                            endif;
                            unset(@delivery_cf_match[%#matched_index%]);
                            
                            if(%&echo_command% != "");
                                // Check if we should wait before executing the Echo Command.
                                if(%command_echoed%);
                                    #wait_until_ticks = %#last_command_ticks% + 20;
                                    if(%#waited_ticks% < %#wait_until_ticks%);
                                        do;
                                            wait("1t");
                                            inc(#waited_ticks);
                                        until(%#waited_ticks% >= %#wait_until_ticks%);
                                    endif;
                                endif;
                                
                                echo(%&echo_command%);
                                command_echoed      = true;
                                #last_command_ticks = %#waited_ticks%;
                            endif;
                        endif;
                    endif;
                    
                    // 3. Check if we are in the correct GUI, if 'check_gui' is True.
                    if(%check_gui%);
                        &trading_with = getTradePartnerName();
                        if(%&trading_with% == %&minecraft_username%);
                            return_boolean = true;
                            break;
                        endif;
                    endif;
                    
                    wait("1t");
                    inc(#waited_ticks);
                until(%return_boolean%);
                @delivery_cf = false;
            endif;
            
            return(%return_boolean%);
        endfunction;
//! @mkb-import-end