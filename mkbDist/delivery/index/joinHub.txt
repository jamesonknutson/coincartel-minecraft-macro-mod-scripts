//! @mkb-import-begin
    // misc/index/canDoInteraction
        // Checks if we can 'do' an Interaction by determining whether we have waited a whole amount of <#ticks_per_action> in <#waited_ticks>.
        // Basically a modulo operation. If return True, execute Action. If not, skip action and keep waiting.
            // Params:
                // {number} [#waited_ticks=0]    Amount of Ticks that have been waited thus far
                // {number} [#tick_wait=20]      Ticks to wait in between actions
            // Returns a Boolean
            // Example:
                //    can_do_action = canDoInteraction(%#waited_ticks%,%#tick_wait%);
        function canDoInteraction(#waited_ticks=0,#tick_wait=20);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:43
            #actions_done  = %#waited_ticks% / %#tick_wait%;
            #ticks_to_next = %#waited_ticks% - (%#actions_done% * %#tick_wait%);
            can_do_action  = %#ticks_to_next% == 0;
            return(%can_do_action%);
        endfunction;
    // debug/index/debug_log
        // Logs a message to chat if debug is enabled.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_log(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:30
            // &matcher     = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement = "&$1";
            // &string      = regexreplace(&string,%&matcher%,%&replacement%);
            &out_string  = "&7%&script_debug_name%&7: %&string%";
            if(%debug_enabled%);
                log(%&out_string%);
            endif;
            return(%&out_string%);
        endfunction;
    // gui/index/decodeContainerString
        // Decodes a Container String into an Array of it's components.
            // Params:
            //      {string} <&container_string>    A container string generated by getContainerString
            //
            // Returns an Array:
            //  0 {string} &container_gui   The string value of "%GUI%" from the Container String
            //  1 {string} &container_name  The string value of "%CONTAINERNAME%" from the Container String
            //  2 {number} #container_slots The number value of "%CONTAINERSLOTS%" from the Container String
            //
            // If the Container String holds NBT Item Data, elements 3, ... are the ENCODED NBT strings.
            //
        function decodeContainerString(&container_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:358
            &decoded_string = decode(%&container_string%);
            &decoded_vars[] = split("$",%&decoded_string%);
            #decoded_length = arraysize(&decoded_vars[]);
            
            &decoded_data[] = split("|",%&decoded_vars[0]%);
            if(%#decoded_length% > 1);
                &encoded_nbt[] = split("~",%&decoded_vars[1]%);
                push(&decoded_data[],&encoded_nbt[*]);
            endif;
            return(&decoded_data[]);
        endfunction;
    // gui/index/getContainerString
        // Encodes the current values of GUI, CONTAINERNAME, CONTAINERSLOTS, and optionally Slot Data from each slot in the Container
        // into a string using encode(). Used to check if the GUI has updated.
            // Params:
            //      {boolean} [include_items=false] If true, will call indexGUI and append it's data to the Container String.
            //
            // Returns a string encoded with encode() in format 'GUI|CONTAINERNAME|CONTAINERSLOTS[$<slot_nbt>~<slot_nbt>~<...>]'.
            // The [$<slot_nbt>~<slot_nbt>~<...>] portion is only included if [include_items] is true.
        function getContainerString(include_items=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:274
            &env_var_str = "%GUI%|%CONTAINERNAME%|%CONTAINERSLOTS%";
            if(%include_items%);
                if(%CONTAINERSLOTS% > 0);
                    #container_start = 0;
                    #container_end   = %CONTAINERSLOTS% - 37;
                    #inventory_start = %CONTAINERSLOTS% - 36;
                    #inventory_end   = %CONTAINERSLOTS% - 1;
                    #range_start     = %#container_start%;
                    #range_end       = %#inventory_end%;
                    for(#slot,%#range_start%,%#range_end%);
                        &f_item     = getslotitemnbt(%#slot%,,#f_stack,#f_data,&f_nbt);
                        &f_nbt      = strip(%&f_nbt%);
                        &f_nbt      = encode(%&f_nbt%);
                        &out_data[] = "%&f_item%|%#f_stack%|%#f_data%|%&f_nbt%";
                    next;
                endif;
                &gui_items   = join("~",&out_data[]);
                &env_var_str = "%&env_var_str%$%&gui_items%";
            endif;
            &return_string = encode(%&env_var_str%);
            return(%&return_string%);
        endfunction;
    // gui/index/enteredNewGUI
        // Checks if we are in a new GUI by comparing the <&init_container_string> to the current Container String returned by getContainerString.
            // Params:
            //      {string} <&init_container_string>   A Container String generated when we were on the Initial GUI that we want to check for an Update from.
            //      {boolean} [include_items=false]     Set this to true if [include_items] was used on the Initial call to getContainerString.
            //
            // Returns a boolean indicating whether or not the GUI has changed.
        function enteredNewGUI(&init_container_string,include_items=false,allow_mouse_full=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:304
            &mouse_item = getmouseitem(,#mouse_stack,#mouse_data,&mouse_nbt);
            if((%&mouse_item% != "air") && (!%allow_mouse_full%));
                return(False);
            endif;
            
            &mouse_nbt             = strip(%&mouse_nbt%);
            &mouse_nbt             = encode(%&mouse_nbt%);
            &curr_container_string = getContainerString(%include_items%);
            if(&curr_container_string != &init_container_string);
                if(%include_items%);
                    &init_data[] = call("decodeContainerString",%&init_container_string%);
                    &curr_data[] = call("decodeContainerString",%&curr_container_string%);
                    foreach(&init_data[],&init_data,#dei);
                        &curr_data = %&curr_data[%#dei%]%;
                        if(%&curr_data% != %&init_data%);
                            if(%#dei% <= 2);
                                return_boolean = True;
                                break;
                            else;
                                &init_data_arr[] = split("|",%&init_data%);
                                &init_data_item  = %&init_data_arr[0]%;
                                &init_data_nbt   = %&init_data_arr[3]%;
                                &curr_data_arr[] = split("|",%&curr_data%);
                                &curr_data_item  = %&curr_data_arr[0]%;
                                &curr_data_nbt   = %&curr_data_arr[3]%;
                                mouse_match      = (((%&init_data_item% == "air") && (%&mouse_nbt% == %&curr_data_nbt%)) || ((%&curr_data_item% == "air") && (%&mouse_nbt% == %&init_data_nbt%)));
                                
                                if(!%mouse_match%);
                                    return_boolean = True;
                                    break;
                                endif;
                            endif;
                        endif;
                    next;
                    return(%return_boolean%);
                endif;
                
                return(True);
            endif;
            return(False);
        endfunction;
    // info/index/hasTimeExceeded
        // Used to determine whether to timeout a function.
            // Params:
                // {number} <#start_time>        The start timestamp to subtract from current timestamp
                // {number} <#timeout_sec>       The amount of seconds to check if difference between now & start is >=.
                // {number} [do_timeout=true]    If false, will always return false (used as shorthand for functions that
                //                               use this function to determine whether or not they have timed out).
            // Returns a boolean indicating whether or not <#start_timestamp> was >= <#seconds> ago.
            // Example:
                //    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
        function hasTimeExceeded(#start_time,#timeout_sec,do_timeout=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:10
            #elapsed_sec   = %TIMESTAMP% - #start_time;
            return_boolean = ((%do_timeout%) && (#elapsed_sec >= #timeout_sec));
            return(%return_boolean%);
        endfunction;
    // debug/index/debug_error
        // Logs a message to chat with an error prefix.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_error(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:49
            // &matcher       = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement   = "&$1";
            // &string        = regexreplace(&string,%&matcher%,%&replacement%);
            &error_message = "&4Error > &c%&string%";
            &error_message = regexreplace(&error_message,"&7","&c");
            &error_message = "&7%&script_debug_name%&7: %&error_message%";
            if(%debug_enabled%);
                log(%&error_message%);
            endif;
            return(%&error_message%);
        endfunction;
    // gui/clickUntilUpdate/containerClick
        // Clicks on a Slot in a GUI until the GUI updates.
            // Params:
                // {number}  <#click_slot>          The Slot to Click on.
                // {number}  [#timeout_sec=30]      The Maximum Amount of Seconds to try to Click for before timing out.
                // {number}  [#tick_wait=20]        Ticks to wait between clicks.
                // {boolean} [check_items=false]    Whether or not to check items in the getContainerString and enteredNewGUI calls to
                //                                  help determine whether or not our GUI has updated.
                // {boolean} [right_click=false]    Whether or not to right click. Will left click if false.
                // {boolean} [shift_click=false]    Whether or not to shift click.
            // Returns a Boolean indicating whether or not we were able to get the GUI to update before timeout.
            // Example:
                //    updated_gui = containerClick(%#click_slot%,%#timeout_sec%,%#tick_wait%,%right_click%,%shift_click%);
        function containerClick(#click_slot,#timeout_sec=30,#tick_wait=20,check_items=false,right_click=false,shift_click=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/clickUntilUpdate.txt:13
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&7containerClick";
                do_timeout         = %#timeout_sec% > 0;
                #start_time        = %TIMESTAMP%;
            endif;
            
            // Loop until we have hit our return condition.
            if(true);
                if(%CONTAINERSLOTS% <= 0);
                    debug_error(%debug%,%&script_debug_name%,"Not in a clickable GUI at runtime!");
                    return(false);
                elseif(%right_click%);
                    &click_mode = "right";
                else;
                    &click_mode = "left";
                endif;
                
                &init_gui = getContainerString(%check_items%);
                do;
                    // Check for Function Timeout
                    if(%do_timeout%);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"Failed to update the GUI, function timed out.");
                            break;
                        endif;
                    endif;
                    
                    // Check if we are in a new GUI.
                    if(%clicked%);
                        gui_updated = enteredNewGUI(%&init_gui%,%check_items%);
                        if(%gui_updated%);
                            debug_log(%debug%,%&script_debug_name%,"gui has updated!");
                            break;
                        endif;
                        debug_log(%debug%,%&script_debug_name%,"gui has not yet updated");
                    endif;
                    
                    // Check if we can click the Slot again.
                    can_click = canDoInteraction(%#waited_ticks%,%#tick_wait%);
                    if(%can_click%);
                        slotclick(%#click_slot%,%&click_mode%,%shift_click%);
                        clicked = true;
                    endif;
                    
                    wait("1t");
                    inc(#waited_ticks);
                until((%gui_updated%) || (%GUI% == "NONE") || (%func_timeout%));
            endif;
            
            return(%gui_updated%);
        endfunction;
    // info/index/_matchExpressionNBT
        // Used by getItemName, getItemUUID, getItemSBID to extract a regular expression capture group from NBT Data.
            // Params:
            //      {string} <&haystack>    The string to extract the first capture group from.
            //      {string} <&expression>  The expression to test against <&haystack>, must have at least one capture group.
            //
            // Returns the first capture group's content from the <&expression> match, or an empty string if no match is found.
        function _matchExpressionNBT(&haystack,&expr);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:34
            &return_string = "";
            ifmatches(%&haystack%,%&expr%,&capture_group,1);
                &return_string = %&capture_group%;
            endif;
            return(%&return_string%);
        endfunction;
    // info/index/getItemUUID
        // Given the NBT Data of an Item, extracts the Item's UUID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item UUID from.
            //
            // Returns the Item's UUID, or an empty string if one is not found.
        function getItemUUID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:92
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"uuid:\"(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\"");
            return(%&return_string%);
        endfunction;
    // info/index/getItemSBID
        // Given the NBT Data of an Item, extracts the Item's SBID from the NBT Data.
            // Params:
            //      {string} <&nbt> The NBT Data to extract the Item SBID from.
            //
            // Returns the Item's SBID, or an empty string if one is not found.
        function getItemSBID(&nbt);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:103
            &nbt           = strip(%&nbt%);
            &return_string = _matchExpressionNBT(%&nbt%,"\bid\"?\s*:\"([A-Z_0-9:]+)\"");
            return(%&return_string%);
        endfunction;
    // string/index/regexEscape
        // string/index.txt
        // Counts occurences of a given string within another string.
            // Params:
            //        <string> &source_string : The string to count occurences of &search_string in.
            //        <string> &search_string : The string to count occurences of.
            //
            // Returns the integer amount of occurences found.
        function countOccurencesInString(&source_string,&search_string);
            &script_debug_name  = "&9countOccurencesInString&7";
            debug               = false;
            ifcontains(%&source_string%,%&search_string%);
                &split_source_arr[] = split(%&search_string%,%&source_string%);
                #occurences         = arraysize(&split_source_arr[]);
                if(%#occurences% == 0); // source string exclusively held repetitions of the search string
                    #source_length = strlen(%&source_string%);
                    #search_length = strlen(%&search_string%);
                    #occurences    = %#source_length% / %#search_length%;
                endif;
            endif;
            return(%#occurences%);
        endfunction;
        
        // Checks if a string matches UUID regex.
            // Params:
            //        <string> &check_string : The string to check
            //
            // Returns a boolean.
            //
        function isStringUUID(&check_string);
            &script_debug_name = "&9isStringUUID&7";
            debug              = false;
            &split_uuid_expr   = "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$";
            &joint_uuid_expr   = "^[a-f0-9]{32}$";
            &uuid_exprs[]      = split(", ","%&split_uuid_expr%, %&joint_uuid_expr%");
            foreach(&uuid_exprs[],&uuid_expr);
                ifmatches(%&check_string%,%&uuid_expr%);
                    match_found = true;
                    break;
                endif;
            next;
            return(%match_found%);
        endfunction;
        
        // Checks if a string matches Boolean regex
            // Params:
                // {string} <&check_string>    The String to Check
            // Returns a Boolean
        function isStringBoolean(&check_string);
            &check_string_lcase = lcase(%&check_string%);
            &boolean_values[]   = split(", ","true, false, 1, 0");
            return_boolean      = arrayincludes(&boolean_values[],%&check_string_lcase%);
            return(%return_boolean%);
        endfunction;
        
        // Checks if a String is a valid Integer.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Integer.
        function isStringInteger(&check_string);
            ifmatches(%&check_string%,"^[0-9-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Float (without commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringFloat(&check_string);
            ifmatches(%&check_string%,"^[0-9-]*\.[0-9]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Float/Number (with commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Formatted Number.
        function isStringFormattedNumber(&check_string);
            ifmatches(%&check_string%,"^[\d-]+,[\d.,-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
        
        // Checks if a String is a valid Number, coercable to a Float of some sort.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringNumber(&check_string);
            &call_functions[] = split(", ","isStringInteger, isStringFloat, isStringFormattedNumber");
            foreach(&call_functions[],&call_function,#cfi);
                if(%&call_function% == "isStringInteger");
                    return_boolean = isStringInteger(%&check_string%);
                elseif(%&call_function% == "isStringFloat");
                    return_boolean = isStringFloat(%&check_string%);
                elseif(%&call_function% == "isStringFormattedNumber");
                    return_boolean = isStringFormattedNumber(%&check_string%);
                endif;
                if(%return_boolean%);
                    break;
                endif;
            next;
            return(%return_boolean%);
        endfunction;
        
        // Coerces a given String to a Number (no decimal points).
            // Params:
                // {string} <&convert_string>    The String to Convert.
                // {number} [#precision=0]       Decimal Precision
            // Returns the Number result of the coercion.
        function stringToNumber(&convert_string,#precision=0);
            #convert_number = coerceNumber(%&convert_string%);
            return(%#convert_number%);
        endfunction;
        
        function isStringBoolean(&check_string);
            if(%&check_string% == "");
                return_boolean = true;
            else;
                &boolean_coercable[] = split(", ","0, 1, true, false, True, False");
                #boolean_index       = indexof(&boolean_coercable[],,%&check_string%);
                return_boolean       = %#boolean_index% != -1;
            endif;
            return(%return_boolean%);
        endfunction;
        
        function stringToBoolean(&convert_string);
            is_coercable = isStringBoolean(%&convert_string%);
            if(%is_coercable%);
                return_boolean := %&convert_string%;
            elseifmatches(%&convert_string%,"\S");
                return_boolean  = true;
            else;
                return_boolean  = false;
            endif;
            return(%return_boolean%);
        endfunction;
        
        function regexEscape(&input_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:141
            &split_array[]  = split("\\",%&input_string%);
            foreach(&split_array[],&curr_char,#curr_index);
                if(%&curr_char% == "\\");
                    #last_index = #curr_index - 1;
                    #next_index = #curr_index + 1;
                    &last_char  = %&split_array[%#last_index%]%;
                    &next_char  = %&split_array[%#next_index%]%;
                    
                    // If this backslash is escaped already (last char == '\'), then we do not need to escape this char.
                    // If the backslash is escaping another backslash (next char == '\'), then we do not need to escape this char.
                    if((%&last_char% != "\\") && (%&next_char% != "\\"));
                        &rejoin_array[] = "\\";
                    endif;
                    &rejoin_array[] = %&curr_char%;
                else;
                    &rejoin_array[] = %&curr_char%;
                endif;
            next;
            &rejoint_string = join("",&rejoin_array[]);
            &search_string  = "(?<!\\\\)(?:\+|\*|\?|\^|\$|\.|\[|\]|\{|\}|\(|\)|\||\/)";
            &escaped_string = regexreplace(&rejoint_string,%&search_string%,"\\\$0");
            return(%&escaped_string%);
        endfunction;
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/xEval
        // Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&expression>              The arithmetic expression to evaluate with `eval`.
                // {boolean} [coerce_integer=false]    If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
            // Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
        function xEval(&expression,coerce_integer=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:276
            debug              = false;
            &script_debug_name = "&9xEval&7";
            debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
            &return_string     = eval(%&expression%);
            debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
            &return_string     = convertENote(%&return_string%);
            debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
            if(%coerce_integer%);
                debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
                &return_string = formatnumber(%&return_string%,0,true);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
            return(%&return_string%);
        endfunction;
    // misc/index/miscValidate
        // Validates that <&search_term> is found in the <&array[]>, and/or if it is not found in the <&array[]>, the value of the element
        // found at [#default_idx=0] is returned. Set [#default_idx] to -1 to indicate that no default value should be used.
            // Params:
            //      {array} <&elements[]>       The Array to search for <&search_term> in.
            //      {string} <&search_term>     The Search Term to check if exists in <&elements[]>.
            //      {number} [#default_idx=0]   The Index of the Element in <&elements[]> to use as the default return value
            //                                  if <&search_term> is not found within the Array. If -1, will be taken as no default
            //                                  value should be used.
            //
            // Returns the element from the <&elements[]> Array that <&search_term> matches, or if no match was found and [#default_idx]
            // is not -1, the element at [#default_idx] in the <&elements[]> Array. If [#default_idx] is -1, an empty string is returned.
        function miscValidate(&search_term,#default_idx=0,...&elements[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:12
            #term_index = indexof(&elements[],,%&search_term%);
            if(%#term_index% != -1);
                &return_string = %&elements[%#term_index%]%;
            elseif(%#default_idx% != -1);
                &return_string = %&elements[%#default_idx%]%;
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/coerceNumber
        // Coerces an input number string into a valid integer. The input number string can be in E Notation, or contain
        // commas, or contain decimal values, or any mix of the above.
            // Params:
                // {string} <&number_string>                The Number String to Convert into a valid Integer.
                // {string} [&rounding_strategy="ROUND"]    String ENUM that dictates how to handle decimal values. Valid values are:
                //                                          FLOOR (towards negative infinity), CEILING|CEIL (towards positive infinity),
                //                                          TRUNCATE|TRUNC (rounds up or down towards 0), ROUND (towards nearest integer).
                //                                          Defaults to ROUND if omitted or an invalid input is provided.
            // Returns the Number coerced into a valid Integer (real-integer type, not string type. If the input string is not
            // coercable at all, 0 will be returned). If the final value before coercion to integer contains decimals, the coerced value
            // will be rounded according to the [&rounding_strategy] parameter.
            // Example:
                //    Converting a comma split, float string into an Integer
                    //    &number_string     = "100,000.9171";
                    //    &rounding_strategy = "ROUND";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
                    //    log("#number_integer: %#number_integer%"); // '#number_integer: 100001'
                //    Replace the content in the Parameters as needed:
                    //    &number_string     = "Can contain commas, decimals, e. notation, or mix of all three.";
                    //    &rounding_strategy = "One of: FLOOR, CEILING|CEIL, TRUNCATE|TRUNC, ROUND, or empty string.";
                    //    #number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
        function coerceNumber(&number_string,&rounding_strategy="ROUND");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:343
            &number_string = replace(&number_string,",");
            &number_string = convertENote(%&number_string%);
            ifcontains(%&number_string%,".");
                &rounding_strategy = miscValidate(%&rounding_strategy%,0,"ROUND","FLOOR","CEILING","CEIL","TRUNCATE","TRUNC");
                if(%&rounding_strategy% == "ROUND");
                    // Round the decimal value to the nearest integer.
                    &return_string = formatnumber(%&number_string%,0,true);
                elseif((%&rounding_strategy% == "TRUNCATE") || (%&rounding_strategy% == "TRUNC"));
                    // Exclude the decimal value entirely.
                    &return_string = regexreplace(&number_string,"\.\d*$");
                else;
                    // Use xEval to evaluate the number_string with the corresponding rounding_term. Instruct
                    // xEval to coerce the value into an integer for us, so any trailing ".0" is stripped from it's
                    // return value.
                    if((%&rounding_strategy% == "CEILING") || (%&rounding_strategy% == "CEIL"));
                        &rounding_term = "ceil";
                    elseif(%&rounding_strategy% == "FLOOR");
                        &rounding_term = "floor";
                    endif;
                    &return_string = xEval("%&rounding_term%(%&number_string%)",true);
                endif;
            else;
                // The Number does not contain a decimal value to begin with, return as usual.
                &return_string = %&number_string%;
            endif;
            return(%&return_string%);
        endfunction;
    // info/index/getItemName
        // Given the NBT Data of an Item (and optionally it's base item), extracts the Display Name of the Item from the NBT Data.
            // Params:
            //      {string} <&nbt>         The NBT Data to extract the Name from.
            //      {string} [&item="air"]  The Item this NBT Data was collected from (only used in cases where the Item's Name cannot be found).
            //      {boolean} [strip=true]  Whether or not to strip formatting codes from the extracted Name.
            //
            // Returns the Display Name of the Item found from it's NBT Data, with formatting codes stripped if [strip] is true.
        function getItemName(&nbt,&item="air",strip=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:49
            ifmatches(%&nbt%,".*\bName\s*:\"\s*(.*?)\"",&found_name,1);
                if(%strip%);
                    &found_name = strip(%&found_name%);
                endif;
            elseif(%&item% == "air");
                &found_name = "Air";
            endif;
            return(%&found_name%);
        endfunction;
    // gui/index/findItemContainer
        // Given any (or all, or any mix of) an Item's MCID, Name, SBID, and/or UUID, finds the Item in the Container and returns it's Slot.
            // Params:
                // {string} [...&filter_params[]]    An Array of Strings in format: [<PARAM_ENUM>: <FILTER>], where PARAM_ENUM can be any of:
                //                                   MCID|ITEM, DATA, STACK, NAME, SBID, NBT, or UUID. <FILTER> can be a Regular Expression or an Exact String.
                //                                   If Passing an Expression, prefix the Filter with 'r$'. All characters following the 'r$' will be used
                //                                   as the Expression.
                // {boolean} [return_arr=false]      If set to True, will return an Array of Slots matching the specified Filters. If set to False, will
                //                                   return the first Slot ID found that matches the Filters.
            // Returns the Slot ID(s) of the Item(s) found, or -1 if no Item(s) could be found. Will return -1 if CONTAINERSLOTS <= 0.
        function findItemContainer(return_arr=false,...&filter_params[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:1092
            #return_val = -1;
            
            // Setup Filter Parameters
            if(true);
                &valid_enums[] = split(", ","MCID, ITEM, DATA, STACK, NAME, SBID, UUID, NBT, SLOT");
                foreach(&filter_params[],&filter_param,#fpi);
                    ifmatches(%&filter_param%,"^(.+?):\s*(.+)$");
                        match(%&filter_param%,"^(.+?):\s*(.+)$",{&param_enum,&param_filter});
                        #enum_index = indexof(&valid_enums[],,%&param_enum%);
                        if(%#enum_index% != -1);
                            &param_enum = %&valid_enums[%#enum_index%]%;
                            if(%&param_enum% == "SLOT");
                                #prioritize_slot   = coerceNumber(%&param_filter%);
                                #prioritized_index = indexof(#prioritized_slots[],,%#prioritize_slot%);
                                if(%#prioritized_index% == -1);
                                    #prioritized_slots[] = %#prioritize_slot%;
                                endif;
                            else;
                                if(%&param_enum% == "ITEM");
                                    &param_enum = "MCID";
                                endif;
                                
                                ifmatches(%&param_filter%,"^r\$(.+)",&param_expression,1);
                                    &param_filter = %&param_expression%;
                                else;
                                    &param_filter = regexEscape(%&param_filter%);
                                    &param_filter = "^%&param_filter%$";
                                endif;
                                
                                &enum_array = lcase("&%&param_enum%_regex[]");
                                &enum_bool  = lcase("do_%&param_enum%");
                                push(%&enum_array%,%&param_filter%);
                                set(%&enum_bool%);
                            endif;
                        endif;
                    endif;
                next;
                
                foreach(&valid_enums[],&valid_enum);
                    if((%&valid_enum% != "SLOT") && (&valid_enum% != "ITEM"));
                        &enum_bool = lcase("do_%&valid_enum%");
                        enum_bool := "%%&enum_bool%%";
                        if(%enum_bool%);
                            &enum_array = lcase("&%&valid_enum%_regex[]");
                            &enum_value = join("|",%&enum_array%);
                            &enum_value = "(?:%&enum_value%)";
                            &enum_regex = lcase("&%&valid_enum%_regex");
                            set(%&enum_regex%,%&enum_value%);
                        endif;
                    endif;
                next;
                
                //    Array Name        |    Boolean Name    |    Regex String
                //    &mcid_regex[]     |    do_mcid         |    &mcid_regex
                //    &data_regex[]     |    do_data         |    &data_regex
                //    &stack_regex[]    |    do_stack        |    &stack_regex
                //    &name_regex[]     |    do_name         |    &name_regex
                //    &sbid_regex[]     |    do_sbid         |    &sbid_regex
                //    &uuid_regex[]     |    do_uuid         |    &uuid_regex
                //    &nbt_regex[]      |    do_nbt          |    &nbt_regex
            endif;
            
            // Iterate over Inventory Slots
            if(%CONTAINERSLOTS% >= 1);
                #r_start            = 0;
                #r_end              = %CONTAINERSLOTS% - 37;
                &r_filter[]         = split(", ","mcid, data, stack, name, sbid, uuid, nbt");
                
                #prioritize_slot_sz = arraysize(#prioritize_slot[]);
                if(%#prioritize_slot_sz% >= 1);
                    foreach(#prioritize_slot[],#prioritize_slot,#ps);
                        &f_mcid = getslotitemnbt(%#prioritize_slot%,,&f_stack,&f_data,&f_nbt);
                        &f_nbt  = strip(%&f_nbt%);
                        f_valid = true;
                        foreach(&r_filter[],&r_term,#rti);
                            &f_bool  = "do_%&r_term%";
                            f_bool  := "%%&f_bool%%";
                            if(%f_bool%);
                                if(%#rti% >= 3);
                                    if(%&r_term% == "name");
                                        &f_value = getItemName(%&f_nbt%,%&f_mcid%);
                                    elseif(%&r_term% == "sbid");
                                        &f_value = getItemSBID(%&f_nbt%);
                                    elseif(%&r_term% == "uuid");
                                        &f_value = getItemUUID(%&f_nbt%);
                                    elseif(%&r_term% == "nbt");
                                        &f_value = %&f_nbt%;
                                    endif;
                                else;
                                    &f_value = "&f_%&r_term%";
                                    &f_value = "%%&f_value%%";
                                endif;
                                &f_regex = "&%&r_term%_regex";
                                &f_regex = "%%&f_regex%%";
                                ifnotmatches(%&f_value%,%&f_regex%);
                                    // log("Term %&r_term% > No match between value %&f_value% and expression %&f_regex%");
                                    f_valid = false;
                                    break;
                                endif;
                            endif;
                        next;
                        
                        if(%f_valid%);
                            if(!%return_arr%);
                                #return_val = %#f_slot%;
                                break;
                            endif;
                            #return_val[] = %#f_slot%;
                        endif;
                    next;
                endif;
                for(#f_slot,%#r_start%,%#r_end%);
                    &f_mcid = getslotitemnbt(%#f_slot%,,&f_stack,&f_data,&f_nbt);
                    &f_nbt  = strip(%&f_nbt%);
                    f_valid = true;
                    foreach(&r_filter[],&r_term,#rti);
                        &f_bool  = "do_%&r_term%";
                        f_bool  := "%%&f_bool%%";
                        if(%f_bool%);
                            if(%#rti% >= 3);
                                if(%&r_term% == "name");
                                    &f_value = getItemName(%&f_nbt%,%&f_mcid%);
                                elseif(%&r_term% == "sbid");
                                    &f_value = getItemSBID(%&f_nbt%);
                                elseif(%&r_term% == "uuid");
                                    &f_value = getItemUUID(%&f_nbt%);
                                elseif(%&r_term% == "nbt");
                                    &f_value = %&f_nbt%;
                                endif;
                            else;
                                &f_value = "&f_%&r_term%";
                                &f_value = "%%&f_value%%";
                            endif;
                            &f_regex = "&%&r_term%_regex";
                            &f_regex = "%%&f_regex%%";
                            ifnotmatches(%&f_value%,%&f_regex%);
                                // log("Term %&r_term% > No match between value %&f_value% and expression %&f_regex%");
                                f_valid = false;
                                break;
                            endif;
                        endif;
                    next;
                    
                    if(%f_valid%);
                        if(!%return_arr%);
                            #return_val = %#f_slot%;
                            break;
                        elseif(%#prioritize_slot_sz% <= 0);
                            #return_val[] = %#f_slot%;
                        else;
                            #return_index = indexof(#return_val[],,%#f_slot%);
                            if(%#return_index% == -1);
                                #return_val[] = %#f_slot%;
                            endif;
                        endif;
                    endif;
                next;
            endif;
            
            if(%return_arr%);
                #return_val_sz = arraysize(#return_val[]);
                if(%#return_val_sz% == 0);
                    #return_val[] = -1;
                endif;
                return(#return_val[]);
            endif;
            return(%#return_val%);
        endfunction;
    // movement/index/splitCoordString
        // Given a coordinate string, splits it up by tunnel characters and returns an integer array.
            // Params:
            //      {string} [&coord_string="%XPOS%|%YPOS%|%ZPOS%"] The coordinate string to split up
            //
            // Returns an Array where the 0th element is the XPOS, 1st is YPOS, and 2nd is ZPOS.
        function splitCoordString(&coord_string="%XPOS%|%YPOS%|%ZPOS%");
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:6
            &pos[] = split("|",%&coord_string%);
            &x     = %&pos[0]%;
            &y     = %&pos[1]%;
            &z     = %&pos[2]%;
            &arr[] = split(", ","%&x%, %&y%, %&z%");
            return(&arr[]);
        endfunction;
    // movement/index/fnCalcYawTo
        // Given an X, Y, Z value (and/or coordinate string), calculates the yaw and pitch values required to look at the value.
            // Params:
            //      {string} <&coordinate_string>   The Coordinate String, or X position.
            //      {string} [&y_pos]               The Y position (only required if <&coordinate_string> is a single value).
            //      {string} [&z_pos]               The Z position (only required if <&coordinate_string> is a single value).
            //
            // Returns an Array where element 0 = yaw, element 1 = dist, element 2 = pitch.
        function fnCalcYawTo(&coordinate_string,&y_pos,&z_pos);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:34
            &x_pos = %&coordinate_string%;
            ifmatches(%&coordinate_string%,"(.+)\|(.+)\|(.+)");
                &split_pos[] = splitCoordString(%&coordinate_string%);
                &x_pos       = %&split_pos[0]%;
                &y_pos       = %&split_pos[1]%;
                &z_pos       = %&split_pos[2]%;
            endif;
            
            calcyawto(%&x_pos%,%&y_pos%,%&z_pos%,#calc_yaw,#calc_dist,#calc_pitch);
            #calc_yaw = %#calc_yaw% + 180;
            if(%#calc_yaw% > 360);
                #calc_yaw = %#calc_yaw% - 360;
            elseif(%#calc_yaw% == 360);
                #calc_yaw = 0;
            endif;
            
            return(%#calc_yaw%,%#calc_dist%,%#calc_pitch%);
        endfunction;
    // info/index/getEntityPos
        // Given an Entity Name expression (and optionally the Entity Type and/or Range), uses the Entities Iterator to find them and return their position.
            // Params:
            //      {string} <&entity_expr>         A regular expression to use in the iterator filter
            //      {string} [&entity_type]         Optional entity type to use in the iterator filter
            //      {string} [&entity_range]        Optional max range to use in the iterator filter
            //      {boolean} [return_float=false]  If set to true, will return the entity's XPOSF, YPOSF, ZPOSF instead of integers.
            //
            // Returns an Array where element 0 = XPOS[F], 1 = YPOS[F], 2 = ZPOS[F]. Will return a string array no matter what,
            // if cannot find entity the first value of this array will be an empty string.
        function getEntityPos(&entity_expr,&entity_type="",&entity_range="",return_float=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:610
            &filter_terms[] = "name:%&entity_expr%";
            if(%&entity_type% != "");
                &filter_terms[] = "type:%&entity_expr%";
            endif;
            &filter_terms = join(",",&filter_terms[]);
            &filter_terms = "filter:{%&filter_terms%}"
            if(%&entity_range% != "");
                &filter_terms = "%&filter_terms%,range:%&entity_range%";
            endif;
            
            foreach("entities(%&filter_terms%)");
                if(%return_float%);
                    &out_arr[] = %ENTITYXPOSF%;
                    &out_arr[] = %ENTITYYPOSF%;
                    &out_arr[] = %ENTITYZPOSF%;
                else;
                    &out_arr[] = %ENTITYXPOS%;
                    &out_arr[] = %ENTITYYPOS%;
                    &out_arr[] = %ENTITYZPOS%;
                endif;
                found = true;
                break;
            next;
            
            if(!%found%);
                &out_arr[0] = "";
            endif;
            return(&out_arr[]);
        endfunction;
    // movement/index/isStalled
        // Used to check if the player is "stalled" (not moving more than [#stall_break] absolute distance)
        // for more than [#seconds] seconds.
            // Params:
            //      {number} #start_timestamp   The timestamp the last known 'unstalled' position was recorded at
            //      {string} &start_position    The coordinate string of the last known 'unstalled' position
            //      {number} [#seconds=5]       Amount of seconds required to have passed with no more than [#stall_break]
            //                                  blocks of absolute movement to consider as a stall
            //      {number} [#stall_break=3]   Blocks of absolute movement required to consider as having moved
            //
            // Returns an Array where element 0 is a boolean indicating whether or not the Player is stalled, and
            // element 1 is a boolean indicating whether or not to update the stall position / timestamp.
        function isStalled(#start_timestamp=%TIMESTAMP%,&start_position="%XPOS%|%YPOS%|%ZPOS%",#seconds=5,#stall_break=3);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:65
            #last_pos[] = splitCoordString(%&start_position%);
            #curr_pos[] = splitCoordString();
            #abs_diff   = xEval("sqrt((%#last_pos[0]% - %#curr_pos[0]%)^2) + sqrt((%#last_pos[1]% - %#curr_pos[1]%)^2) + sqrt((%#last_pos[2]% - %#curr_pos[2]%)^2)",true);
            
            update_pos = #abs_diff >= #stall_break;
            is_stalled = !%update_pos%;
            if(%is_stalled%);
                is_stalled = hasTimeExceeded(%#start_timestamp%,%#seconds%);
            endif;
            return(%over_limit%,%update_pos%);
        endfunction;
    // gui/index/localGUI
        // Changes the current GUI to a local GUI.
            // Params:
            //      {string} [&target_gui="NONE"]         - The Target GUI to switch to. Can be any of the following strings:
            //                                              "NONE", "GUIINVENTORY", "GUICHAT".
            //      {number} [#wait_ticks=@#def_wait_ticks]- Amount of ticks (1t = 50ms) to wait between each action (press/GUI).
            //
            // Returns a boolean indicating whether or not GUI == <&target_gui> at end of function.
        function localGUI(&target_gui="NONE",#wait_ticks=20);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:11
            &valid_guis[] = split(", ","NONE, GUIINVENTORY, GUICHAT");
            #valid_gui    = indexof(&valid_guis[],,%&target_gui%);
            if(#valid_gui == -1);
                #valid_gui = 0;
            endif;
            &target_gui = ucase(%&valid_guis[%#valid_gui%]%);
            
            do;
                if(%GUI% == %&target_gui%);
                    break;
                elseif(%GUI% != "NONE");
                    press("escape");
                    do(%#wait_ticks%);
                        wait("1t");
                    until(%GUI% == "NONE");
                else;
                    if(%&target_gui% == "GUIINVENTORY");
                        gui("inventory");
                    elseif(%&target_gui% == "GUICHAT");
                        gui("chat");
                    endif;
                    
                    do(%#wait_ticks%);
                        wait("1t");
                    until(%GUI% != "NONE");
                endif;
            until(%GUI% == %&target_gui%);
            return_boolean = %GUI% == %&target_gui%;
            return(%return_boolean%);
        endfunction;
    // movement/index/getCoordString
        // Generates a coordinate string from the input numbers
            // Params:
            //      {number} [#x=%XPOS%]    The X Position
            //      {number} [#x=%YPOS%]    The Y Position
            //      {number} [#x=%ZPOS%]    The Z Position
            //
            // Returns the coordinate string.
        function getCoordString(#x=%XPOS%,#y=%YPOS%,#z=%ZPOS%);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:22
            &coord_string = "%XPOS%|%YPOS%|%ZPOS%";
            return(%&coord_string%);
        endfunction;
    // info/index/withinBounds
        // Checks if a number is <= min && >= max.
            // Params:
            //      {number} <#number>  The number to check if is between min && max.
            //      {number} <#min>     The minimum value for <#number>
            //      {number} <#max>     The maximum value for <#number>
            //
            // Returns a boolean indicating whether or not the number is between the specified values.
        function withinBounds(#number,#min,#max);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:23
            return_boolean = ((#number >= #min) && (#number <= #max));
            return(%return_boolean%);
        endfunction;
    // movement/index/baritoneGoto
        // Takes input of a coordinate position in the world to move to, as well as optional setting pairs to pass along
        // to baritone, then instructs Baritone to move to the position in the world.
            // Params:
            //      {string} <&target_position>     The Coordinate string to move to (X|Y|Z).
            //      {string} [&coord_bounds[]]      An optional array of coordinate bounds (idx 0 = min coord bound, idx 1 = max coord bound)
            //                                      strings. If provided, will exit the function and kill Baritone should the Player exit
            //                                      these bounds.
            //      {number} [#timeout_sec=300]     Maximum amount of seconds for the function to wait before timing out and exiting. Set to -1
            //                                      to disable timeouts.
            //      {number} [#stall_sec=5]         Maximum amount of seconds for the function to be stalled in nearly the same X/Y/Z position (no more
            //                                      than 3 blocks of absolute distance) before timing out and exiting. Set to -1 to disable stall timeouts.
            //      {string} [...&setting_pairs[]]  An optional array of key value Baritone Setting pairs to pass through to
            //                                      Baritone before executing the movement. By default, this function will always
            //                                      use the settings defined below. If you pass in these settings' keys, your values
            //                                      will be used instead of the defaults. You can pass in other settings as well, if
            //                                      needed. The format to pass key value pairs in is: '<key>|<value>'.
                // Baritone Settings Used:
                //  allowPlace              : false
                //  allowBreak              : false
                //  allowSprint             : true
                //  allowDiagonalDescend    : true
                //  allowDiagonalAscend     : true
                //  allowParkour            : true
                //  allowParkourAscend      : true
                //  antiCheatCompatibility  : true
                //  allowWalkOnBottomSlab   : true
                //  allowWaterBucketFall    : false
                //  blocksToAvoid           : spruce_fence,spruce_fence_gate,birch_fence,birch_fence_gate,jungle_fence,jungle_fence_gate,acacia_fence,acacia_fence_gate,dark_oak_fence,dark_oak_fence_gate,nether_brick_fence,cobblestone_wall
                //  freeLook                : false
                //  overshootTraverse       : true
                //  randomLooking           : 0.03
                //  sprintAscends           : true
                //  sprintInWater           : false
        function baritoneGoto(&target_position,&coord_bounds[],#timeout_sec=300,#stall_sec=5,...&setting_pairs[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:150
            log("baritoneGoto : target_position = %&target_position%");
            // Validate input parameters
            if(true);
                // Issue Baritone Settings
                if(true);
                    // Default Settings
                        &baritone_keys[] = "allowBreak";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "allowPlace";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "allowSprint";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowDiagonalDescend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowDiagonalAscend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowParkour";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowParkourAscend";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "antiCheatCompatibility";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowWalkOnBottomSlab";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "allowWaterBucketFall";
                        &baritone_vals[] = "false";
                        
                        &baritone_keys[] = "blocksToAvoid";
                        &baritone_vals[] = "spruce_fence,spruce_fence_gate,birch_fence,birch_fence_gate,jungle_fence,jungle_fence_gate,acacia_fence,acacia_fence_gate,dark_oak_fence,dark_oak_fence_gate,nether_brick_fence,cobblestone_wall";
        
                        &baritone_keys[] = "freeLook";
                        &baritone_vals[] = "false";
        
                        &baritone_keys[] = "overshootTraverse";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "randomLooking";
                        &baritone_vals[] = "0.03";
        
                        &baritone_keys[] = "sprintAscends";
                        &baritone_vals[] = "true";
        
                        &baritone_keys[] = "sprintInWater";
                        &baritone_vals[] = "false";
                    foreach(&setting_pairs[],&setting_pair,#spi);
                        &setting_pair[] = split("|",%&setting_pair%);
                        &setting_key    = %&setting_pair[0]%;
                        if(%&setting_key% != "");
                            &setting_val = %&setting_pair[1]%;
                            #setting_idx = indexof(&baritone_keys[],,%&setting_key%);
                            if(#setting_idx != -1);
                                &baritone_vals[%#setting_idx%] = %&setting_val%;
                            else;
                                &baritone_keys[] = %&setting_key%;
                                &baritone_vals[] = %&setting_val%;
                            endif;
                        endif;
                    next;
                    
                    foreach(&baritone_keys[],&baritone_key,#bki);
                        &baritone_val = %&baritone_vals[%#bki%]%;
                        baritonecommand("set %&baritone_key% %&baritone_val%");
                    next;
                endif;
                
                // Setup bounds and exit conditions
                if(true);
                    foreach(&coord_bounds[],&coord_bound,#cbi);
                        ifmatches(%&coord_bound%,"(.+)\|(.+)\|(.+)");
                            #coords[]   = splitCoordString(%&coord_bound%);
                            #bounds_x[] = %#coord[0]%;
                            #bounds_y[] = %#coord[1]%;
                            #bounds_z[] = %#coord[2]%;
                        endif;
                    next;
                    #bounds_x = arraysize(#bounds_x[]);
                    do_coord_bound = #bounds_x >= 2;
                    if(%do_coord_bound%);
                        #final_idx = #bounds_x - 1;
                        sort("ASC",#bounds_x[]);
                        sort("ASC",#bounds_y[]);
                        sort("ASC",#bounds_z[]);
                        #min_bound_x = %#bounds_x[0]%;
                        #min_bound_y = %#bounds_y[0]%;
                        #min_bound_z = %#bounds_z[0]%;
                        #max_bound_x = %#bounds_x[%#final_idx%]%;
                        #max_bound_y = %#bounds_y[%#final_idx%]%;
                        #max_bound_z = %#bounds_z[%#final_idx%]%;
                    endif;
                    
                    #target_pos[] = splitCoordString(%&target_position%);
                    #target_x    := %#target_pos[0]%;
                    #target_y    := %#target_pos[1]%;
                    #target_z    := %#target_pos[2]%;
                endif;
                
                do_timeout  = #timeout_sec != -1;
                do_stall    = #stall_sec != -1;
                #start_time = %TIMESTAMP%;
                
                if(%do_stall%);
                    #stall_time = #start_time;
                    &stall_pos  = getCoordString();
                endif;
            endif;
            
            // Start moving to the position.
            localGUI("NONE");
            baritonecommand("goto %#target_x% %#target_y% %#target_z%");
            do;
                // Exit any GUI if we are in one.
                if(%GUI% != "NONE");
                    localGUI("NONE");
                endif;
                
                // Check if we have timed out
                break_condition = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                if(%break_condition%);
                    break;
                endif;
                
                // Check if we have exited the boundaries
                if(%do_coord_bound%);
                    wait("1t");
                    in_bounds_x     = withinBounds(%XPOS%,%#min_bound_x%,%#max_bound_x%);
                    in_bounds_y     = withinBounds(%YPOS%,%#min_bound_y%,%#max_bound_y%);
                    in_bounds_z     = withinBounds(%ZPOS%,%#min_bound_z%,%#max_bound_z%);
                    break_condition = !((%in_bounds_x%) && (%in_bounds_y%) && (%in_bounds_z%));
                    if(%break_condition%);
                        break;
                    endif;
                endif;
                
                // Check if we are on the correct position
                return_boolean = ((%XPOS% == #target_x) && (%YPOS% == #target_y) && (%ZPOS% == #target_z));
                if(%return_boolean%);
                    break;
                endif;
                
                // Check if we have stalled out
                if(%do_stall%);
                    wait("1t");
                    stall_data[]    = isStalled(%#start_time%,%&start_pos%,%#stall_sec%);
                    break_condition = %stall_data[0]%;
                    update_stall    = %stall_data[1]%;
                    if(%break_condition%);
                        break;
                    elseif(%update_stall%);
                        #stall_time = %TIMESTAMP%;
                        &stall_pos  = getCoordString();
                    endif;
                endif;
                
                wait("1t");
            until((!%BARITONEWORKING%) || (%break_condition%) || (%return_boolean%));
            
            if((!%BARITONEWORKING%) && (!%break_condition%));
                return_boolean = ((%XPOS% == #target_x) && (%YPOS% == #target_y) && (%ZPOS% == #target_z));
            elseif(%BARITONEWORKING%);
                baritonecommand("stop");
            endif;
            return(%return_boolean%);
        endfunction;
    // math/index/absDiff
        // Given input of two numbers, finds the absolute difference between them.
            // Params:
            //      {string} <&first_number>    The first number (can be integer or float)
            //      {string} <&second_number>   The second number (can be integer or float)
            //
            // Returns the absolute difference between the two numbers. If either number is a float,
            // a float number is returned. Otherwise, an integer is returned.
        function absDiff(&first_number,&second_number);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:8
            ifmatches(%&first_number%,"\.");
                float = true;
            elseifmatches(%&second_number%,"\.");
                float = true;
            endif;
            
            if(%float%);
                &diff = xEval("%&first_number% - %&second_number%");
                ifmatches(%&diff%,"-");
                    &diff = xEval("%&diff% * -1");
                endif;
                return(%&diff%);
            else;
                #first  := %&first_number%;
                #second := %&second_number%;
                #diff    = %#first% - %#second%;
                if(#diff < 0);
                    #diff = #diff * -1;
                endif;
                return(%#diff%);
            endif;
        endfunction;
    // gui/index/regexTest
        // Tests if the regular expression <&expression> matches against <&input_string>.
            // Params:
            //      {string} <&input_string>    The input string to test against <&expression>.
            //      {string} <&expression>      The regular expression to test against <&input_string>.
            //
            // Returns a boolean indicating whether or not the <&expression> matches against the <&input_string>.
        function regexTest(&input_string,&expression);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/gui/index.txt:49
            ifmatches(%&input_string%,%&expression%);
                return_bool = true;
            endif;
            return(%return_bool%);
        endfunction;
    // info/index/getSkyblockAreaFromWTFMAP
        // Attempts to read the SkyBlock Area from the /wtfmap command + chatfilter.
            // Params:
            //      {number} [#timeout_sec=30]  Max amount of seconds to wait for Chat Filter to read the wtfmap output.
            //                                  Set to -1 to disable timeout.
            //      {number} [#wait_ticks=60]   Amount of ticks to wait between attempts to issue the command.
            //
            // Returns the String returned from the Command (i.e. "SkyBlock Dynamic"), or "-1" if cannot be found/timed out.
        function getSkyblockAreaFromWTFMAP(#timeout_sec=30,#wait_ticks=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:422
            debug              = true;
            &script_debug_name = "&3getSkyBlockAreaFromWTFMAP&7";
            
            @cannot_use_wtfmap = false;
            @&wtfmap           = "";
            #start_time        = %TIMESTAMP%;
            do_timeout         = #timeout_sec != -1;
            &return_string     = "-1";
            do;
                func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                if(%func_timeout%);
                    break;
                endif;
                    
                debug_log(%debug%,%&script_debug_name%,"echoing '/wtfmap'...");
                echo("/wtfmap");
                do(%#wait_ticks%);
                    wait("1t");
                    got_response   = ((%@&wtfmap% != "") || (%@cannot_use_wtfmap%));
                until(%got_response%);
                if((%got_response%) && (%@&wtfmap% != ""));
                    &return_string = %@&wtfmap%;
                    break;
                endif;
            until((%got_response%) || (%func_timeout%));
            return(%&return_string%);
        endfunction;
    // info/index/getScoreboardSkyBlockArea
        // Attempts to read the Scoreboard to find the Player's AREA on Hypixel SkyBlock (i.e. 'Private Island', 'Hub', 'Bank', etc).
            // Params:
            //      None
            //
            // Returns the string found on the Scoreboard following the Gem Character, or "-1" if not able to be parsed.
        function getScoreboardSkyBlockArea();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:456
            &return_string = -1;
            foreach("teams");
                &joint_team = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                &joint_team = trim(%&joint_team%);
                &joint_team = regexreplace(&joint_team,"^\s*","");
                ifmatches(%&joint_team%,"\u23E3 (.+)",&found_area,1);
                    &return_string = %&found_area%;
                endif;
            next;
            return(%&return_string%);
        endfunction;
    // info/index/getSkyBlockPlayerListInfo
        // Returns an Array of information extracted from the Hypixel SkyBlock PlayerList.
            // Params:
            //      {string} [...&extract_vars[]]   The variables to extract from the Player List. Valid values are:
            //                                      'AREA', 'SERVER', 'PROFILE', 'BANK', 'SKILLS', 'SPEED', 'STRENGTH',
            //                                      'CRIT_CHANCE', 'CRIT_DAMAGE', 'ATTACK_SPEED'. If no values are provided,
            //                                      will return variables 'AREA', and 'PROFILE' by default.
            //
            // Returns an Array of the extracted variables indexed in the order they were passed to the Function,
            // or if no variables were able to be extracted, the first element of this Array will be -1.
        function getSkyBlockPlayerListInfo(...&extract_vars[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:258
            // Setup valid variables
            if(true);
                &valid_vars[]  = split(", ","AREA, SERVER, PROFILE, BANK, SKILLS, SPEED, STRENGTH, CRIT_CHANCE, CRIT_DAMAGE, ATTACK_SPEED");
                #extract_len   = arraysize(&extract_vars[]);
                assign_default = #extract_len == 0;
                if(!%assign_default%);
                    foreach(&valid_vars[],&valid_var);
                        #extract_idx = indexof(&extract_vars[],,%&valid_var%);
                        if(#extract_idx != -1);
                            &use_out_vars[] = %&valid_var%;
                            #use_out_idxs[] = %#extract_idx%;
                            matched[]       = false;
                        endif;
                    next;
                    #use_out_len   = arraysize(&use_out_vars[]);
                    assign_default = #use_out_len == 0;
                endif;
                
                if(!%assign_default%);
                    sort("ASC",#use_out_idxs[],&use_out_vars[]);
                else;
                    &use_out_vars[] = split(", ","AREA, PROFILE");
                    matched[]       = split(", ","false, false");
                endif;
            endif;
            
            // Compile matches
            if(true);
                #return_index = indexof(&use_out_vars[],,"AREA");
                if(#index_area != -1);
                    &match_names[] = "!C-b";
                    &match_exprs[] = "Area: (.+)"; // Area: Private Island
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SERVER");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!C-c";
                    &match_exprs[%#return_index%] = "Server: (.+)"; // Server: mini787Q
                endif;
                
                #return_index = indexof(&use_out_vars[],,"PROFILE");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-b";
                    &match_exprs[%#return_index%] = "Profile: (.+)"; // Profile: Pineapple
                endif;
                
                #return_index = indexof(&use_out_vars[],,"BANK");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-d";
                    &match_exprs[%#return_index%] = "Bank: (.+)"; // Bank: 50/50
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SKILLS");
                if(#return_index != -1);
                    &match_names[%#return_index%] = "!D-g";
                    &match_exprs[%#return_index%] = "Skills: (.+)"; // Skills: Foraging 17: 24.1%
                endif;
                
                #return_index = indexof(&use_out_vars[],,"SPEED");
                if(#return_index != -1);
                    &tmp_expr_char                = char("10022");
                    &match_names[%#return_index%] = "!D-h";
                    &match_exprs[%#return_index%] = "Speed: %&tmp_expr_char%(.+)"; // Speed: ✦220
                endif;
                
                #return_index = indexof(&use_out_vars[],,"STRENGTH");
                if(#return_index != -1);
                    &tmp_expr_char                = char("10049");
                    &match_names[%#return_index%] = "!D-i";
                    &match_exprs[%#return_index%] = "Strength: %&tmp_expr_char%(.+)"; // Strength: ❁149
                endif;
                
                #return_index = indexof(&use_out_vars[],,"CRIT_CHANCE");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9763");
                    &match_names[%#return_index%] = "!D-j";
                    &match_exprs[%#return_index%] = "Crit Chance: %&tmp_expr_char%(.+)"; // Crit Chance: ☣64
                endif;
                
                #return_index  = indexof(&use_out_vars[],,"CRIT_DAMAGE");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9760");
                    &match_names[%#return_index%] = "!D-k";
                    &match_exprs[%#return_index%] = "Crit Damage: %&tmp_expr_char%(.+)"; // Crit Damage: ☠130
                endif;
                
                #return_index  = indexof(&use_out_vars[],,"ATTACK_SPEED");
                if(#return_index != -1);
                    &tmp_expr_char                = char("9876");
                    &match_names[%#return_index%] = "!D-l";
                    &match_exprs[%#return_index%] = "Attack Speed: %&tmp_expr_char%(.+)"; // Attack Speed: ⚔0
                endif;
            endif;
            
            foreach("players");
                #line_index = indexof(&match_names[],,%PLAYERNAME%);
                if(#line_index != -1);
                    matched[%#line_index%] = true;
                    &line_text             = strip(%PLAYERDISPLAYNAME%);
                    &line_text             = trim(%&line_text%);
                    ifmatches(%&line_text%,%&match_exprs[%#line_index%]%,&capture_group,1);
                        &return_array[%#line_index%] = %&capture_group%;
                        #non_matched_var_index       = indexof(matched[],,false);
                        if(#non_matched_var_index == -1);
                            break;
                        endif;
                    endif;
                endif;
            next;
            
            #return_len = arraysize(&return_array[]);
            if(#return_len == 0);
                &return_array[] = -1;
            endif;
            return(&return_array[]);
        endfunction;
    // info/index/getSkyBlockArea
        // Gets the SkyBlock Server Type that we are currently connected to. Returns SKYBLOCK_HUB, SKYBLOCK_HOME, or OTHER. OTHER is only returned if
        // the Function cannot determine whether it is on a SkyBlock Server, or if it is not on a SkyBlock Server.
            // Params:
            //      None
            //
            // Returns one of the following strings: 'SKYBLOCK_HUB', 'SKYBLOCK_HOME', 'OTHER'. 'OTHER' is returned if none of the functions return any
            // parseable values.
        function getSkyBlockArea();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:577
            &playerlist_area = getSkyBlockPlayerListInfo("AREA");
            if(%&playerlist_area% == "-1");
                &scoreboard_area = getScoreboardSkyBlockArea();
                if(%&scoreboard_area% == "-1");
                    &wtfmap_area = getSkyBlockAreaFromWTFMAP();
                    if(%&wtfmap_area% == "SkyBlock Hub");
                        return("SKYBLOCK_HUB");
                    elseif(%&wtfmap_area% == "SkyBlock Dynamic");
                        return("SKYBLOCK_HOME");
                    endif;
                    return("OTHER");
                elseif(%&playerlist_area% == "Your Island");
                    return("SKYBLOCK_HOME");
                else;
                    return("SKYBLOCK_HUB");
                endif;
            elseif(%&playerlist_area% == "Private Island");
                return("SKYBLOCK_HOME");
            else;
                return("SKYBLOCK_HUB");
            endif;
        endfunction;
    // info/index/isInLimbo
        // Checks if the Player is in Limbo by reading the Dimension, as well as checking to see if there are any signs at the sign positions
        // where they normally are in Limbo.
            // Params:
            //      None
            //
            // Returns a boolean indicating whether or not the Player is in Limbo.
        function isInLimbo();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:475
            if((%YPOS% > 35) || (%DIMENSION% != "END"));
                return(False);
            endif;
            
            #limbo_x = -20;
            #limbo_y = 32;
            #limbo_z = 21;
            
            if((%XPOS% == #limbo_x) && (%YPOS% == #limbo_y) && (%ZPOS% == #limbo_z));
                return(True);
            endif;
            
            &armor_vars[] = split(", ","ITEM, BOOTSID, LEGGINGSID, CHESTPLATEID, HELMID");
            all_air       = true;
            foreach(&armor_vars[],&armor_var);
                &armor_val = "%%&armor_var%%";
                if(%&armor_val% != "air");
                    all_air = false;
                    break;
                endif;
            next;
            if((%SLOTSFULL% == 0) && (%all_air%));
                return(True);
            endif;
            
            #sign_x   = -21;
            #sign_y[] = split(", ","31, 32, 33");
            #sign_z[] = split(", ","20, 21, 22");
            foreach(#sign_y[],#sign_y);
                foreach(#sign_z[],#sign_z);
                    &block_id = getid(%#sign_x%,%#sign_y%,%#sign_z%);
                    if(&block_id == "wall_sign");
                        in_limbo = true;
                        break;
                    endif;
                next;
            next;
        endfunction;
    // info/index/getHypixelGamemodeFromScoreboard
        // Attempts to read the Scoreboard (foreach("teams") ... prefix + suffix ... next) to find the Player's location on Hypixel
            // Params:
            //      None
            //
            // Returns one of the following strings: 'LOBBY', 'SKYBLOCK', or 'OTHER'. 'OTHER' indicates that the function
            // was not able to determine which area the Player is located in.
        function getHypixelGamemodeFromScoreboard();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:382
            &return_string = "OTHER";
            
            // Setup indicator strings
            if(true);
                &match_expr[] = "Games in this lobby are"; // Only shown in Prototype Lobby Servers
                &match_area[] = "LOBBY";
                
                &match_expr[] = "^Achievements: .+$"; // Only shown in Hypixel Main Lobby Servers
                &match_area[] = "LOBBY";
                
                &match_expr[] = "^Purse: [0-9,.]+"; // Only shown in SkyBlock Servers
                &match_area[] = "SKYBLOCK";
                
                &match_expr[] = "^Bits: [0-9,.]+"; // Only shown in SkyBlock Servers
                &match_area[] = "SKYBLOCK";
            endif;
            
            foreach("teams");
                &joint_team = strip("%TEAMPREFIX%%TEAMSUFFIX%");
                &joint_team = trim(%&joint_team%);
                &joint_team = regexreplace(&joint_team,"^\s*","");
                foreach(&match_expr[],&match_expr,#mei);
                    ifmatches(%&joint_team%,%&match_expr%);
                        &return_string = %&match_area[%#mei%]%;
                        break;
                    endif;
                next;
            next;
            
            return(%&return_string%);
        endfunction;
    // info/index/getHypixelGamemode
        // Gets the current Gamemode / Gametype that the Player is in by reading the Scoreboard, etc.
        // Params:
        //      None
        //
        // Returns one of: 'LOBBY', 'LIMBO', 'SKYBLOCK', or 'OTHER'.
        function getHypixelGamemode();
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:520
            if(true);
                do(3);
                    // Check to see if we can read the Gamemode from the 9th Hotbar Slot.
                    if(true);
                        #static_hb_end = 44;
                        &found_item    = getslotiteminv(%#static_hb_end%,,#found_stack,#found_data,&found_nbt);
                        &found_nbt     = strip(%&found_nbt%);
                        &found_name    = getItemName(%&found_nbt%,%&found_item%);
                        
                        &known_names[] = split(", ","Lobby Selector (Right Click), SkyBlock Menu (Right Click)");
                        &known_areas[] = split(", ","LOBBY, SKYBLOCK");
                        #known_index   = indexof(&known_names[],,%&found_name%);
                        if(%#known_index% != -1);
                            &return_string = %&known_areas[%#known_index%]%;
                            break;
                        endif;
                    endif;
                    
                    // Cant find the Gamemode from the 9th Hotbar Slot, have to read additional Data. Check to see if we can find any Data from the Playerlist.
                    &skyblock_area = getSkyBlockPlayerListInfo("AREA");
                    if(%&skyblock_area% != "-1");
                        &return_string = "SKYBLOCK";
                        break;
                    endif;
                    
                    // Try to read the location from the Scoreboard.
                    &scoreboard_location = getHypixelGamemodeFromScoreboard();
                    if(%&scoreboard_location% != "OTHER");
                        &return_string = %&scoreboard_location%;
                        break;
                    endif;
                    
                    // Check if we are in Limbo as a last resort
                    in_limbo = isInLimbo();
                    if(%in_limbo%);
                        &return_string = "LIMBO";
                        break;
                    endif;
                    
                    wait("1000ms");
                loop;
            endif;
            
            if(%&return_string% != "");
                return(%&return_string%);
            endif;
            return("OTHER");
        endfunction;
    // movement/index/gotoServer
        // Given a Server type to get to, gets to the Server type from wherever we are. Returns a boolean indicating
        // whether or not the action was successful.
            // Params:
            //      {string} [&target_server="SKYBLOCK_HOME"]   The target server to get to. Valid values are: 'SKYBLOCK',
            //                                                  'SKYBLOCK_HUB', 'SKYBLOCK_HOME. Defaults to 'SKYBLOCK_HOME'.
            //                                                  If set to 'SKYBLOCK', will accept any SkyBlock server.
            //      {number} [#command_wait_ticks=100]          Amount of ticks to wait between issuing each command needed.
            //      {number} [#timeout_sec=300]                 Amount of seconds to attempt this action before timing out and
            //                                                  returning false. Set to -1 to make the action try to go on indefinitely.
            //                                                  Defaults to 300 (5 minutes).
            //      {boolean} [force_cmd=false]                 If set to true, will force the function to send a command to try and
            //                                                  get to the correct server regardless of whether or not it is already on it
            //                                                  at time of function call.
            //
            // Returns a boolean indicating whether or not the Player is on the [&target_server] at the time of function exit.
        function gotoServer(&target_server="SKYBLOCK_HOME",#command_wait_ticks=100,#timeout_sec=300,force_cmd=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:339
            debug              = true;
            &script_debug_name = "&4gotoServer";
            
            &target_server = miscValidate(%&target_server%,0,"SKYBLOCK_HOME","SKYBLOCK_HUB","SKYBLOCK");
            do_timeout     = #timeout_sec > 0;
            #start_time    = %TIMESTAMP%;
            &encode_vars[] = split(", ","@&auto-restarts-case, @world_changed, BIOME, DIMENSION, XPOS, YPOS, ZPOS"); // Variables used to detect a world change event.
            first_loop     = false;
            #min_tick_wait = %#command_wait_ticks% / 2; // used to ensure we do not spam requests if we switch servers quickly
            
            do;
                if(%do_timeout%);
                    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                    if(%func_timeout%);
                        debug_error(%debug%,%&script_debug_name%,"Function timed out.");
                        break;
                    endif;
                endif;
                
                // Figure out what type of command we are going to need to issue.
                if(!%do_override%);
                    &hypixel_gamemode = getHypixelGamemode(); // 'LOBBY', 'LIMBO', 'SKYBLOCK', or 'OTHER'.
                    debug_log(%debug%,%&script_debug_name%,"force_cmd: %force_cmd%, target_server: %&target_server%, hypixel_gamemode: %&hypixel_gamemode%");
                    if(%&hypixel_gamemode% == "SKYBLOCK");
                        return_boolean = %&target_server% == "SKYBLOCK";
                        if((%return_boolean%) && ((!%force_cmd%) || (%first_loop%)));
                            debug_log(%debug%,%&script_debug_name%,"Got to target_server 'SKYBLOCK'.");
                            break;
                        endif;
                        
                        &skyblock_area = getSkyBlockArea(); // 'SKYBLOCK_HUB', 'SKYBLOCK_HOME', 'OTHER'
                        debug_log(%debug%,%&script_debug_name%,"force_cmd: %force_cmd%, target_server: %&target_server%, hypixel_gamemode: %&hypixel_gamemode%, skyblock_area: %&skyblock_area%");
                        return_boolean = %&target_server% == %&skyblock_area%;
                        if((%return_boolean%) && ((!%force_cmd%) || (%first_loop%)));
                            debug_log(%debug%,%&script_debug_name%,"Got to target_server '%&skyblock_area%'.");
                            break;
                        endif;
                        
                        if(%&skyblock_area% == "SKYBLOCK_HUB");
                            if((%force_cmd%) && (%&target_server% == "SKYBLOCK_HUB"));
                                &echo_command = "/warp hub";
                            else;
                                &echo_command = "/warp home";
                            endif;
                        elseif(%&skyblock_area% == "SKYBLOCK_HOME");
                            &echo_command = "/warp hub";
                        elseif(%&skyblock_area% == "OTHER");
                            &echo_command = "/lobby";
                        endif;
                    elseif(%&hypixel_gamemode% == "LIMBO");
                        &echo_command = "/lobby";
                    elseif(%&hypixel_gamemode% == "LOBBY");
                        &echo_command = "/play skyblock";
                    elseif(%&hypixel_gamemode% == "OTHER");
                        &echo_command = "/lobby";
                    endif;
                else;
                    // Issue the override "/lobby" command to break out of the "Cannot send chat message" loop.
                    &echo_command = "/lobby";
                    do_override   = false;
                endif;
                debug_log(%debug%,%&script_debug_name%,"echo_command: &d%&echo_command%");
                
                // Issue the command and wait for an update in our environment variables.
                if(true);
                    if((#waited_ticks > 0) && (#waited_ticks < #command_wait_ticks));
                        do;
                            wait("1t");
                            inc(#waited_ticks);
                        until(%#waited_ticks% >= %#command_wait_ticks%);
                    endif;
                
                    foreach(&encode_vars[],&encode_var,#evi);
                        ifmatches(%&encode_var%,"(?-i:[a-z])"); // Unset any global variables, i.e. '@world_changed'.
                            unset(%&encode_var%);
                        endif;
                        &initial_vals[%#evi%] = "%%&encode_var%%";
                    next;
                    
                    debug_log(%debug%,%&script_debug_name%,"running %&echo_command%");
                    echo(%&echo_command%);
                    env_updated   = false;
                    #waited_ticks = 0;
                    do(%#command_wait_ticks%);
                        wait("1t");
                        inc(#waited_ticks);
                        foreach(&encode_vars[],&encode_var,#evi);
                            &encode_val = "%%&encode_var%%";
                            if(%&initial_vals[%#evi%]% != %&encode_val%);
                                env_updated = true; // Break early as soon as we detect some sort of change in our environment.
                                break;
                            endif;
                        next;
                    until(%env_updated%);
                    
                    // Check to see if we hit the @&auto-restarts-case ("Cannot send chat message")
                    if(%@&auto-restarts-case% != "");
                        do_override = true;
                    endif;
                endif;
                
                first_loop = true;
            until((%func_timeout%) || ((%return_boolean%) && ((!%force_cmd%) || (%first_loop%))));
            
            return(%return_boolean%);
        endfunction;
    // movement/index/getMiddlePointCoordRange
        // Given a minimum and maximum coordinate string, splits both of them, then finds the middle most value.
            // Params:
            //      {string} <&min_coord_string>    The minimum coordinate string
            //      {string} <&max_coord_string>    The maximum coordinate string
            //
            // Returns an Array where the 0th element is the XPOS, 1st is YPOS, and 2nd is ZPOS. The value is the
            // middle point (min X + max X / 2, etc) of each coordinate point.
        function getMiddlePointCoordRange(&min_coord_string,&max_coord_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:105
            #min_coord[] = splitCoordString(%&min_coord_string%);
            #max_coord[] = splitCoordString(%&max_coord_string%);
            
            #avg_pos_x   = (%#min_coord[0]% + %#max_coord[0]%) / 2;
            #avg_pos_y   = (%#min_coord[1]% + %#max_coord[1]%) / 2;
            #avg_pos_z   = (%#min_coord[2]% + %#max_coord[2]%) / 2;
            
            log("getMiddlePointCoordRange: avg x %#avg_pos_x%, avg y %#avg_pos_y%, avg z %#avg_pos_z%");
            return(%#avg_pos_x%,%#avg_pos_y%,%#avg_pos_z%);
        endfunction;
    // movement/index/expandCoordStringToRange
        // Given a coordinate string, splits it up by tunnel characters and returns the minimum and maximum
        // coordinate strings, evaluated by +/- [#expand_by] to each coordinate point.
            // Params:
            //      {string} [&coord_string="%XPOS%|%YPOS%|%ZPOS%"] The coordinate string to split up
            //      {number} [#expand_by=1]                         The offset to apply to each coordinate point
            //
            // Returns an Array where the first element is the minimum string and second element is maximum string.
        function expandCoordStringToRange(&coord_string="%XPOS%|%YPOS%|%ZPOS%",#expand_by=1);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:85
            #expand_greater = %#expand_by%;
            #expand_lesser  = %#expand_by% * -1;
            #coord_array[]  = splitCoordString(%&coord_string%);
            foreach(#coord_array[],#coord_pos,#cpi);
                #min_coord[%#cpi%] = %#coord_pos% + %#expand_lesser%;
                #max_coord[%#cpi%] = %#coord_pos% + %#expand_greater%;
            next;
            &min_string = join("|",#min_coord[]);
            &max_string = join("|",#max_coord[]);
            return(%&min_string%,%&max_string%);
        endfunction;
    // movement/index/goto
        // Given a position string (and/or a server and coordinate string), gets the Player to the
        // required Server then moves them to the required position.
            // Params:
            //      {string} [&position]        The name of the pre-defined position to move to. Valid strings are:
                //  'HUB'                   : SkyBlock Hub
                //  'HOME'                  : SkyBlock Home (Private Island)
                //  'BANKER'                : SkyBlock Hub => Banker NPC
                //  'BAZAAR'                : SkyBlock Hub => Bazaar NPC
                // Note that in order to use the 'BAZAAR' or 'BAZAAR_AGENT' term, Chat Filter must be setup with 'You need level 7 in Farming, Foraging and Mining to access this feature!'
                // in order to cancel the function in the event that the User is not yet level 10.
                //  'BUILDER'               : SkyBlock Hub => Builder NPC
                //  'MAD_REDSTONE_ENGINEER' : SkyBlock Hub => Builder NPC => Downstairs Redstone NPC (alt. strings: 'REDSTONE_ENGINEER', 'REDSTONE_MERCHANT')
                //  'BITS'                  : SkyBlock Hub => Elizabeth NPC (Community Center)
                //  'ALCHEMIST'             : SkyBlock Hub => Alchemist NPC
                //  'AUCTION'               : SkyBlock Hub => Auction NPC
                //  'JACOB'                 : SkyBlock Hub => Jacob NPC
                //  Note that in order to use the 'JACOB' term, Chat Filter must be setup with '\[NPC\] Jacob: You need Farming 10 to participate!' in order to cancel
                //  the function in the event that the User is not yet level 10.
                //  'ANITA'                 : SkyBlock Hub => Anita NPC
                //  'ANVIL'                 : SkyBlock Hub => Anvil (at Blacksmith)
                //  'REFORGE_ANVIL'         : SkyBlock Hub => Reforge Anvil (at Blacksmith / Smithmonger)
                //  'ENCHANTMENT_TABLE'     : SkyBlock Hub => Enchantment Table Building (Library)
                //  'LIBRARIAN'             : SkyBlock Hub => Librarian NPC
                //  'FREE_COOKIE'           : SkyBlock Hub => Community Center => City Project
                //  'WHEAT_FIELDS'          : SkyBlock Hub => Wheat Fields
                //  'COAL_MINE'             : SkyBlock Hub => Coal Mine
                //  'GOLD_MINE'             : SkyBlock Hub => Coal Mine => Gold Mine
                //  'FOREST'                : SkyBlock Hub => Forest
                //  'HUB_SECLUDED'          : SkyBlock Hub => Random secluded location
                //  'HUB_SELECTOR'          : SkyBlock Hub => Hub Selector NPC (alt. strings              : 'SELECTOR')
                //  'FARM_MERCHANT'         : SkyBlock Hub => Farm Merchant NPC (alt. strings             : 'FARM', 'FARM MERCHANT', 'FARMER', 'FARMER MERCHANT')
                //  'MINE_MERCHANT'         : SkyBlock Hub => Mine Merchant NPC (alt. strings             : 'MINE', 'MINE MERCHANT', 'MINER', 'MINER MERCHANT')
                //  'LUMBER_MERCHANT'       : SkyBlock Hub => Lumber Merchant NPC (alt. strings           : 'LUMBER', 'LUMBER MERCHANT')
            //      {boolean} [open_gui=false]  Whether or not to open the GUI this Position is bound to once we have
            //                                  arrived.
            //      {number} [#timeout_sec=300] Amount of seconds to continue to attempt to execute this movement for before
            //                                  timing out and returning false. If set to -1, will take it as no timeout, do it
            //                                  forever until successful completion.
            //      {string} [&server]          The name of the Server the position exists on. Only required if
            //                                  [&position] is omitted. Valid values are 'HUB', 'HOME'.
            //      {string} [&coord_string]    The coordinate string of the position to move to in format X|Y|Z.
            //                                  Only required if [&position] is omitted and [&server] is provided.
            //
            // Returns a boolean indicating whether or not the movement was successful.
        function goto(&position,open_gui=false,#timeout_sec=300,&server,&coord_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/movement/index.txt:491
            // Check if need to setup position string indexes
            if(true);
                #pos_param_len = arraysize(@&goto_pos_params[]);
                #last_build    = %@#goto_pos_last_build%;
                &curr_config   = %CONFIG%;
                &curr_config   = regexreplace(&curr_config,"-dev$","");
                #curr_build    = getbuild(%&curr_config%);
                refresh_index  = ((#pos_param_len == 0) || (#last_build == 0) || ((#last_build != #curr_build) && (#curr_build != -1)));
                
                if(%refresh_index%);
                    unset(@&goto_pos_params[]);         // parameters used to select a position to go to
                    unset(@&goto_pos_min[]);            // min coordinate bound strings
                    unset(@&goto_pos_max[]);            // max coordinate bound strings
                    unset(@&goto_pos_server[]);         // server type (hub, home)
                    unset(@&goto_pos_entity[]);         // entity name for use in foreach ... entities or NULL if no entity
                    unset(@&goto_pos_container[]);      // name of container if entity or goto_pos_override_look
                    unset(@&goto_pos_override_look[]);  // coordinate string to calcyawto & look at if not entity
                    unset(@&goto_pos_chat_cancel[]);    // pointer to global bool var to unset before actions, if turns true while running, cancel
                    
                    if(true);
                        // Home / Private Island
                            @&goto_pos_params[]        = "HOME";
                            @&goto_pos_min[]           = "NULL";
                            @&goto_pos_max[]           = "NULL";
                            @&goto_pos_server[]        = "SKYBLOCK_HOME";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Hub Spawnpoint @ Hub
                            @&goto_pos_params[]        = "HUB";
                            @&goto_pos_min[]           = "-4|69|-71";
                            @&goto_pos_max[]           = "-2|71|-69";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Hub Selector @ Village
                            @&goto_pos_params[]        = "HUB_SELECTOR, SELECTOR, SERVER_SELECTOR, SERVER SELECTOR, HUB SELECTOR";
                            @&goto_pos_min[]           = "-12|69|-70";
                            @&goto_pos_max[]           = "-10|71|-68";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Hub Selector";
                            @&goto_pos_container[]     = "SkyBlock Hub Selector";
                            @&goto_pos_override_look[] = "-10.0|71.5|-67.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Banker @ Bank
                            @&goto_pos_params[]        = "BANKER";
                            @&goto_pos_min[]           = "-26|70|-62";
                            @&goto_pos_max[]           = "-24|72|-60";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Banker";
                            @&goto_pos_container[]     = "^(?:Bank|Personal Bank Account)$";
                            @&goto_pos_override_look[] = "-24.5|72.5|-58.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bazaar @ Bazaar Alley
                            &char_unicode_escaped      = "\u279C"; // bazaar fat arrow
                            @&goto_pos_params[]        = "BAZAAR";
                            @&goto_pos_min[]           = "-32|69|-77";
                            @&goto_pos_max[]           = "-30|71|-75";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bazaar";
                            @&goto_pos_container[]     = "Bazaar %&char_unicode_escaped% (?:Farming|Mining|Combat|Woods & Fishes|Oddities)";
                            @&goto_pos_override_look[] = "-32.5|72.5|-76.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_bazaar";
                        // Lumber Merchant @ Village
                            @&goto_pos_params[]        = "LUMBER_MERCHANT, LUMBER, LUMBER MERCHANT";
                            @&goto_pos_min[]           = "-51|69|-72";
                            @&goto_pos_max[]           = "-49|71|-70";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Lumber Merchant";
                            @&goto_pos_container[]     = "Lumber Merchant";
                            @&goto_pos_override_look[] = "-49.5|71.5|-68.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Builder @ Builder's House
                            @&goto_pos_params[]        = "BUILDER";
                            @&goto_pos_min[]           = "-53|70|-31";
                            @&goto_pos_max[]           = "-51|72|-29";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Builder";
                            @&goto_pos_container[]     = "Builder";
                            @&goto_pos_override_look[] = "-51.0|72.5|-27.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Wool Weaver @ Builder's House
                            @&goto_pos_params[]        = "WOOL_WEAVER, WOOL WEAVER, WOOL";
                            @&goto_pos_min[]           = "-48|73|-34";
                            @&goto_pos_max[]           = "-46|75|-32";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Wool Weaver";
                            @&goto_pos_container[]     = "Wool Weaver";
                            @&goto_pos_override_look[] = "-47.0|75.5|-30.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Mad Redstone Engineer @ Builder's House
                            @&goto_pos_params[]        = "MAD_REDSTONE_ENGINEER, REDSTONE_ENGINEER, REDSTONE_MERCHANT, MAD RESTONE ENGINEER, REDSTONE ENGINEER, REDSTONE MERCHANT, REDSTONE";
                            @&goto_pos_min[]           = "-54|64|-32";
                            @&goto_pos_max[]           = "-52|66|-30";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Mad Redstone Engineer";
                            @&goto_pos_container[]     = "Mad Redstone Engineer";
                            @&goto_pos_override_look[] = "-52.0|66.5|-29.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Lumberjack @ Forest
                            @&goto_pos_params[]        = "LUMBERJACK, FOREST";
                            @&goto_pos_min[]           = "-113|73|-37";
                            @&goto_pos_max[]           = "-111|75|-35";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Lumberjack";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "-112.5|75.5|-36.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Adventurer @ Village
                            @&goto_pos_params[]        = "ADVENTURER, ADVENTURER_MERCHANT";
                            @&goto_pos_min[]           = "-43|69|-68";
                            @&goto_pos_max[]           = "-41|71|-66";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Adventurer";
                            @&goto_pos_container[]     = "Adventurer";
                            @&goto_pos_override_look[] = "-41.5|71.5|-64.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bazaar Agent @ Bazaar Alley
                            &char_unicode_escaped      = "\u279C"; // bazaar fat arrow
                            @&goto_pos_params[]        = "BAZAAR_AGENT";
                            @&goto_pos_min[]           = "-41|69|-79";
                            @&goto_pos_max[]           = "-39|71|-77";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bazaar Agent";
                            @&goto_pos_container[]     = "Bazaar %&char_unicode_escaped% (?:Farming|Mining|Combat|Woods & Fishes|Oddities)";
                            @&goto_pos_override_look[] = "-39.5|71.5|-78.90625";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_bazaar";
                        // Vault @ Bank
                            @&goto_pos_params[]        = "VAULT";
                            @&goto_pos_min[]           = "-29|70|-63";
                            @&goto_pos_max[]           = "-27|72|-61";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Vault";
                            @&goto_pos_container[]     = "^(?:Unlock Bank|Personal) Vault\??$";
                            @&goto_pos_override_look[] = "-28.5|72.8125|-61.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Alchemist @ Village
                            @&goto_pos_params[]        = "ALCHEMIST";
                            @&goto_pos_min[]           = "41|69|-63";
                            @&goto_pos_max[]           = "43|71|-61";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Alchemist";
                            @&goto_pos_container[]     = "Alchemist";
                            @&goto_pos_override_look[] = "41.5|71.5|-63.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Fish Merchant @ Village
                            @&goto_pos_params[]        = "FISH_MERCHANT, FISH MERCHANT, FISH";
                            @&goto_pos_min[]           = "49|67|-84";
                            @&goto_pos_max[]           = "51|69|-82";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Fish Merchant";
                            @&goto_pos_container[]     = "Fish Merchant";
                            @&goto_pos_override_look[] = "52.5|69.5|-82.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Plumber Joe @ Village
                            @&goto_pos_params[]        = "PLUMBER_JOE, PLUMBER JOE, PLUMBER";
                            @&goto_pos_min[]           = "56|69|-80";
                            @&goto_pos_max[]           = "58|71|-78";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Plumber Joe";
                            @&goto_pos_container[]     = "Plumber Joe";
                            @&goto_pos_override_look[] = "56.5|71.59375|-77.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Kat @ Village
                            @&goto_pos_params[]        = "KAT";
                            @&goto_pos_min[]           = "32|70|-102";
                            @&goto_pos_max[]           = "34|72|-100";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Kat";
                            @&goto_pos_container[]     = "Pet Sitter";
                            @&goto_pos_override_look[] = "34.5|72.59375|-100.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Zog @ Village
                            @&goto_pos_params[]        = "ZOG";
                            @&goto_pos_min[]           = "32|69|-95";
                            @&goto_pos_max[]           = "34|71|-93";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Zog";
                            @&goto_pos_container[]     = "Zog";
                            @&goto_pos_override_look[] = "33.5|71.5|-95.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Bea @ Village
                            @&goto_pos_params[]        = "BEA";
                            @&goto_pos_min[]           = "27|69|-92";
                            @&goto_pos_max[]           = "29|71|-90";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Bea";
                            @&goto_pos_container[]     = "Bea";
                            @&goto_pos_override_look[] = "30.5|71.5|-90.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // George @ Village
                            @&goto_pos_params[]        = "GEORGE";
                            @&goto_pos_min[]           = "31|76|-93";
                            @&goto_pos_max[]           = "33|78|-91";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "George";
                            @&goto_pos_container[]     = "Offer Pets";
                            @&goto_pos_override_look[] = "32.5|78.5|-93.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Jacob @ Farmhouse
                            @&goto_pos_params[]        = "JACOB";
                            @&goto_pos_min[]           = "21|70|-69";
                            @&goto_pos_max[]           = "23|72|-67";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Jacob";
                            @&goto_pos_container[]     = "Jacob's Farming Contests";
                            @&goto_pos_override_look[] = "23.0|72.5|-69.0";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_jacob";
                        // Anita @ Farmhouse
                            @&goto_pos_params[]        = "ANITA";
                            @&goto_pos_min[]           = "23|76|-71";
                            @&goto_pos_max[]           = "25|78|-69";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Anita";
                            @&goto_pos_container[]     = "Anita";
                            @&goto_pos_override_look[] = "23.0|78.5|-69.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Farm Merchant @ Village
                            @&goto_pos_params[]        = "FARM_MERCHANT, FARM MERCHANT, FARMER_MERCHANT, FARMER MERCHANT, FARMER, FARM";
                            @&goto_pos_min[]           = "13|69|-73";
                            @&goto_pos_max[]           = "15|71|-71";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Farm Merchant";
                            @&goto_pos_container[]     = "Farm Merchant";
                            @&goto_pos_override_look[] = "15.5|71.5|-71.78125";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Elizabeth @ Community Center
                            @&goto_pos_params[]        = "ELIZABETH, BITS";
                            @&goto_pos_min[]           = "0|70|-103";
                            @&goto_pos_max[]           = "2|72|-101";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Elizabeth";
                            @&goto_pos_container[]     = "Community Shop";
                            @&goto_pos_override_look[] = "0.0|72.5|-101.0";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_elizabeth";
                        // City Project @ Community Center
                            @&goto_pos_params[]        = "FREE_COOKIE, CITY_PROJECT";
                            @&goto_pos_min[]           = "8|72|-110";
                            @&goto_pos_max[]           = "10|74|-108";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "CITY PROJECT";
                            @&goto_pos_container[]     = "Project";
                            @&goto_pos_override_look[] = "12.0|73.53125|-108.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Auction Agent @ Auction House
                            @&goto_pos_params[]        = "AUCTIONS, AUCTION, AUCTION_HOUSE, AUCTION HOUSE, AH";
                            @&goto_pos_min[]           = "-32|71|-89";
                            @&goto_pos_max[]           = "-30|73|-87";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Auction Agent";
                            @&goto_pos_container[]     = "(?:Co-op )?Auction House";
                            @&goto_pos_override_look[] = "-31.0|74.5|-85.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_ah";
                        // Librarian @ Library
                            @&goto_pos_params[]        = "LIBRARIAN, LIBRARY, LIBRARIAN_MERCHANT, LIBRARY_MERCHANT, LIBRARIAN MERCHANT, LIBRARY MERCHANT";
                            @&goto_pos_min[]           = "-36|68|-113";
                            @&goto_pos_max[]           = "-34|70|-111";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Librarian";
                            @&goto_pos_container[]     = "Librarian";
                            @&goto_pos_override_look[] = "-35.5|70.59375|-112.5";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Enchanting Table @ Library
                            @&goto_pos_params[]        = "ENCHANTMENT_TABLE, ENCHANTMENT TABLE, ENCHANTMENT, ENCHANTING_TABLE, ENCHANTING TABLE, ENCHANTING, ENCHANT_TABLE, ENCHANT TABLE, ENCHANT";
                            @&goto_pos_min[]           = "-36|68|-113";
                            @&goto_pos_max[]           = "-34|70|-111";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Enchant Item";
                            @&goto_pos_override_look[] = "-37|69|-111";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Mine Merchant @ Coal Mine
                            @&goto_pos_params[]        = "MINE_MERCHANT, MINE MERCHANT, MINER_MERCHANT, MINER MERCHANT, MINE, MINER";
                            @&goto_pos_min[]           = "-10|67|-124";
                            @&goto_pos_max[]           = "-8|69|-122";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Mine Merchant";
                            @&goto_pos_container[]     = "Mine Merchant";
                            @&goto_pos_override_look[] = "-9.0|69.5|-125.0";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Blacksmith @ Blacksmith
                            @&goto_pos_params[]        = "ANVIL";
                            @&goto_pos_min[]           = "-29|68|-128";
                            @&goto_pos_max[]           = "-27|70|-126";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Anvil";
                            @&goto_pos_override_look[] = "-28|69|-129";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Smithmonger @ Blacksmith
                            @&goto_pos_params[]        = "SMITHMONGER";
                            @&goto_pos_min[]           = "-32|68|-137";
                            @&goto_pos_max[]           = "-30|70|-135";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "Smithmonger";
                            @&goto_pos_container[]     = "Smithmonger";
                            @&goto_pos_override_look[] = "-32.5|70.59375|-135.5";
                            @&goto_pos_chat_cancel[]   = "@cannot_use_smithmonger";
                        // Reforge Anvil @ Blacksmith/Smithmonger
                            @&goto_pos_params[]        = "REFORGE_ANVIL, REFORGE ANVIL, REFORGE";
                            @&goto_pos_min[]           = "-32|68|-137";
                            @&goto_pos_max[]           = "-30|70|-135";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "Reforge Item \(Advanced\)";
                            @&goto_pos_override_look[] = "-29|69|-137";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Wheat Fields @ Farm in Hub
                            @&goto_pos_params[]        = "WHEAT_FIELDS, WHEAT FIELDS, WHEAT, FIELDS";
                            @&goto_pos_min[]           = "42|70|-144";
                            @&goto_pos_max[]           = "44|72|-142";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                        // Coal Mine @ Coal Mine in Hub
                            @&goto_pos_params[]        = "COAL_MINE, COAL MINE, COAL";
                            @&goto_pos_min[]           = "-21|70|-166";
                            @&goto_pos_max[]           = "-19|72|-164";
                            @&goto_pos_server[]        = "SKYBLOCK_HUB";
                            @&goto_pos_entity[]        = "NULL";
                            @&goto_pos_container[]     = "NULL";
                            @&goto_pos_override_look[] = "NULL";
                            @&goto_pos_chat_cancel[]   = "NULL";
                    endif;
                    
                    @#goto_pos_last_build = %#curr_build%;
                endif;
            endif;
            
            // Find the position we are going to need to go to.
            if(true);
                #position_index = -1;
                if(%&position% != "");
                    foreach(@&goto_pos_params[],&goto_pos_params,#gpi);
                        &goto_pos_params[] = split(", ",%&goto_pos_params%);
                        #goto_pos_index    = indexof(&goto_pos_params[],,%&position%);
                        if(#goto_pos_index != -1);
                            debug_log(%@fn_debug%,%&script_debug_name%,"goto > pos found in %&goto_pos_params% (%&goto_pos_params[%#goto_pos_index%]%)");
                            #position_index = #gpi;
                            break;
                        endif;
                    next;
                endif;
                if(#position_index != -1);
                    #auction_index          = indexof(&goto_pos_params[],,"AUCTION");
                    if(#auction_index != -1);
                        #auction_y      =  72;
                        #auction_min_x  = -39;
                        #auction_max_x  = -29;
                        #auction_row_z1 = -88;
                        #auction_row_z2 = -94;
                        
                        
                    else;
                        &goto_pos_min = %@&goto_pos_min[%#position_index%]%;
                        &goto_pos_max = %@&goto_pos_max[%#position_index%]%;
                    endif;
                    &goto_pos_server        = %@&goto_pos_server[%#position_index%]%;
                    &goto_pos_entity        = %@&goto_pos_entity[%#position_index%]%;
                    &goto_pos_container     = %@&goto_pos_container[%#position_index%]%;
                    &goto_pos_override_look = %@&goto_pos_override_look[%#position_index%]%;
                    &goto_pos_chat_cancel   = %@&goto_pos_chat_cancel[%#position_index%]%;
                elseif((%&server% != "") && (%&coord_string% != ""));
                    &goto_pos_arr[]         = expandCoordStringToRange(%&coord_string%);
                    &goto_pos_min           = %&goto_pos_arr[0]%;
                    &goto_pos_max           = %&goto_pos_arr[1]%;
                    &goto_pos_server        = %&server%;
                    &goto_pos_entity        = "NULL";
                    &goto_pos_container     = "NULL";
                    &goto_pos_override_look = "NULL";
                    &goto_pos_chat_cancel   = "NULL";
                endif;
            endif;
            
            // Start moving towards the position we need to go to.
            if(true);
                // Setup loop variables
                if(true);
                    do_timeout      = #timeout_sec != -1;
                    #start_time     = %TIMESTAMP%;
                    #fn_timeout     = -1
                    do_open_gui     = ((%open_gui%) && (%&goto_pos_container% != "") && (%&goto_pos_container% != "NULL"));
                    log("do_open_gui : %do_open_gui%")
                    do_coord_bound  = ((%&goto_pos_min% != "NULL") && (%&goto_pos_max% != "NULL"));
                    if(%do_coord_bound%);
                        log("goto_pos_min %&goto_pos_min%, goto_pos_max %&goto_pos_max%")
                        #goto_pos_avg[] = getMiddlePointCoordRange(%&goto_pos_min%,%&goto_pos_max%);
                        #goto_pos_min[] = splitCoordString(%&goto_pos_min%);
                        #goto_pos_max[] = splitCoordString(%&goto_pos_max%);
                        
                        // Setup coordinate position points
                        if(true);
                            #goto_pos_min_x = %#goto_pos_min[0]%;
                            #goto_pos_min_y = %#goto_pos_min[1]%;
                            #goto_pos_min_z = %#goto_pos_min[2]%;
                            
                            #goto_pos_max_x = %#goto_pos_max[0]%;
                            #goto_pos_max_y = %#goto_pos_max[1]%;
                            #goto_pos_max_z = %#goto_pos_max[2]%;
                            
                            #goto_pos_avg_x = %#goto_pos_avg[0]%;
                            #goto_pos_avg_y = %#goto_pos_avg[1]%;
                            #goto_pos_avg_z = %#goto_pos_avg[2]%;
                            &goto_pos_avg   = "%#goto_pos_avg_x%|%#goto_pos_avg_y%|%#goto_pos_avg_z%";
                        endif;
                    endif;
                    
                    use_override_look = ((%do_open_gui%) && (%&goto_pos_override_look% != "NULL"));
                    if(%use_override_look%);
                        &override_look_pos[] = splitCoordString(%&goto_pos_override_look%);
                        &calc_look_x         = %&override_look_pos[0]%;
                        &calc_look_y         = %&override_look_pos[1]%;
                        &calc_look_z         = %&override_look_pos[2]%;
                    endif;
                    
                    use_chat_cancel = ((%do_open_gui%) && (%&goto_pos_chat_cancel% != "NULL"));
                    if(%use_chat_cancel%);
                        unset(%&goto_pos_chat_cancel%);
                    endif;
                    
                    #static_hub_x = -3;
                    #static_hub_y = 70;
                    #static_hub_z = -70;
                endif;
                do;
                    // Check if we should timeout and exit early
                    if(true);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            break;
                        elseif(%do_timeout%);
                            #elapsed_sec = %TIMESTAMP% - #start_time;
                            #fn_timeout  = #timeout_sec - #elapsed_sec;
                        endif;
                    endif;
                    
                    on_server = gotoServer(%&goto_pos_server%,100,%#fn_timeout%);
                    if(%on_server%);
                        // If we are on the correct server, check to see if we can exit now, or if we need to do more stuff.
                        pos_condition = !%do_coord_bound%;
                        if(%do_coord_bound%);
                            in_bounds_x   = withinBounds(%XPOS%,%#goto_pos_min_x%,%#goto_pos_max_x%);
                            in_bounds_y   = withinBounds(%YPOS%,%#goto_pos_min_y%,%#goto_pos_max_y%);
                            in_bounds_z   = withinBounds(%ZPOS%,%#goto_pos_min_z%,%#goto_pos_max_z%);
                            pos_condition = ((%in_bounds_x%) && (%in_bounds_y%) && (%in_bounds_z%));
                            debug_log(%@fn_debug%,%&script_debug_name%,"goto > in_bounds_x : %in_bounds_x%, in_bounds_y = %in_bounds_y%, in_bounds_z = %in_bounds_z%");
                        endif;
                        
                        gui_condition = !%do_open_gui%;
                        if(%do_open_gui%);
                            gui_condition = regexTest(%CONTAINERNAME%,%&goto_pos_container%);
                            log("gui_condition : %gui_condition% (%CONTAINERNAME%, %&goto_pos_container%)");
                            if(%use_chat_cancel%);
                                chat_cancel_val := "%%&goto_pos_chat_cancel%%";
                                if(%chat_cancel_val%);
                                    log("chat cancelled")
                                    break;
                                endif;
                            endif;
                        endif;
                        
                        return_boolean = ((%pos_condition%) && (%gui_condition%));
                        log("return_boolean: %return_boolean%")
                        if(!%return_boolean%);
                            if(!%pos_condition%);
                                use_baritone = %&goto_pos_server% != "SKYBLOCK_HUB";
                                
                                // If the server is HUB, check to see if it would be faster for us to /warp hub => navigate instead of just going there using Baritone.
                                if(%&goto_pos_server% == "SKYBLOCK_HUB");
                                    #curr_dist_x   = absDiff(%#goto_pos_avg_x%,%XPOS%);
                                    #curr_dist_y   = absDiff(%#goto_pos_avg_y%,%YPOS%);
                                    #curr_dist_z   = absDiff(%#goto_pos_avg_z%,%ZPOS%);
                                    #curr_sum_dist = #curr_dist_x + #curr_dist_y + #curr_dist_z;
                                    #hub_dist_x    = absDiff(%#goto_pos_avg_x%,%#static_hub_x%);
                                    #hub_dist_y    = absDiff(%#goto_pos_avg_y%,%#static_hub_y%);
                                    #hub_dist_z    = absDiff(%#goto_pos_avg_z%,%#static_hub_z%);
                                    #hub_sum_dist  = #hub_dist_x + #hub_dist_y + #hub_dist_z;
                                    use_baritone   = #hub_sum_dist >= #curr_sum_dist;
                                    
                                    &log_vars[] = split(", ","#curr_dist_x, #curr_dist_y, #curr_dist_z, #curr_sum_dist, #hub_dist_x, #hub_dist_y, #hub_dist_z, #hub_sum_dist, use_baritone");
                                    foreach(&log_vars[],&log_var,#lvi);
                                        &log_val = "%%&log_var%%";
                                        log("&7%#lvi% > %&log_var% : &d%&log_val%");
                                    next;
                                    
                                    if(!%use_baritone%);
                                        if(%do_timeout%);
                                            #elapsed_sec = %TIMESTAMP% - #start_time;
                                            #fn_timeout  = #timeout_sec - #elapsed_sec;
                                        endif;
                                        on_server = gotoServer("SKYBLOCK_HUB",100,%#fn_timeout%,true);
                                    endif;
                                endif;
                                
                                if(%use_baritone%);
                                    // Use Baritone to navigate to the "average" position.
                                    log("goto > 2154 goto_pos_avg : %&goto_pos_avg%")
                                    baritone_outcome = baritoneGoto(%&goto_pos_avg%,,%#fn_timeout%);
                                    if((%gui_condition%) && (%baritone_outcome%));
                                        return_boolean = true;
                                        break;
                                    endif;
                                endif;
                            elseif(!%gui_condition%);
                                // Attempt to open the correct Container.
                                if(!%use_override_look%);
                                    &entity_pos[] = getEntityPos(".*%&goto_pos_entity%",,5,true);
                                    &calc_look_x  = %&entity_pos[0]%;
                                    if(%&calc_look_x% == "");
                                        log("&4Unexpected Error in movement/index.txt fn#Goto: Cannot find entity with name &e%&goto_pos_entity%&4!")
                                        break;
                                    endif;
                                    &calc_look_y  = %&entity_pos[1]%;
                                    &calc_look_z  = %&entity_pos[2]%;
                                endif;
                                #calc_vars[] = fnCalcYawTo(%&calc_look_x%,%&calc_look_y%,%&calc_look_z%);
                                #calc_yaw    = %#calc_vars[0]%;
                                #calc_dist   = %#calc_vars[1]%;
                                #calc_pitch  = %#calc_vars[2]%;
                                localGUI("NONE");
                                
                                looks(%#calc_yaw%,%#calc_pitch%,"0.500");
                                key("use");
                                &init_container_string = getContainerString();
                                do(20);
                                    new_gui = enteredNewGUI(%&init_container_string%);
                                    wait("1t");
                                until(%new_gui%);
                            endif;
                        endif;
                    else;
                        // Not on Server, not really sure how to fix this ...
                        log("&4Unexpected Error in movement/index.txt fn#Goto: Not on correct Hypixel Server after attempting fn#GotoServer")
                        break;
                    endif;
                until((%return_boolean%) || (%func_timeout%));
            endif;
            
            return(%return_boolean%);
        endfunction;
    // misc/index/getNewTimeoutSec
        // Adjusts <#timeout_sec> to be <#timeout_sec> minus amount of seconds elapsed since <#start_time>.
            // Params:
                // {number} <#start_time>         Timestamp of fn start in caller script
                // {number} <#timeout_sec>        Timeout seconds passed to caller script
                // {boolean} [do_timeout=true]    Whether or not the timeout is active (if it is, the function will always
                //                                return a positive number. If it is not, it will allow <= 0 numbers).
            // Returns the new Timeout in Seconds
            // Example:
                //    #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
        function getNewTimeoutSec(#start_time,#timeout_sec,do_timeout=true);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/misc/index.txt:59
            #recursive_timeout = %#timeout_sec%;
            if(%do_timeout%);
                #recursive_timeout = %#timeout_sec% - (%TIMESTAMP% - %#start_time%);
                if(%#recursive_timeout% <= 0);
                    #recursive_timeout = 1;
                endif;
            endif;
            return(%#recursive_timeout%);
        endfunction;
    // delivery/index/getHubs
        // Gets all of the Hubs that are available to switch to.
            // Params:
                // {number} [#timeout_sec=30]    Maximum amount of Seconds Function can run for before timing out
                //
            // Returns Tunnel Joint Array Strings:
                // {string} &hub_string    0    A String of the Data representing this Hub in format <player>|<limit>|<number>|<name>
                // {string} #hub_player    1    The amount of Players on the Hub as of right now
                // {string} #hub_limit     2    The maximum amount of Players on the Hub
                // {string} #hub_number    3    The number of the Hub (1 through 28)
                // {string} &hub_name      4    The server the Hub is hosted on (e.g. mega21D)
            // Example:
                // &hubs[]        = getHubs();
                // &hub_strings[] = split("~",%&hubs[0]%);
                // #hub_players[] = split("|",%&hubs[1]%);
                // #hub_limits[]  = split("|",%&hubs[2]%);
                // #hub_numbers[] = split("|",%&hubs[3]%);
                // &hub_names[]   = split("|",%&hubs[4]%);
        function getHubs(#timeout_sec=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/delivery/index.txt:70
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&5getHubs&7";
                do_timeout         = %#timeout_sec% > 0;
                #start_time        = %TIMESTAMP%;
            endif;
            
            // Open up the Hub Selector GUI
            if(true);
                return_ready = false;
                do;
                    // 1. Check for Function Timeout
                    if(%do_timeout%);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"Function timed out!");
                            break;
                        endif;
                    endif;
                    
                    // 2. Open up the Hub Selector GUI
                    if(true);
                        #recursive_timeout = getNewTimeoutSec(%#start_time%,%#timeout_sec%,%do_timeout%);
                        in_hub_selector    = goto("HUB_SELECTOR",true,%#recursive_timeout%);
                        if(%in_hub_selector%);
                            // 3. Index all of the available Hubs
                            
                            // Iterate over Dynamic Container Slots
                            if(true);
                                #r_start = 0;
                                #r_end   = %CONTAINERSLOTS% - 37;
                                for(#r_slot,%#r_start%,%#r_end%);
                                    &r_item = getslotitemnbt(%#r_slot%,,#r_stack,#r_data,&r_nbt);
                                    &r_nbt  = strip(%&r_nbt%);
                                    if((%&r_item% != "air") && ((%&r_item% != "stained_glass_pane") || (%#r_data% != 15)));
                                        &r_name = getItemName(%&r_nbt%,%&r_item%);
                                        ifmatches(%&r_name%,"SkyBlock Hub #(\d+)",#hub_number,1);
                                            match(%&r_nbt%,"Players: (\d+)\/(\d+)",{#hub_players,#hub_limit});
                                            match(%&r_nbt%,"Server: (\w+)",&hub_server,1,"NULL");
                                            &hub_strings[] = "%#hub_players%|%#hub_limit%|%#hub_number%|%&hub_server%";
                                            #hub_players[] = %#hub_players%;
                                            #hub_limits[]  = %#hub_limit%;
                                            #hub_numbers[] = %#hub_number%;
                                            &hub_servers[] = %&hub_server%;
                                        endif;
                                    endif;
                                next;
                                
                                return_ready = true;
                            endif;
                        endif;
                    endif;
                until(%return_ready%);
            endif;
            &return_array[] = join("~",&hub_strings[]);
            &return_array[] = join("|",#hub_players[]);
            &return_array[] = join("|",#hub_limits[]);
            &return_array[] = join("|",#hub_numbers[]);
            &return_array[] = join("|",&hub_servers[]);
            return(&return_array[]);
        endfunction;
    // info/index/getServerID
        // Gets the Current Server ID.
            // REQUIRES CHATFILTER EXPRESSIONS:
                //    elseifmatches(%CHATCLEAN%,"^You are currently (?:connected to server|in) (.+)$",&current_server_id);
                //        @&current_server_id = ucase(%&current_server_id%);
                //        if(%debug%);
                //            log("&7%&script_debug_name%&7: Updated '&e@&&current_server_id&7' to '&d%@&current_server_id%&7'.");
                //        endif;
                //    elseifmatches(%CHATCLEAN%,"^Unknown command. Type \"/help\" for help.$");
                //        @chatfilter_unknown_cmd = true;
            // Params:
                // {number} [#wait_ticks=20]     Amount of Ticks to wait between actions
                // {number} [#timeout_sec=30]    Maximum amount of Seconds the Function can execute for before timing out and returning ERROR_TIMEOUT.
            // Returns the Server ID, or an Error String ENUM:
                // ERROR_TIMEOUT    Function timed out
                // ERROR_UNKNOWN    Function failed for an unknown reason
                // ERROR_COMMAND    Function failed because Command was not available on our Server somehow
        function getServerID(#wait_ticks=20,#timeout_sec=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/info/index.txt:1020
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&9getServerID&7";
                #start_time        = %TIMESTAMP%;
                do_timeout         = %#timeout_sec% > 0;
                &enum_timeout      = "ERROR_TIMEOUT";
                &enum_unknown      = "ERROR_UNKNOWN";
                &enum_command      = "ERROR_COMMAND";
            endif;
            
            // 1. Check to see if we can grab the Server ID from the Tablist and/or checking to see if we are in Limbo.
            if(true);
                // 1a. Check the Tablist
                if(true);
                    debug_log(%debug%,%&script_debug_name%,"Trying to get Server ID from SkyBlock Tablist...");
                    &server_id = getSkyBlockPlayerListInfo("SERVER");
                    &server_id = ucase(%&server_id%);
                    debug_log(%debug%,%&script_debug_name%,"Returned Server ID is '&d%&server_id%&7'.");
                    if((%&server_id% != "") && (%&server_id% != "-1"));
                        @&current_server_id = %&server_id%;
                        debug_log(%debug%,%&script_debug_name%,"Got a valid Server ID from the Tab List: '&d%&server_id%&7'. Returning it.");
                        return(%&server_id%);
                    endif;
                    debug_log(%debug%,%&script_debug_name%,"Did not get a valid Server ID from the Tab List. Checking if we are in Limbo...");
                endif;
                
                // 1b. Check if we are in Limbo
                if(true);
                    &current_gamemode = getHypixelGamemode();
                    if(%&current_gamemode% == "LIMBO");
                        debug_log(%debug%,%&script_debug_name%,"We are in Limbo. Returning '&dLIMBO&7'.");
                        @&current_server_id = "LIMBO";
                        return("LIMBO");
                    endif;
                    debug_log(%debug%,%&script_debug_name%,"We are not in Limbo. Trying /whereami Command...");
                endif;
            endif;
            
            // 2. Loop command '/whereami' until we find out what Server we are on, or we encounter an Error we cannot recover from.
            if(true);
                unset(@&current_server_id);
                unset(@chatfilter_unknown_cmd);
                #waited_ticks = 0;
                do;
                    // 1. Check for Function Timeout
                    if(%do_timeout%);
                        func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                        if(%func_timeout%);
                            debug_error(%debug%,%&script_debug_name%,"Function has timed out");
                            &return_string = %&enum_timeout%;
                            break;
                        endif;
                    endif;
                    
                    // 2. Check if we have a Server ID, or if we are on a Server where this Command is not available somehow.
                    if((%message_sent%) && ((%@&current_server_id% != "") || (%@chatfilter_unknown_cmd%)));
                        if(%@&current_server_id% != "");
                            debug_log(%debug%,%&script_debug_name%,"Got a valid Current Server ID: '&d%@&current_server_id%&7'.");
                            &return_string = %@&current_server_id%;
                        elseif(%@chatfilter_unknown_cmd%);
                            debug_error(%debug%,%&script_debug_name%,"Somehow, we cannot use the Command &4/whereami&c on whichever Server we are on.");
                            &return_string = %&enum_command%;
                        endif;
                        break;
                    endif;
                    
                    // 3. Check to see if we can send the Chat Command
                    do_command = canDoInteraction(%#waited_ticks%,%#wait_ticks%);
                    if(%do_command%);
                        echo("/whereami");
                        message_sent = true;
                    endif;
                    
                    inc(#waited_ticks);
                    wait("1t");
                until(%&return_string% != "");
            endif;
            
            debug_log(%debug%,%&script_debug_name%,"Returning: '&d%&return_string%&7'.");
            return(%&return_string%);
        endfunction;
    // delivery/index/joinHub
        // Switches the Hub Server to the specified Hub Server.
            // Params:
                // {string} &hub_server          The Server ID the Hub is hosted on.
                // {number} [#timeout_sec=30]    Maximum amount of Seconds Function can run for before timing out
            // Returns a Boolean indicating whether or not we were able to successfully swap to the Hub.
            // Example:
                //    hub_swapped = joinHub(%&hub_server%);
        function joinHub(&hub_server,#timeout_sec=30);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/delivery/index.txt:141
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&5joinHub&7";
                #start_time        = %TIMESTAMP%;
                do_timeout         = %#timeout_sec% > 0;
                &hub_server        = lcase(%&hub_server%);
            endif;
            
            do;
                // 1. Check for Function Timeout
                if(%do_timeout%);
                    func_timeout = hasTimeExceeded(%#start_time%,%#timeout_sec%,%do_timeout%);
                    if(%func_timeout%);
                        debug_error(%debug%,%&script_debug_name%,"Function timed out!");
                        break;
                    endif;
                endif;
                
                // 2. Get our Current Server ID and check if we are now on the correct Hub Server.
                if(true);
                    &current_server_id = getServerID(20,%#recursive_timeout%);
                    &current_server_id = lcase(%&current_server_id%);
                    if(%&current_server_id% == %&hub_server%);
                        debug_log(%debug%,%&script_debug_name%,"Current Server ID (&&current_server_id='&e%&current_server_id%&7') matches request.");
                        return_boolean = true;
                        break;
                    endif;
                endif;
                
                // 3. Get the Hub Servers and check to see if we can join this Hub Server.
                if(true);
                    &hub_strings[]     = getHubs(%#timeout_sec%);
                    &hub_servers[]     = split("|",%&hub_strings[4]%);
                    #hub_server_index  = indexof(&hub_servers[],,%&hub_server%);
                    if(%#hub_server_index% != -1);
                        #hub_server_slot = findItemContainer(false,"NBT: r$Server: %&hub_server%");
                        if(%#hub_server_slot% != -1);
                            &hub_server_item = getslotitemnbt(%#hub_server_slot%,,#hub_server_stack,#hub_server_data,&hub_server_nbt);
                            &hub_server_nbt  = strip(%&hub_server_nbt%);
                            match(%&hub_server_nbt%,"Players: (\d+)\/(\d+)",{#hub_online_count,#hub_limit_count});
                        endif;
                    endif;
                    
                    if((%#hub_server_slot% == -1) || (#hub_server_index% == -1) || (%#hub_online_count% >= %#hub_limit_count%));
                        debug_error(%debug%,%&script_debug_name%,"Hub Server '&4%&hub_server%&7' cannot be found or is too full to join!");
                        return_boolean = false;
                        break;
                    endif;
                    
                    if((%&hub_server_item% != "stained_hardened_clay") || (%#hub_server_data% != 14));
                        updated_gui = containerClick(%#hub_server_slot%,%#recursive_timeout%,%#tick_wait%);
                        if(%updated_gui%);
                            wait("60t");
                        endif;
                    endif;
                endif;
                
                wait("1t");
            until(%return_boolean%);
            
            debug_log(%debug%,%&script_debug_name%,"returning boolean '&d%return_boolean%&7'");
            return(%return_boolean%);
        endfunction;
//! @mkb-import-end