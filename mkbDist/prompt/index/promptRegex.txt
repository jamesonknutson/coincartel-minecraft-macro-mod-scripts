//! @mkb-import-begin
    // prompt/index/promptGetSounds
        // Takes an optional input Array of Sound Overrides, then returns an Array of Standardized Sounds to use in Prompt GUIs.
            // Params:
                // {string} [...&overrides[]]    An optional Array of Sound Overrides in Format: '<SOUND_TYPE>: <SOUND_FILE>'. Valid
                //                               SOUND_TYPE ENUMs are:
                //                               'IN'           : Sound played when entering a Prompt GUI. Defaults to 'block.piston.extend'
                //                               'OUT'          : Sound played when exiting a Prompt GUI. Defaults to 'block.piston.contract'
                //                               'GENERIC'      : Sound for generic actions (e.g. toggling an option off). Defaults to 'ui.button.click'.
                //                               'NEGATIVE_1'   : Sound played for negative feedback (e.g. disabling an option). Defaults to 'entity.villager.no'
                //                               'NEGATIVE_2'   : Negative feedback for special errors (e.g. unexpected input). Defaults to 'entity.chicken.hurt'
                //                               'POSITIVE_1'   : Sound played for positive feedback (e.g. enabling an option). Defaults to 'entity.villager.yes'
                //                               'POSITIVE_2'   : Sound played for positive feedback (e.g. when a new patch is found). Defaults to 'entity.arrow.hit_player'
                //                               'POSITIVE_3'   : Sound played for positive feedback (e.g. when a new module is accessed). Defaults to 'entity.player.levelup'
            // Returns a String Array of the Sound Values, with any overrides applied.
                // {string} &sound_in         = [0];    // The sound played when entering a GUI.
                // {string} &sound_out        = [1];    // The sound played when leaving a GUI.
                // {string} &sound_generic    = [2];    // A generic UI interaction sound.
                // {string} &sound_negative_1 = [3];    // A negative sound played for negative feedback, e.g. disabling an option.
                // {string} &sound_negative_2 = [4];    // A negative sound played for special negative feedback, e.g. unexpected error.
                // {string} &sound_positive_1 = [5];    // A positive sound played for positive feedback, e.g. enabling an option.
                // {string} &sound_positive_2 = [6];    // A positive sound played for positive feedback, e.g. when a new patch is found.
                // {string} &sound_positive_3 = [7];    // A positive sound played for positive feedback, e.g. when a new module is accessed.
            // Example:
                //    &prompt_sounds[]  = promptGetSounds();
                //    &sound_in         = %&prompt_sounds[0]%;
                //    &sound_out        = %&prompt_sounds[1]%;
                //    &sound_generic    = %&prompt_sounds[2]%;
                //    &sound_negative_1 = %&prompt_sounds[3]%;
                //    &sound_negative_2 = %&prompt_sounds[4]%;
                //    &sound_positive_1 = %&prompt_sounds[5]%;
                //    &sound_positive_2 = %&prompt_sounds[6]%;
                //    &sound_positive_3 = %&prompt_sounds[7]%;
        function promptGetSounds(...&overrides[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/prompt/index.txt:55
            &sound_in         = "block.piston.extend";
            &sound_out        = "block.piston.contract";
            &sound_generic    = "ui.button.click";
            &sound_negative_1 = "entity.villager.no";
            &sound_negative_2 = "entity.chicken.hurt";
            &sound_positive_1 = "entity.villager.yes";
            &sound_positive_2 = "entity.arrow.hit_player";
            &sound_positive_3 = "entity.player.levelup";
            foreach(&overrides[],&override,#o);
                ifmatches(%&override%,"^(\w+): (.+)$");
                    match(%&override%,"^(\w+): (.+)$",{&sound_key,&sound_val});
                    &sound_key = lcase(%&sound_key%);
                    &sound_var = "&sount_%&sound_key%";
                    set(%&sound_var%,%&sound_val%);
                endif;
            next;
            return(%&sound_in%,%&sound_out%,%&sound_generic%,%&sound_negative_1%,%&sound_negative_2%,%&sound_positive_1%,%&sound_positive_2%,%&sound_positive_3%);
        endfunction;
    // prompt/index/promptRegex
        // Prompts the User to type an input, then validates it against a Regular Expression.
            // Params:
                // {string} <&expression>      The Regular Expression to match the User's Input against.
                // {string} [...&options[]]    Optional Array of `<ENUM>: <VALUE>` pairs to dictate what restrictions to place
                //                             on the User's Response, and how the Function should behave. Valid Settings are:
                //                                 PROMPT          [{string}]         The Prompt String to show in the GUI. Will replace /(?<=&)&[\da-fk-or]/ with Section Symbol.
                //                                 DEFAULT         [{string}]         Default Value to return if the User exits the GUI.
                //                                 SOUND           [{boolean}]        Whether or not to play Sounds in the Menu.
                //                                 <SOUND_TYPE>    [{<SOUND_FILE}]    Sound Overrides to pass along to `promptGetSounds();` if we are playing Sounds.
                //                                 EXIT            [{boolean}]        Whether or not to Return after the User provides an invalid response or to keep looping
                //                                                                    with an Error Message to instruct them on how to correct their input. If TRUE, will Exit.
                //                                 HINT            [{string}]         The 'Hint' to show to the User in the Prompt GUI.
                //                             The Default Settings used for each Key are:
                //                                 PROMPT     "Type your Input"
                //                                 DEFAULT    ""
                //                                 SOUND      true
                //                                 EXIT       false
                //                                 HINT       "input"
            // Returns the String that the User selected, or the DEFAULT value
            // if the User exited the GUI / provided an invalid response.
            // Example:
                //    &input = promptRegex("^https:","prompt: What is your Discord Webhook URL?","default: %@&discord_url%","hint: URL");
        function promptRegex(&expression,...&options[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/prompt/index.txt:429
            // Setup Function Defaults
            if(true);
                &prompt  = "Type your Input";
                &default = "";
                &sound   = true;
                &exit    = false;
                &hint    = "input";
                
                // Parse Option Overrides
                foreach(&options[],&option,#o);
                    ifmatches(%&option%,"^(prompt|default|sound|exit|hint):\s*(.+)$");
                        match(%&option%,"^(prompt|default|sound|exit|hint):\s*(.+)$",{&option_key,&option_val});
                        &option_var = lcase("&%&option_key%");
                        set(%&option_var%,%&option_val%);
                    endif;
                next;
                
                // Do additional post-processing before prompting the User for Input
                if(true);
                    sound      := %&sound%;
                    error_exit := %&exit%;
                    
                    // Setup Sounds
                    if(%sound%);
                        &prompt_sounds[]  = promptGetSounds(...&options[]);
                        &sound_in         = %&prompt_sounds[0]%;
                        &sound_out        = %&prompt_sounds[1]%;
                        &sound_generic    = %&prompt_sounds[2]%;
                        &sound_negative_1 = %&prompt_sounds[3]%;
                        &sound_negative_2 = %&prompt_sounds[4]%;
                        &sound_positive_1 = %&prompt_sounds[5]%;
                        &sound_positive_2 = %&prompt_sounds[6]%;
                        &sound_positive_3 = %&prompt_sounds[7]%;
                    endif;
                    
                    // Parse Prompt String
                    if(true);
                        &color_char     = char("167");
                        &expr_unescaped = "(?<!&)&(?=[\da-fk-or])";
                        &expr_escaped   = "&&(?=[\da-fk-or])";
                        &prompt         = regexreplace(&prompt,%&expr_unescaped%,%&color_char%);
                        &prompt         = regexreplace(&prompt,%&expr_escaped%,"&");
                    endif;
                    
                    // Ensure that the Input Hint is valid.
                    ifmatches(%&hint%,"[^a-z0-9]");
                        &hint = "selection";
                    elseif(%&hint% == "");
                        &hint = "selection";
                    endif;
                endif;
            endif;
            
            // Loop prompt calls until we have a return value
            if(true);
                &selections = join(",",&validated_selections[]);
                do;
                    if(%sound%);
                        playsound(%&sound_in%);
                    endif;
                    &response = prompt(,"$$[%&hint%]",%&prompt%,true,"Exit Menu");
                    &response = strip(%&response%);
                    if((%&response% == "exit menu") || (%&response% == ""));
                        if(%sound%);
                            playsound(%&sound_out%,"25");
                        endif;
                        &return_string = %&default%;
                        break;
                    elseifmatches(%&response%,%&expression%);
                        if(%sound%);
                            playsound(%&sound_positive_1%,"25");
                        endif;
                        &return_string = %&response%;
                        break;
                    endif;
                    
                    if(%sound%);
                        playsound(%&sound_negative_1%,"25");
                    endif;
                    
                    log("&4Error: &cThe string you typed ('%&response%') is not valid for this input.");
                    
                    if(%error_exit%);
                        &return_string = %&default%;
                        break;
                    endif;
                until(%&return_string% != "");
            endif;
            return(%&return_string%);
        endfunction;
//! @mkb-import-end