//! @mkb-import-begin
    // debug/index/debug_error
        // Logs a message to chat with an error prefix.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_error(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:49
            // &matcher       = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement   = "&$1";
            // &string        = regexreplace(&string,%&matcher%,%&replacement%);
            &error_message = "&4Error > &c%&string%";
            &error_message = regexreplace(&error_message,"&7","&c");
            &error_message = "&7%&script_debug_name%&7: %&error_message%";
            if(%debug_enabled%);
                log(%&error_message%);
            endif;
            return(%&error_message%);
        endfunction;
    // string/index/convertENote
        // Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
            // Params:
                // {string} <&enote_string>    The E. Notation Number string to convert.
                //
            // Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
            // the input string is returned as-is.
        function convertENote(&convert_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:172
            debug              = true;
            &script_debug_name = "&9convertENote&7";
            &convert_string    = replace(&convert_string,",");
            &return_string     = %&convert_string%;
            ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
                match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
                output_negative   = %&m_sign_num% == "-";
                exponent_negative = %&m_sign_exponent% == "-";
                
                // Convert Scientific Notation to a Real Number
                // Multiply the decimal number by 10 raised to the power indicated.
                // 3.456 x 10^4  = 3.456 x 10,000 = 34560
                // 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
                //
                
                //    Convert Scientific Notation without a Calculator
                //    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
                //    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
                //    way to convert to decimal without solving the equation.
                //
                //    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
                //    value in the exponent.
                //
                //    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
                //    is negative, then move the decimal point to the left.
                //
                //    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
                //
                //    1.5 × 10^2 = 15.0  × 10^1
                //    1.5 × 10^2 = 150.0 × 10^0
                //    1.5 × 10^2 = 150.0
                
                //    For a Positive Exponent (moving decimal point to the right)
                    //    1.396       x    10^6    =    13.96        x 10^5
                    //    13.96       x    10^5    =    139.6        x 10^4
                    //    139.6       x    10^4    =    1396.0       x 10^3
                    //    1396.0      x    10^3    =    13960.0      x 10^2
                    //    13960.0     x    10^2    =    139600.0     x 10^1
                    //    139600.0    x    10^1    =    1396000.0    x 10^0
                    //    1.396       x    10^6    =    1396000.0
                //    For a Negative Exponent (moving decimal point to the left)
                    //    1.396          x    10^-6    = 0.1396         x    10^-5
                    //    0.1396         x    10^-5    = 0.01396        x    10^-4
                    //    0.01396        x    10^-4    = 0.001396       x    10^-3
                    //    0.001396       x    10^-3    = 0.0001396      x    10^-2
                    //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
                    //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
                    //    0.000001396    x    10^-6    = 0.000001396
                
                #m_exponent_num  := %&m_exponent_num%;
                &m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
                &m_joint_chars[]  = split("",%&m_joint_chars%);
                do(%#m_exponent_num%);
                    #m_joint_chars_sz   = arraysize(&m_joint_chars[]);
                    #m_joint_chars_len  = %#m_joint_chars_sz% - 1;
                    #curr_decimal_idx   = indexof(&m_joint_chars[],,".");
                    if(!%exponent_negative%);
                        #next_decimal_idx = %#curr_decimal_idx% + 1;
                        if(%#next_decimal_idx% <= %#m_joint_chars_len%);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        endif;
                    else;
                        #next_decimal_idx = %#curr_decimal_idx% - 1;
                        if(%#next_decimal_idx% >= 0);
                            &m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
                            &m_joint_chars[%#next_decimal_idx%] = ".";
                        else;
                            unset(&tmp_joint_chars[]);
                            &m_joint_chars[%#curr_decimal_idx%] = "0";
                            push(&tmp_joint_chars[],".",&m_joint_chars[*]);
                            unset(&m_joint_chars[]);
                            push(&m_joint_chars[],&tmp_joint_chars[*]);
                        endif;
                    endif;
                loop;
                &return_string = join("",&m_joint_chars[]);
                &return_string = regexreplace(&return_string,"\.0*$");
                &return_string = regexreplace(&return_string,"^\.","0.");
                &return_string = "%&m_sign_num%%&return_string%";
            endif;
            return(%&return_string%);
        endfunction;
    // debug/index/debug_log
        // Logs a message to chat if debug is enabled.
            // Params:
            //      <boolean> debug_enabled      : The debug condition (if true, will log).
            //      <string>  &script_debug_name : The prefix for the debug log
            //      <string>  &string            : The debug message to print to chat
            //
            // Returns the printed message.
            //
        function debug_log(debug_enabled=true,&script_debug_name="&8DEBUG_LOG&7",&string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/debug/index.txt:30
            // &matcher     = "(?-i)(?<!&)(&[a-fk-r])(?=[a-z0-9_-]+)";
            // &replacement = "&$1";
            // &string      = regexreplace(&string,%&matcher%,%&replacement%);
            &out_string  = "&7%&script_debug_name%&7: %&string%";
            if(%debug_enabled%);
                log(%&out_string%);
            endif;
            return(%&out_string%);
        endfunction;
    // string/index/xEval
        // Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
            // Params:
                // {string} <&expression>              The arithmetic expression to evaluate with `eval`.
                // {boolean} [coerce_integer=false]    If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
            // Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
        function xEval(&expression,coerce_integer=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:276
            debug              = false;
            &script_debug_name = "&9xEval&7";
            debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
            &return_string     = eval(%&expression%);
            debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
            &return_string     = convertENote(%&return_string%);
            debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
            if(%coerce_integer%);
                debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
                &return_string = formatnumber(%&return_string%,0,true);
            endif;
            debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
            return(%&return_string%);
        endfunction;
    // string/index/xFormatNumber
        // Identical to original `formatnumber`, but passes the input_string through `convertENote` before passing it into `formatnumber`.
            // Params:
                // {string} <&input_string>          The Number or String to Format into a Number. If this Number includes Commas, they will be stripped
                //                                   from the string passed to `formatnumber`.
                // {string} [&decimal_precision]     The desired level of precision following the decimal. If omitted or an empty string, will
                //                                   include the amount of decimals included in the <&input_string>. If provided, should be an integer >= 0.
                //                                   If set to 0, will not include a decimal character or trail at all. Providing a value that is incoherent
                //                                   to the level of decimal precision present in the <&input_string> will result in the output being rounded
                //                                   to the desired level of precision.
                // {boolean} [strip_commas=false]    Whether or not to strip commas when formatting the Number. If set to True, and [&decimal_precision]
                //                                   is set to "0", this Function will return a valid Integer.
            // Returns the result of the `formatnumber` expression.
            // Examples:
                // Converting a formatted string Number to a valid Integer:
                    //    &input_string      = "1009.0131";
                    //    &decimal_precision = "0";
                    //    strip_commas       = true;
                    //    #output_integer    = xFormatNumber(%&input_string%,%&decimal_precision%,%strip_commas%);
                // Converting a valid Integer to a formatted (comma split) string:
                    //    &input_string      = "10000";
                    //    &decimal_precision = "";
                    //    strip_commas       = false;
                    //    &output_string     = xFormatNumber(%&input_string%,%&decimal_precision%,%strip_commas%);
        function xFormatNumber(&input_string,&decimal_precision,strip_commas=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:315
            &return_string = replace(&input_string,",");
            &return_string = convertENote(%&return_string%);
            &return_string = formatnumber(%&return_string%,%&decimal_precision%,%strip_commas%);
            return(%&return_string%);
        endfunction;
    // math/index/floatWithinBounds
        // Checks if <&check_float> is greater than or equal to the minimum bound and less than or equal to the maximum bound.
            // Params:
                // {string} <&check_float>    The Float to Check. Can be any Number, Float or Integer.
                // {string} <&max_bound>      The maximum boundary. Can be any Number, Float or Integer.
                // {string} <&min_bound>      The minimum boundary. Can be any Number, Float or Integer.
            // Returns a boolean indicating whether or not the Float is within the Boundaries.
            // Example:
                //    &check_float = "10.091";
                //    &max_bound   = "10";
                //    &min_bound   = "-50.10";
                //    in_bounds    = floatWithinBounds(%&check_float%,%&max_bound%,%&min_bound%);
                //    log(%in_bounds%); // 'false'
        function floatWithinBounds(&check_float,&max_bound,&min_bound);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/math/index.txt:120
            debug              = true;
            &script_debug_name = "&6floatWithinBounds&7";
            debug_log(%debug%,%&script_debug_name%,"Checking if float '%&check_float%' is <= '%&max_bound%' and >= '%&min_bound%'.");
            &check_float       = xFormatNumber(%&check_float%,"",true);
            &max_bound         = xFormatNumber(%&max_bound%,"",true);
            &min_bound         = xFormatNumber(%&min_bound%,"",true);
            if((%&check_float% == %&max_bound%) || (%&check_float% == %&min_bound%));
                return_boolean = true;
            else;
                &diff_max = xEval("%&max_bound% - %&check_float%");
                &diff_min = xEval("%&check_float% - %&min_bound%");
                ifmatches(%&diff_max%,"^-");
                    return_boolean = false
                elseifmatches(%&diff_min%,"^-");
                    return_boolean = false
                else;
                    return_boolean = true;
                endif;
            endif;
            
            if(%return_boolean%);
                debug_log(%debug%,%&script_debug_name%,"float '%&check_float%' is within the bounds of '%&max_bound%' and '%&min_bound%'.");
            else;
                debug_error(%debug%,%&script_debug_name%,"float '%&check_float%' is not within the bounds of '%&max_bound%' and '%&min_bound%'.");
            endif;
            return(%return_boolean%);
        endfunction;
    // string/index/convertMetricString
        // Takes an input of a string with metric numbers in it (e.g. '10K, '10.5M', etc) and parses out the metric character
        // then converts the input into a number and returns it. Supports K, M, B, T suffixes.
            // Params:
                // {string} <&metric_string>               The String to Parse
                // {number} [#decimal_precision=-1]        Amount of sig. figs to round the conversion off to. If set to <= -1, will just
                //                                         format the number as-is (it will keep as many decimal places as it had in the first place).
                // {boolean} [format_with_commas=false]    Whether or not to format the conversion with commas every 3 characters.
            // Returns an Empty String if no conversion were able to be done, or a (possibly formatted) Number otherwise.
            // Example:
                //    #converted_units = convertMetricString("10K",2,true);
                //    log(%#converted_units%); // 10,000.00
        function convertMetricString(&metric_string,#decimal_precision=-1,format_with_commas=false);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:529
            &base_expression = "([\d,.-]+)(?:.*?\b|\B)";
            &metric_chars[]  = split(", ","K, M, B, T");
            &metric_ratio[]  = split(", ","1000, 1000000, 1000000000, 1000000000000");
            &return_string   = "0";
            match_found      = false;
            foreach(&metric_chars[],&metric_char,#mc);
                &metric_expr = "%&base_expression%%&metric_char%";
                ifmatches(%&metric_string%,%&metric_expr%,&amount_units,1);
                    match_found    = true
                    &amount_units  = replace(&amount_units,",");
                    &return_string = xEval("%&return_string% + (%&amount_units% * %&metric_ratio[%#mc%]%)");
                endif;
            next;
            
            if(%match_found%);
                strip_commas = !%format_with_commas%;
                if(%#decimal_precision% <= -1);
                    &return_string = xFormatNumber(%&return_string%,"",%strip_commas%);
                else;
                    &return_string = xFormatNumber(%&return_string%,%#decimal_precision%,%strip_commas%);
                endif;
                return(%&return_string%);
            else;
                return("");
            endif;
        endfunction;
    // prompt/index/promptGetSounds
        // Takes an optional input Array of Sound Overrides, then returns an Array of Standardized Sounds to use in Prompt GUIs.
            // Params:
                // {string} [...&overrides[]]    An optional Array of Sound Overrides in Format: '<SOUND_TYPE>: <SOUND_FILE>'. Valid
                //                               SOUND_TYPE ENUMs are:
                //                               'IN'           : Sound played when entering a Prompt GUI. Defaults to 'block.piston.extend'
                //                               'OUT'          : Sound played when exiting a Prompt GUI. Defaults to 'block.piston.contract'
                //                               'GENERIC'      : Sound for generic actions (e.g. toggling an option off). Defaults to 'ui.button.click'.
                //                               'NEGATIVE_1'   : Sound played for negative feedback (e.g. disabling an option). Defaults to 'entity.villager.no'
                //                               'NEGATIVE_2'   : Negative feedback for special errors (e.g. unexpected input). Defaults to 'entity.chicken.hurt'
                //                               'POSITIVE_1'   : Sound played for positive feedback (e.g. enabling an option). Defaults to 'entity.villager.yes'
                //                               'POSITIVE_2'   : Sound played for positive feedback (e.g. when a new patch is found). Defaults to 'entity.arrow.hit_player'
                //                               'POSITIVE_3'   : Sound played for positive feedback (e.g. when a new module is accessed). Defaults to 'entity.player.levelup'
            // Returns a String Array of the Sound Values, with any overrides applied.
                // {string} &sound_in         = [0];    // The sound played when entering a GUI.
                // {string} &sound_out        = [1];    // The sound played when leaving a GUI.
                // {string} &sound_generic    = [2];    // A generic UI interaction sound.
                // {string} &sound_negative_1 = [3];    // A negative sound played for negative feedback, e.g. disabling an option.
                // {string} &sound_negative_2 = [4];    // A negative sound played for special negative feedback, e.g. unexpected error.
                // {string} &sound_positive_1 = [5];    // A positive sound played for positive feedback, e.g. enabling an option.
                // {string} &sound_positive_2 = [6];    // A positive sound played for positive feedback, e.g. when a new patch is found.
                // {string} &sound_positive_3 = [7];    // A positive sound played for positive feedback, e.g. when a new module is accessed.
            // Example:
                //    &prompt_sounds[]  = promptGetSounds();
                //    &sound_in         = %&prompt_sounds[0]%;
                //    &sound_out        = %&prompt_sounds[1]%;
                //    &sound_generic    = %&prompt_sounds[2]%;
                //    &sound_negative_1 = %&prompt_sounds[3]%;
                //    &sound_negative_2 = %&prompt_sounds[4]%;
                //    &sound_positive_1 = %&prompt_sounds[5]%;
                //    &sound_positive_2 = %&prompt_sounds[6]%;
                //    &sound_positive_3 = %&prompt_sounds[7]%;
        function promptGetSounds(...&overrides[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/prompt/index.txt:55
            &sound_in         = "block.piston.extend";
            &sound_out        = "block.piston.contract";
            &sound_generic    = "ui.button.click";
            &sound_negative_1 = "entity.villager.no";
            &sound_negative_2 = "entity.chicken.hurt";
            &sound_positive_1 = "entity.villager.yes";
            &sound_positive_2 = "entity.arrow.hit_player";
            &sound_positive_3 = "entity.player.levelup";
            foreach(&overrides[],&override,#o);
                ifmatches(%&override%,"^(\w+): (.+)$");
                    match(%&override%,"^(\w+): (.+)$",{&sound_key,&sound_val});
                    &sound_key = lcase(%&sound_key%);
                    &sound_var = "&sount_%&sound_key%";
                    set(%&sound_var%,%&sound_val%);
                endif;
            next;
            return(%&sound_in%,%&sound_out%,%&sound_generic%,%&sound_negative_1%,%&sound_negative_2%,%&sound_positive_1%,%&sound_positive_2%,%&sound_positive_3%);
        endfunction;
    // string/index/convertToMetric
        // Takes an input of a Number String and formats it into a Metric String (K, M, B, or T as suffix).
            // Params:
                // {string} <&convert_string>         The Number String to convert.
                // {number} [#decimal_precision=1]    Amount of sig. figs to round the conversion off to. If set to <= -1, will just
                //                                    format the number as-is (it will keep as many decimal places as it had in the first place).
            // Returns a String.
            // Example:
                //    &metric_string = convertToMetric("151091.501",1);
                //    log(%&metric_string%); // 151.1 K
        function convertToMetric(&convert_string,#decimal_precision=1);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:566
            // Setup Function Variables
            if(true);
                debug              = true;
                &script_debug_name = "&9convertToMetric&7";
                debug_log(%debug%,%&script_debug_name%,"called, args are &&convert_string='&e%&convert_string%&7', #decimal_precision=&e%#decimal_precision%");
            endif;
            &metric_chars[] = split(", ","K, M, B, T");
            &metric_ratio[] = split(", ","1000, 1000000, 1000000000, 1000000000000");
            &return_string  = %&convert_string%;
            ifmatches(%&convert_string%,"^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)",&integer_portion,2);
                log("&7matched expression '&d^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)&7' against string ")
                #component_a_len = strlen(%&integer_portion%);
                debug_log(%debug%,%&script_debug_name%,"matched expression '&d^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)&7' against &&convert_string='&e%&convert_string%&7', extracted &&integer_portion='&e%&integer_portion%&7' with length=&e%#component_a_len%&7.");
                #metric_index    = -1;
                foreach(&metric_ratio[],&metric_ratio,#mr);
                    #metric_ratio_len = strlen(%&metric_ratio%);
                    if(%#component_a_len% >= %#metric_ratio_len%);
                        debug_log(%debug%,%&script_debug_name%,"metric_ratio_len=&e%#metric_ratio_len%&7 >= #component_a_len=&e%#component_a_len%&7, setting metric_index=&e%#mr%");
                        #metric_index = %#mr%;
                    endif;
                next;
                
                if(%#metric_index% >= 0);
                    &metric_char   = %&metric_chars[%#metric_index%]%;
                    &metric_ratio  = %&metric_ratio[%#metric_index%]%;
                    &return_string = xEval("%&convert_string% / %&metric_ratio%");
                    if(%#decimal_precision% <= -1);
                        &return_string = xFormatNumber(%&return_string%);
                    else;
                        &return_string = xFormatNumber(%&return_string%,%#decimal_precision%);
                    endif;
                    &return_string = "%&return_string% %&metric_char%";
                endif;
            endif;
            return(%&return_string%);
        endfunction;
    // string/index/isStringFormattedNumber
        // Checks if a String is a valid Float/Number (with commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Formatted Number.
        function isStringFormattedNumber(&check_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:80
            ifmatches(%&check_string%,"^[\d-]+,[\d.,-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
    // string/index/isStringInteger
        // Checks if a String is a valid Integer.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Integer.
        function isStringInteger(&check_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:58
            ifmatches(%&check_string%,"^[0-9-]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
    // string/index/isStringFloat
        // Checks if a String is a valid Float (without commas).
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringFloat(&check_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:69
            ifmatches(%&check_string%,"^[0-9-]*\.[0-9]+$");
                bool = true
            endif;
            return(%bool%);
        endfunction;
    // string/index/isStringNumber
        // Checks if a String is a valid Number, coercable to a Float of some sort.
            // Params:
                // {string} <&check_string> The String to Check
            // Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
        function isStringNumber(&check_string);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/string/index.txt:91
            &call_functions[] = split(", ","isStringInteger, isStringFloat, isStringFormattedNumber");
            foreach(&call_functions[],&call_function,#cfi);
                if(%&call_function% == "isStringInteger");
                    return_boolean = isStringInteger(%&check_string%);
                elseif(%&call_function% == "isStringFloat");
                    return_boolean = isStringFloat(%&check_string%);
                elseif(%&call_function% == "isStringFormattedNumber");
                    return_boolean = isStringFormattedNumber(%&check_string%);
                endif;
                if(%return_boolean%);
                    break;
                endif;
            next;
            return(%return_boolean%);
        endfunction;
    // prompt/index/promptNumber
        // Prompts the User to provide a Custom Number.
            // Params:
                // {string}  [...&options[]]    Optional Array of `<ENUM>: <VALUE>` pairs to dictate what restrictions to place
                //                              on the User's Response, and how the Function should behave. Valid Settings are:
                //                                  PROMPT          [{string}]          The Prompt String to show in the GUI. Will replace /(?<=&)&[\da-fk-or]/ with Section Symbol.
                //                                  DEFAULT         [{string}]          Default Value to return if the User exits the GUI.
                //                                  FLOAT           [{boolean}]         Whether or not to accept Floating Point Numbers in the User's Response.
                //                                  SOUND           [{boolean}]         Whether or not to play Sounds in the Menu.
                //                                  <SOUND_TYPE>    [{<SOUND_FILE}]     Sound Overrides to pass along to `promptGetSounds();` if we are playing Sounds.
                //                                  MIN             [{number|float}]    Minimum number to accept from the User. If omitted, will not validate a min boundary.
                //                                  MAX             [{number|float}]    Maximum number to accept from the User. If omitted, will not validate a max boundary.
                //                                  EXIT            [{boolean}]         Whether or not to Return after the User provides an invalid response or to keep looping
                //                                                                      with an Error Message to instruct them on how to correct their input. If TRUE, will Exit.
                //                                  HINT            [{string}]          The 'Hint' to show to the User in the Prompt GUI.
                //                              The Default Settings used for each Key are:
                //                                  PROMPT     "Provide an Integer"
                //                                  DEFAULT    ""
                //                                  FLOAT      false
                //                                  SOUND      true
                //                                  EXIT       false
                //                                  HINT       number
            // Returns the Number provided by the User if their response passed validations,
            // or the DEFAULT value if the User exited the GUI / provided an invalid response.
            // Example:
                // #min_delay = promptNumber("prompt: How long to wait between actions? Current Value: &e%#min_delay%","default: %#min_delay%","min: 0","max: 20");
        function promptNumber(...&options[]);
            // File: G:/G_DRIVE_CODE/mkbFunctionExporterNew/mkbSource/prompt/index.txt:100
            // Setup Function Defaults
            if(true);
                &sound   = true;
                &float   = false;
                &exit    = false;
                &default = "";
                &hint    = "integer";
                &prompt  = "Provide an Integer";
                &min     = "";
                &max     = "";
                
                // Override Defaults with Parameters Passed
                foreach(&options[],&option,#o);
                    ifmatches(%&option%,"^(prompt|default|float|sound|min|max|exit|hint):\s*?\b(.*)$");
                        match(%&option%,"^(prompt|default|float|sound|min|max|exit|hint):\s*?\b(.*)$",{&option_key,&option_value});
                        &option_var = lcase("&%&option_key%");
                        set(%&option_var%,%&option_value%);
                    endif;
                next;
                
                // Do additional post-processing before prompting the User for Input
                if(true);
                    sound      := %&sound%;
                    float      := %&float%;
                    error_exit := %&exit%;
                    
                    // Setup Min and/or Max Bounds
                    if(true);
                        min = isStringNumber(%&min%);
                        max = isStringNumber(%&max%);
                        if(%min%);
                            &min            = replace(&min,",");
                            &min_string     = xFormatNumber(%&min%);
                            &min_string     = convertToMetric(%&min_string%);
                            &bound_string[] = "&9greater than&c or equal to &b%&min_string%&c";
                        endif;
                        if(%max%);
                            &max            = replace(&max,",");
                            &max_string     = xFormatNumber(%&max%);
                            &max_string     = convertToMetric(%&max_string%);
                            &bound_string[] = "&eless than&c or equal to &6%&max_string%&c";
                        endif;
                        &bound_string = join(", and ",&bound_string[]);
                        
                        if((%min%) && (!%max%));
                            &max = "99999999999999999999999999";
                        elseif((!%min%) && (%max%));
                            &min = "-99999999999999999999999999";
                        endif;
                    endif;
                    
                    // Setup Sounds
                    if(%sound%);
                        &prompt_sounds[]  = promptGetSounds(...&options[]);
                        &sound_in         = %&prompt_sounds[0]%;
                        &sound_out        = %&prompt_sounds[1]%;
                        &sound_generic    = %&prompt_sounds[2]%;
                        &sound_negative_1 = %&prompt_sounds[3]%;
                        &sound_negative_2 = %&prompt_sounds[4]%;
                        &sound_positive_1 = %&prompt_sounds[5]%;
                        &sound_positive_2 = %&prompt_sounds[6]%;
                        &sound_positive_3 = %&prompt_sounds[7]%;
                    endif;
                    
                    // Parse Prompt String
                    if(true);
                        &color_char     = char("167");
                        &expr_unescaped = "(?<!&)&(?=[\da-fk-or])";
                        &expr_escaped   = "&&(?=[\da-fk-or])";
                        &prompt         = regexreplace(&prompt,%&expr_unescaped%,%&color_char%);
                        &prompt         = regexreplace(&prompt,%&expr_escaped%,"&");
                    endif;
                    
                    // Setup the 'Valid Number' string to show on Error.
                    if(%float%);
                        &valid_number = "Number";
                    else;
                        &valid_number = "Integer";
                    endif;
                    
                    // Ensure that the Input Hint is valid.
                    ifmatches(%&hint%,"[^a-z0-9]");
                        &hint = lcase(%&valid_number%);
                    elseif(%&hint% == "");
                        &hint = lcase(%&valid_number%);
                    endif;
                endif;
            endif;
            
            // Start looping prompts until we get a valid response from the User, or we hit an Error we cannot recover from.
            if(true);
                do;
                    if(%sound%);
                        playsound(%&sound_in%,"25");
                    endif;
                    &response = prompt(,"$$[%&hint%]",%&prompt%,true,"Exit Menu");
                    &response = lcase(%&response%);
                    &response = strip(%&response%);
                    &response = trim(%&response%);
                    &response = replace(&response,",");
                    if((%&response% == "exit menu") || (%&response% == ""));
                        if(%sound%);
                            playsound(%&sound_out%);
                        endif;
                        &return_string = %&default%;
                        break;
                    else;
                        &parsed = convertMetricString(%&response%)
                        if(%float%);
                            num_valid = isStringNumber(%&parsed%);
                        else;
                            num_valid = isStringInteger(%&parsed%);
                        endif;
                        
                        if(%num_valid%);
                            if((%min%) || (%max%));
                                num_valid = floatWithinBounds(%&parsed%,%&max%,%&min%);
                            endif;
                            
                            if(%num_valid%);
                                if(%sound%);
                                    playsound(%&sound_positive_1%,"25");
                                endif;
                                &return_string = %&parsed%;
                                break;
                            else;
                                if(%sound%);
                                    playsound(%&sound_negative_1%,"25");
                                endif;
                                
                                log("&4Error: &cYour response (you typed: '&4%&response%&c') is outside the accepted boundaries of %&bound_string%&c.");
                                
                                if(%error_exit%);
                                    &return_string = %&default%;
                                    break;
                                endif;
                            endif;
                        else;
                            if(%sound%);
                                playsound(%&sound_negative_1%,"25");
                            endif;
                            
                            log("&4Error: &cYou did not provide a valid %&valid_number% (you typed: '&4%&response%&c').");
                            
                            if(%error_exit%);
                                &return_string = %&default%;
                                break;
                            endif;
                        endif;
                    endif;
                while(%&return_string% == "");
            endif;
            return(%&return_string%);
        endfunction;
//! @mkb-import-end