// string/index.txt
	// Counts occurences of a given string within another string.
		// Params:
		//		<string> &source_string : The string to count occurences of &search_string in.
		//		<string> &search_string : The string to count occurences of.
		//
		// Returns the integer amount of occurences found.
	function countOccurencesInString(&source_string,&search_string);
		&script_debug_name  = "&9countOccurencesInString&7";
		debug               = false;
		ifcontains(%&source_string%,%&search_string%);
			&split_source_arr[] = split(%&search_string%,%&source_string%);
			#occurences         = arraysize(&split_source_arr[]);
			if(%#occurences% == 0); // source string exclusively held repetitions of the search string
				#source_length = strlen(%&source_string%);
				#search_length = strlen(%&search_string%);
				#occurences    = %#source_length% / %#search_length%;
			endif;
		endif;
		return(%#occurences%);
	endfunction;
	
	// Checks if a string matches UUID regex.
		// Params:
		//		<string> &check_string : The string to check
		//
		// Returns a boolean.
		//
	function isStringUUID(&check_string);
		&script_debug_name = "&9isStringUUID&7";
		debug              = false;
		&split_uuid_expr   = "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$";
		&joint_uuid_expr   = "^[a-f0-9]{32}$";
		&uuid_exprs[]      = split(", ","%&split_uuid_expr%, %&joint_uuid_expr%");
		foreach(&uuid_exprs[],&uuid_expr);
			ifmatches(%&check_string%,%&uuid_expr%);
				match_found = true;
				break;
			endif;
		next;
		return(%match_found%);
	endfunction;
	
	// Checks if a string matches Boolean regex
		// Params:
			// {string} <&check_string>	The String to Check
		// Returns a Boolean
	function isStringBoolean(&check_string);
		&check_string_lcase = lcase(%&check_string%);
		&boolean_values[]   = split(", ","true, false, 1, 0");
		return_boolean      = arrayincludes(&boolean_values[],%&check_string_lcase%);
		return(%return_boolean%);
	endfunction;
	
	// Checks if a String is a valid Integer.
		// Params:
			// {string} <&check_string> The String to Check
		// Returns a Boolean indicating whether or not the String can be coerced to a valid Integer.
	function isStringInteger(&check_string);
		ifmatches(%&check_string%,"^[0-9-]+$");
			bool = true
		endif;
		return(%bool%);
	endfunction;
	
	// Checks if a String is a valid Float (without commas).
		// Params:
			// {string} <&check_string> The String to Check
		// Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
	function isStringFloat(&check_string);
		ifmatches(%&check_string%,"^[0-9-]*\.[0-9]+$");
			bool = true
		endif;
		return(%bool%);
	endfunction;
	
	// Checks if a String is a valid Float/Number (with commas).
		// Params:
			// {string} <&check_string> The String to Check
		// Returns a Boolean indicating whether or not the String can be coerced to a valid Formatted Number.
	function isStringFormattedNumber(&check_string);
		ifmatches(%&check_string%,"^[\d-]+,[\d.,-]+$");
			bool = true
		endif;
		return(%bool%);
	endfunction;
	
	// Checks if a String is a valid Number, coercable to a Float of some sort.
		// Params:
			// {string} <&check_string> The String to Check
		// Returns a Boolean indicating whether or not the String can be coerced to a valid Float.
	function isStringNumber(&check_string);
		&call_functions[] = split(", ","isStringInteger, isStringFloat, isStringFormattedNumber");
		foreach(&call_functions[],&call_function,#cfi);
			if(%&call_function% == "isStringInteger");
				return_boolean = isStringInteger(%&check_string%);
			elseif(%&call_function% == "isStringFloat");
				return_boolean = isStringFloat(%&check_string%);
			elseif(%&call_function% == "isStringFormattedNumber");
				return_boolean = isStringFormattedNumber(%&check_string%);
			endif;
			if(%return_boolean%);
				break;
			endif;
		next;
		return(%return_boolean%);
	endfunction;
	
	// Coerces a given String to a Number (no decimal points).
		// Params:
			// {string} <&convert_string>	The String to Convert.
			// {number} [#precision=0]   	Decimal Precision
		// Returns the Number result of the coercion.
	function stringToNumber(&convert_string,#precision=0);
		#convert_number = coerceNumber(%&convert_string%);
		return(%#convert_number%);
	endfunction;
	
	function isStringBoolean(&check_string);
		if(%&check_string% == "");
			return_boolean = true;
		else;
			&boolean_coercable[] = split(", ","0, 1, true, false, True, False");
			#boolean_index       = indexof(&boolean_coercable[],,%&check_string%);
			return_boolean       = %#boolean_index% != -1;
		endif;
		return(%return_boolean%);
	endfunction;
	
	function stringToBoolean(&convert_string);
		is_coercable = isStringBoolean(%&convert_string%);
		if(%is_coercable%);
			return_boolean := %&convert_string%;
		elseifmatches(%&convert_string%,"\S");
			return_boolean  = true;
		else;
			return_boolean  = false;
		endif;
		return(%return_boolean%);
	endfunction;
	
	function regexEscape(&input_string);
		&split_array[]  = split("\\",%&input_string%);
		foreach(&split_array[],&curr_char,#curr_index);
			if(%&curr_char% == "\\");
				#last_index = #curr_index - 1;
				#next_index = #curr_index + 1;
				&last_char  = %&split_array[%#last_index%]%;
				&next_char  = %&split_array[%#next_index%]%;
				
				// If this backslash is escaped already (last char == '\'), then we do not need to escape this char.
				// If the backslash is escaping another backslash (next char == '\'), then we do not need to escape this char.
				if((%&last_char% != "\\") && (%&next_char% != "\\"));
					&rejoin_array[] = "\\";
				endif;
				&rejoin_array[] = %&curr_char%;
			else;
				&rejoin_array[] = %&curr_char%;
			endif;
		next;
		&rejoint_string = join("",&rejoin_array[]);
		&search_string  = "(?<!\\\\)(?:\+|\*|\?|\^|\$|\.|\[|\]|\{|\}|\(|\)|\||\/)";
		&escaped_string = regexreplace(&rejoint_string,%&search_string%,"\\\$0");
		return(%&escaped_string%);
	endfunction;
	
	// Converts a Number formatted in Exponential Notation (e.g. "3.172E10") to standard string decimal form.
		// Params:
			// {string} <&enote_string>	The E. Notation Number string to convert.
			//
		// Returns the Number coerced into a valid decimal float value. If a non-e-notation string is passed,
		// the input string is returned as-is.
	function convertENote(&convert_string);
		debug              = true;
		&script_debug_name = "&9convertENote&7";
		&convert_string    = replace(&convert_string,",");
		&return_string     = %&convert_string%;
		ifmatches(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$");
			match(%&convert_string%,"^(-)?(\d+)\.(\d+)(?:E|e)(-|\+)?(\d+)$",{&m_sign_num,&m_leading_num,&m_trailing_num,&m_sign_exponent,&m_exponent_num});
			output_negative   = %&m_sign_num% == "-";
			exponent_negative = %&m_sign_exponent% == "-";
			
			// Convert Scientific Notation to a Real Number
			// Multiply the decimal number by 10 raised to the power indicated.
			// 3.456 x 10^4  = 3.456 x 10,000 = 34560
			// 3.456 x 10^-4 = 3.456 x .0001  = 0.0003456
			//
			
			//    Convert Scientific Notation without a Calculator
			//    We’ve shown you how to convert a number expressed in scientific notation to a decimal by solving,
			//    but this would get more difficult to do manually as the exponent gets larger. There’s an alternate
			//    way to convert to decimal without solving the equation.
			//    
			//    If the exponent is positive, move the decimal point in the coefficient to the right one space for each
			//    value in the exponent.
			//    
			//    For instance, if the exponent is two, then move the decimal point to the right two spaces. If the exponent
			//    is negative, then move the decimal point to the left.
			//    
			//    For example, let’s convert 1.5 × 10^2 to a decimal using this method.
			//    
			//    1.5 × 10^2 = 15.0  × 10^1
			//    1.5 × 10^2 = 150.0 × 10^0
			//    1.5 × 10^2 = 150.0
			
			//    For a Positive Exponent (moving decimal point to the right)
				  //    1.396       x    10^6    =    13.96        x 10^5
				  //    13.96       x    10^5    =    139.6        x 10^4
				  //    139.6       x    10^4    =    1396.0       x 10^3
				  //    1396.0      x    10^3    =    13960.0      x 10^2
				  //    13960.0     x    10^2    =    139600.0     x 10^1
				  //    139600.0    x    10^1    =    1396000.0    x 10^0
				  //    1.396       x    10^6    =    1396000.0
			//    For a Negative Exponent (moving decimal point to the left)
				  //    1.396          x    10^-6    = 0.1396         x    10^-5
				  //    0.1396         x    10^-5    = 0.01396        x    10^-4
				  //    0.01396        x    10^-4    = 0.001396       x    10^-3
				  //    0.001396       x    10^-3    = 0.0001396      x    10^-2
				  //    0.0001396      x    10^-2    = 0.00001396     x    10^-1
				  //    0.00001396     x    10^-1    = 0.000001396    x    10^ 0
				  //    0.000001396    x    10^-6    = 0.000001396
			
			#m_exponent_num  := %&m_exponent_num%;
			&m_joint_chars    = "%&m_leading_num%.%&m_trailing_num%";
			&m_joint_chars[]  = split("",%&m_joint_chars%);
			do(%#m_exponent_num%);
				#m_joint_chars_sz   = arraysize(&m_joint_chars[]);
				#m_joint_chars_len  = %#m_joint_chars_sz% - 1;
				#curr_decimal_idx   = indexof(&m_joint_chars[],,".");
				if(!%exponent_negative%);
					#next_decimal_idx = %#curr_decimal_idx% + 1;
					if(%#next_decimal_idx% <= %#m_joint_chars_len%);
						&m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
						&m_joint_chars[%#next_decimal_idx%] = ".";
					else;
						&m_joint_chars[%#curr_decimal_idx%] = "0";
						&m_joint_chars[%#next_decimal_idx%] = ".";
					endif;
				else;
					#next_decimal_idx = %#curr_decimal_idx% - 1;
					if(%#next_decimal_idx% >= 0);
						&m_joint_chars[%#curr_decimal_idx%] = %&m_joint_chars[%#next_decimal_idx%]%;
						&m_joint_chars[%#next_decimal_idx%] = ".";
					else;
						unset(&tmp_joint_chars[]);
						&m_joint_chars[%#curr_decimal_idx%] = "0";
						push(&tmp_joint_chars[],".",&m_joint_chars[*]);
						unset(&m_joint_chars[]);
						push(&m_joint_chars[],&tmp_joint_chars[*]);
					endif;
				endif;
			loop;
			&return_string = join("",&m_joint_chars[]);
			&return_string = regexreplace(&return_string,"\.0*$");
			&return_string = regexreplace(&return_string,"^\.","0.");
			&return_string = "%&m_sign_num%%&return_string%";
		endif;
		return(%&return_string%);
	endfunction;

	// Identical to original `jsonget`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
		// Params:
			// {string} <&string_a>	The Key to get in the JSON Object, or the JSON Object itself.
			// {string} <&string_b> The Key to get in the JSON Object, or the JSON Object itself. Must be the other value compared to <&string_a>
		// Returns the value provided by `jsonget`, processed thru `convertENote`. Identical results, only difference is preservation of silently coerced Numbers.
	function xJsonGet(&string_a,&string_b);
		&return_string = jsonget(%&string_a%,%&string_b%);
		&return_string = convertENote(%&return_string%);
		return(%&return_string%);
	endfunction;

	// Identical to original `eval`, but passes the result of the function along to `convertENote` to ensure decimal values are conserved.
		// Params:
			// {string} <&expression>          	The arithmetic expression to evaluate with `eval`.
			// {boolean} [coerce_integer=false]	If true, will attempt to coerce the result of the evaluation from a decimal value into an integer.
		// Returns the result of `eval` passed through `convertENote`, and optionally coerced into an Integer if [coerce_integer] is True.
	function xEval(&expression,coerce_integer=false);
		debug              = false;
		&script_debug_name = "&9xEval&7";
		debug_log(%debug%,%&script_debug_name%,"evaluating '%&expression%', coerce_integer: %coerce_integer%.");
		&return_string     = eval(%&expression%);
		debug_log(%debug%,%&script_debug_name%,"got result: '&d%&return_string%&7', passing thru convertENote");
		&return_string     = convertENote(%&return_string%);
		debug_log(%debug%,%&script_debug_name%,"convertENote returned: '&d%&return_string%&7'");
		if(%coerce_integer%);
			debug_log(%debug%,%&script_debug_name%,"coercing '&d%&return_string%&7' to a number");
			&return_string = formatnumber(%&return_string%,0,true);
		endif;
		debug_log(%debug%,%&script_debug_name%,"returning '&d%&return_string%&7'");
		return(%&return_string%);
	endfunction;

	// Identical to original `formatnumber`, but passes the input_string through `convertENote` before passing it into `formatnumber`.
		// Params:
			// {string} <&input_string>      	The Number or String to Format into a Number. If this Number includes Commas, they will be stripped
			//                               	from the string passed to `formatnumber`.
			// {string} [&decimal_precision] 	The desired level of precision following the decimal. If omitted or an empty string, will
			//                               	include the amount of decimals included in the <&input_string>. If provided, should be an integer >= 0.
			//                               	If set to 0, will not include a decimal character or trail at all. Providing a value that is incoherent
			//                               	to the level of decimal precision present in the <&input_string> will result in the output being rounded
			//                               	to the desired level of precision.
			// {boolean} [strip_commas=false]	Whether or not to strip commas when formatting the Number. If set to True, and [&decimal_precision]
			//                               	is set to "0", this Function will return a valid Integer.
		// Returns the result of the `formatnumber` expression.
		// Examples:
			// Converting a formatted string Number to a valid Integer:
				//	&input_string      = "1009.0131";
				//	&decimal_precision = "0";
				//	strip_commas       = true;
				//	#output_integer    = xFormatNumber(%&input_string%,%&decimal_precision%,%strip_commas%);
			// Converting a valid Integer to a formatted (comma split) string:
				//	&input_string      = "10000";
				//	&decimal_precision = "";
				//	strip_commas       = false;
				//	&output_string     = xFormatNumber(%&input_string%,%&decimal_precision%,%strip_commas%);
	function xFormatNumber(&input_string,&decimal_precision,strip_commas=false);
		&return_string = replace(&input_string,",");
		&return_string = convertENote(%&return_string%);
		&return_string = formatnumber(%&return_string%,%&decimal_precision%,%strip_commas%);
		return(%&return_string%);
	endfunction;

	// Coerces an input number string into a valid integer. The input number string can be in E Notation, or contain
	// commas, or contain decimal values, or any mix of the above.
		// Params:
			// {string} <&number_string>            	The Number String to Convert into a valid Integer.
			// {string} [&rounding_strategy="ROUND"]	String ENUM that dictates how to handle decimal values. Valid values are:
			//                                      	FLOOR (towards negative infinity), CEILING|CEIL (towards positive infinity),
			//                                      	TRUNCATE|TRUNC (rounds up or down towards 0), ROUND (towards nearest integer).
			//                                      	Defaults to ROUND if omitted or an invalid input is provided.
		// Returns the Number coerced into a valid Integer (real-integer type, not string type. If the input string is not
		// coercable at all, 0 will be returned). If the final value before coercion to integer contains decimals, the coerced value
		// will be rounded according to the [&rounding_strategy] parameter.
		// Example:
			//	Converting a comma split, float string into an Integer
			  	//	&number_string     = "100,000.9171";
			  	//	&rounding_strategy = "ROUND";
			  	//	#number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
			  	//	log("#number_integer: %#number_integer%"); // '#number_integer: 100001'
			//	Replace the content in the Parameters as needed:
			  	//	&number_string     = "Can contain commas, decimals, e. notation, or mix of all three.";
			  	//	&rounding_strategy = "One of: FLOOR, CEILING|CEIL, TRUNCATE|TRUNC, ROUND, or empty string.";
			  	//	#number_integer    = coerceNumber(%&number_string%,%&rounding_strategy%);
	function coerceNumber(&number_string,&rounding_strategy="ROUND");
		&number_string = replace(&number_string,",");
		&number_string = convertENote(%&number_string%);
		ifcontains(%&number_string%,".");
			&rounding_strategy = miscValidate(%&rounding_strategy%,0,"ROUND","FLOOR","CEILING","CEIL","TRUNCATE","TRUNC");
			if(%&rounding_strategy% == "ROUND");
				// Round the decimal value to the nearest integer.
				&return_string = formatnumber(%&number_string%,0,true);
			elseif((%&rounding_strategy% == "TRUNCATE") || (%&rounding_strategy% == "TRUNC"));
				// Exclude the decimal value entirely.
				&return_string = regexreplace(&number_string,"\.\d*$");
			else;
				// Use xEval to evaluate the number_string with the corresponding rounding_term. Instruct
				// xEval to coerce the value into an integer for us, so any trailing ".0" is stripped from it's
				// return value.
				if((%&rounding_strategy% == "CEILING") || (%&rounding_strategy% == "CEIL"));
					&rounding_term = "ceil";
				elseif(%&rounding_strategy% == "FLOOR");
					&rounding_term = "floor";
				endif;
				&return_string = xEval("%&rounding_term%(%&number_string%)",true);
			endif;
		else;
			// The Number does not contain a decimal value to begin with, return as usual.
			&return_string = %&number_string%;
		endif;
		return(%&return_string%);
	endfunction;
	
	// Given a JSON Object, a Key, and a Value, either Edits the value of that Key within the Object to be the
	// Value, or adds the Key to that Object with that Value (depending on whether or not that Key is found within
	// the Object to begin with).
		// Params:
			// {string} <&json_object>	The JSON Object to set the value of the key inside of.
			// {string} <&json_key>   	The Key in the JSON Object to set the value for.
			// {string} [&json_value] 	The Value to set the Key in the JSON Object to. If omitted, will remove
			//                        	the Key from the JSON Object if it exists instead of setting the Value of
			//                        	the Key to an empty string. Note that this Function does not and will not
			//                        	wrap values in quotes, so wrap this value in escaped double quotes if necessary.
		// Returns the Edited JSON Object.
		// Example:
			//	&json_object = {"foo":"bar","baz":true};
			//	&json_key    = "baz";
			//	&json_value  = "false";
			//	&json_object = jsonEdit(%&json_object%,%&json_key%,%&json_value%);
			//	log(%&json_object%);
	function jsonEdit(&json_object,&json_key,&json_value);
		
	endfunction;
	
	// Takes an Input of a Time String and converts it into a Number of the specified Units, optionally formatting the Value.
		// Params:
			// {string} <&time_string>    	The Time String to Parse.
			// {string} [...&formatting[]]	Catch-all String Array of `<key>: <value>` pairs that dictate how to format
			//                            	the Return Value of this Function. Pairings are as follows:
			//                            	[unit: s]     : [y, mo, wk, d, h, m, s - The base unit to use in the conversion
			//                            	[comma: false]: {boolean} - Whether or not to use comma delimiters in the return value
			//                            	[float: 0]    : {number} - Amount of decimal values to round the return value off to in the return value.
		// Returns the Time String formatted according to the rules specified in [...&formatting]. By default,
		// this function will return the converted amount of Seconds as a valid Number without Commas, rounded off to nearest Integer.
		// Example:
			//	&time_string  = "1h 30m";
			//	#time_seconds = convertTimeString(%&time_string%,"unit: s","comma: false","float: 0");
			//	log(%#time_seconds%); // '5400'
	function convertTimeString(&time_string,...&formatting[]);
		// Setup Function Variables
		if(true);
			&script_debug_name = "&8convertTimeString&7";
			debug              = true;
			
			// Setup Defaults
			if(true);
				&format_unit  = "s";
				#format_float = 0;
				format_comma  = false;
			endif;
			
			// Setup Time Unit Map
			if(true);
				// Setup Time Unit Expressions
				if(true);
					&expr_year   = "([\d.]+).*?\by";
					&expr_month  = "([\d.]+).*?mo";
					&expr_week   = "([\d.]+).*?w";
					&expr_day    = "([\d.]+).*?d";
					&expr_hour   = "([\d.]+).*?h";
					&expr_minute = "([\d.]+).*?m(?!o)";
					&expr_second = "([\d.]+).*?\bs";
				endif;
				
				&map_time_unit_chars[] = split(", ","y, mo, wk, d, h, m, s");
				#map_time_unit_sec[]   = split(", ","31540000, 2628000, 604800, 86400, 3600, 60, 1");
				&map_time_unit_exprs[] = split(", ","&expr_year, &expr_month, &expr_week, &expr_day, &expr_hour, &expr_minute, &expr_second");
			endif;
			
			// Read Formatting Parameters
			if(true);
				foreach(&formatting[],&formatting_pair,#f);
					ifmatches(%&formatting_pair%,"^(UNIT|COMMA|FLOAT): (.+)$");
						match(%&formatting_pair%,"^(UNIT|COMMA|FLOAT): (.+)$",{&key,&value});
						&key = ucase(%&key%);
						if(%&key% == "UNIT");
							#map_time_unit_chars_index = indexof(&map_time_unit_chars[],,%&value%);
							if(%#map_time_unit_chars_index% != -1);
								&format_unit = ucase(%&value%);
							endif;
						elseif(%&key% == "COMMA");
							ifmatches(%&value%,"^true|false$");
								format_comma := lcase(%&value%);
							endif;
						elseif(%&key% == "FLOAT");
							ifmatches(%&value%,"^(\d+)$");
								#format_float := %&value%;
							endif;
						endif;
					endif;
				next;
				strip_commas = !%format_comma%;
				debug_log(%debug%,%&script_debug_name%,"formatting '&d%&time_string%&7' using unit: %&format_unit%, #format_float: %#format_float%, format_comma: %format_comma%, strip_commas: %strip_commas%");
			endif;
			
			// For each Time Unit, attempt to parse out the supplied Value for it.
			if(true);
				#max_integer    = 2147483645;
				#min_integer    = -2147483648;
				#div_factor_idx = indexof(&map_time_unit_chars[],,%&format_unit%);
				#div_factor     = %#map_time_unit_sec[%#div_factor_idx%]%;
				&extracted_sec  = "0";
				foreach(&map_time_unit_exprs[],&map_time_unit_expr,#mtue);
					debug_log(%debug%,%&script_debug_name%,"looking for match between %&time_string% and %%&map_time_unit_expr%%");
					ifmatches(%&time_string%,%%&map_time_unit_expr%%,&extracted_val,1);
						#conversion_sec = %#map_time_unit_sec[%#mtue%]%;
						debug_log(%debug%,%&script_debug_name%,"found %&extracted_val%x %&map_time_unit_chars[%#mtue%]% (conversion: %#conversion_sec%), adding to &&extracted_sec: %&extracted_sec%");
						&converted_sec  = xEval("%&extracted_val% * %#conversion_sec%");
						debug_log(%debug%,%&script_debug_name%,"converted_sec (%&extracted_val% * %#conversion_sec%) = %&converted_sec%");
						&extracted_sec  = xEval("(%&extracted_val% * %#conversion_sec%) + %&extracted_sec%");
					endif;
				next;
				
				&extracted_units = xEval("%&extracted_sec% / %#div_factor%");
				debug_log(%debug%,%&script_debug_name%,"got a total of %&extracted_units%x %&format_unit% (&&extracted_sec: %&extracted_sec% / #div_factor: %#div_factor%)");
				if(%#format_float% <= 0);
					// Need to check if <&extracted_units> is >= <#min_integer> and <= <#max_integer>. If it is, then we
					// can round it off and return it. If it is not, then we need to round it to the nearest boundary.
					in_bounds = floatWithinBounds(%&extracted_units%,%#max_integer%,%#min_integer%);
					if(!%in_bounds%);
						ifmatches(%&extracted_units%,"^-");
							&extracted_units = %#min_integer%;
						else;
							&extracted_units = %#max_integer%;
						endif;
					endif;
				endif;
				&return_string = xFormatNumber(%&extracted_units%,%#format_float%,%strip_commas%);
			endif;
			
			return(%&return_string%);
		endif;
	endfunction;
	
	// Checks if a String is a Metric String
		// Params:
			// {string} <&metric_string>	The String to check for a Metric Suffix (and/or Metric Suffixes)
			//
		// Returns a Boolean indicating whether or not the String is a Metric String
		// Example:
			//	is_metric = isMetricString(%&metric_string%);
	function isMetricString(&metric_string);
		&base_expression = "([\d,.-]+)(?:.*?\b|\B)(K|M|B|T)";
		ifmatches(%&metric_string%,%&base_expression%);
			return_boolean = true;
		endif;
		return(%return_boolean%);
	endfunction;
	
	// Takes an input of a string with metric numbers in it (e.g. '10K, '10.5M', etc) and parses out the metric character
	// then converts the input into a number and returns it. Supports K, M, B, T suffixes.
		// Params:
			// {string} <&metric_string>           	The String to Parse
			// {number} [#decimal_precision=-1]    	Amount of sig. figs to round the conversion off to. If set to <= -1, will just
			//                                     	format the number as-is (it will keep as many decimal places as it had in the first place).
			// {boolean} [format_with_commas=false]	Whether or not to format the conversion with commas every 3 characters.
		// Returns an Empty String if no conversion were able to be done, or a (possibly formatted) Number otherwise.
		// Example:
			//	#converted_units = convertMetricString("10K",2,true);
			//	log(%#converted_units%); // 10,000.00
	function convertMetricString(&metric_string,#decimal_precision=-1,format_with_commas=false);
		&base_expression = "([\d,.-]+)(?:.*?\b|\B)";
		&metric_chars[]  = split(", ","K, M, B, T");
		&metric_ratio[]  = split(", ","1000, 1000000, 1000000000, 1000000000000");
		&return_string   = "0";
		match_found      = false;
		foreach(&metric_chars[],&metric_char,#mc);
			&metric_expr = "%&base_expression%%&metric_char%";
			ifmatches(%&metric_string%,%&metric_expr%,&amount_units,1);
				match_found    = true
				&amount_units  = replace(&amount_units,",");
				&return_string = xEval("%&return_string% + (%&amount_units% * %&metric_ratio[%#mc%]%)");
			endif;
		next;
		
		if(%match_found%);
			strip_commas = !%format_with_commas%;
			if(%#decimal_precision% <= -1);
				&return_string = xFormatNumber(%&return_string%,"",%strip_commas%);
			else;
				&return_string = xFormatNumber(%&return_string%,%#decimal_precision%,%strip_commas%);
			endif;
			return(%&return_string%);
		else;
			return("");
		endif;
	endfunction;
	
	// Takes an input of a Number String and formats it into a Metric String (K, M, B, or T as suffix).
		// Params:
			// {string} <&convert_string>     	The Number String to convert.
			// {number} [#decimal_precision=1]	Amount of sig. figs to round the conversion off to. If set to <= -1, will just
			//                                	format the number as-is (it will keep as many decimal places as it had in the first place).
		// Returns a String.
		// Example:
			//	&metric_string = convertToMetric("151091.501",1);
			//	log(%&metric_string%); // 151.1 K
	function convertToMetric(&convert_string,#decimal_precision=1);
		// Setup Function Variables
		if(true);
			debug              = true;
			&script_debug_name = "&9convertToMetric&7";
			debug_log(%debug%,%&script_debug_name%,"called, args are &&convert_string='&e%&convert_string%&7', #decimal_precision=&e%#decimal_precision%");
		endif;
		&metric_chars[] = split(", ","K, M, B, T");
		&metric_ratio[] = split(", ","1000, 1000000, 1000000000, 1000000000000");
		&return_string  = %&convert_string%;
		ifmatches(%&convert_string%,"^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)",&integer_portion,2);
			log("&7matched expression '&d^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)&7' against string ")
			#component_a_len = strlen(%&integer_portion%);
			debug_log(%debug%,%&script_debug_name%,"matched expression '&d^(-|\+)?0*([1-9]\d*)(?:\.\d+$|$)&7' against &&convert_string='&e%&convert_string%&7', extracted &&integer_portion='&e%&integer_portion%&7' with length=&e%#component_a_len%&7.");
			#metric_index    = -1;
			foreach(&metric_ratio[],&metric_ratio,#mr);
				#metric_ratio_len = strlen(%&metric_ratio%);
				if(%#component_a_len% >= %#metric_ratio_len%);
					debug_log(%debug%,%&script_debug_name%,"metric_ratio_len=&e%#metric_ratio_len%&7 >= #component_a_len=&e%#component_a_len%&7, setting metric_index=&e%#mr%");
					#metric_index = %#mr%;
				endif;
			next;
			
			if(%#metric_index% >= 0);
				&metric_char   = %&metric_chars[%#metric_index%]%;
				&metric_ratio  = %&metric_ratio[%#metric_index%]%;
				&return_string = xEval("%&convert_string% / %&metric_ratio%");
				if(%#decimal_precision% <= -1);
					&return_string = xFormatNumber(%&return_string%);
				else;
					&return_string = xFormatNumber(%&return_string%,%#decimal_precision%);
				endif;
				&return_string = "%&return_string% %&metric_char%";
			endif;
		endif;
		return(%&return_string%);
	endfunction;
	
	// Calculates the 'Levenshtein Distance' between two Strings (the amount of character transformations required to
	// convert one string to the other, a lower value means the two Strings are more alike).
		// Params:
			// {string} <&string_a>	A string to calculate the distance between the other String Parameter in this Function.
			// {string} <&string_b>	A string to calculate the distance between the other String Parameter in this Function.
			// {number} [#max=-1]  	An optional maximum limit to the Levenshtein Distance calculate to. If provided, this Function
			//                     	will exit and return this maximum figure early, if it is ever detected that the minimum Edit Distance
			//                     	between these two strings is this figure.
		// Returns a Number >= 0.
		// Example:
			//	#edit_distance = calcLevenDist("CAT","DOG"); // 3
			//	#edit_distance = calcLevenDist("FOOBAR","FOO"); // 3
	function calcLevenDist(&string_a,&string_b,#max=-1);
		// Setup Function Variables
		if(true);
			debug              = true;
			&script_debug_name = "&5calcLevenDist&7";
		endif;
		
		&chars_a[] = split("",%&string_a%);
		#length_a  = strlen(%&string_a%);
		&chars_b[] = split("",%&string_b%);
		#length_b  = strlen(%&string_b%);
		#max_int   = 2000000000;
		
		// debug_log(%debug%,%&script_debug_name%,"&&string_a='&e%&string_a%&7', &&string_b='&e%&string_b%&7', #length_a=&e%#length_a%&7, #length_b=&e%#length_b%&7.");
		if(%#max% <= -1);
			// debug_log(%debug%,%&script_debug_name%,"set max from #max=&e%#max%&7 to #max_int=&e%#max_int%&7 since #max <= -1");
			#max = %#max_int%;
		endif;
		
		if((%#length_a% == 0) || (%#length_b% == 0));
			#max = %#max% + 1;
			if((%#length_a% <= %#length_b%) && (%#length_a% <= %#max%));
				#edit_dist = %#length_a%;
			elseif((%#length_b% <= %#length_a%) && (%#length_b% <= %#max%));
				#edit_dist = %#length_b%;
			else;
				#edit_dist = %#max%;
			endif;
			
			// debug_log(%debug%,%&script_debug_name%,"min of #length_a=&e%#length_a%&7, #length_b=&e%#length_b%&7, #max=&e%#max%&7 is #edit_dist=&a%#edit_dist%&7. Returning this.");
			return(%#edit_dist%);
		endif;
		
		#abs_diff = xEval("sqrt((%#length_a% - %#length_b%)^2)",true);
		if(%#abs_diff% > %#max%);
			#edit_dist = %#max% + 1;
			// debug_log(%debug%,%&script_debug_name%,"#abs_diff=&e%#abs_diff%&7 (from abs(#length_a=&e%#length_a%&7 - #length_b=&e%#length_b%&7)), returning #max=&e%#max%+1&7 (#edit_dist=&a%#edit_dist%&7).");
			return(%#edit_dist%);
		endif;
		
		
		for(#i,0,%#length_b%);
			set("&matrix_%#i%_0",%#i%);
			// debug_log(%debug%,%&script_debug_name%,"set &&matrix_%#i%_0=&e%#i%");
		next;
		
		for(#j,0,%#length_a%);
			set("&matrix_0_%#j%",%#j%);
			// debug_log(%debug%,%&script_debug_name%,"set &&matrix_0_%#j%=&e%#j%");
		next;
		
		for(#i,1,%#length_b%);
			#col_min = %#max_int%;
			#min_j   = 1;
			if(%#i% > %#max%);
				#new_j = %#max% + %#i%;
				// debug_log(%debug%,%&script_debug_name%,"overrode #min_j=&e%#min_j%&7 to #max=&e%#max%&7 + #i=&e%#i%&7 (&e%#new_j%&7)");
				#min_j = %#new_j%;
			endif;
			
			#max_j   = %#length_b% + 1;
			#max_j_t = %#max% + %#i%;
			if(%#max_j% > %#max_j_t%);
				// debug_log(%debug%,%&script_debug_name%,"overrode #max_j=&e%#max_j%&7 to #max_j_t=&e%#max_j_t%&7.");
				#max_j = %#max_j_t%;
			endif;
			
			for(#j,1,%#length_a%);
				&matrix_ptr = "&matrix_%#i%_%#j%";
				
				if((%#j% < %#min_j%) || (%#j% > %#max_j%));
					set(%&matrix_ptr%,%#max_j_t%)
					// debug_log(%debug%,%&script_debug_name%,"set &%&matrix_ptr%=&e%#max_j_t%&7 (#j=&e%#j%&7 < #min_j=&e%#min_j%&7 or #j=&e%#j%&7 > #max_j=&e%#max_j%&7)");
				else;
					#index_b = %#i% - 1;
					#index_a = %#j% - 1;
					&char_b  = %&chars_b[%#index_b%]%;
					&char_a  = %&chars_a[%#index_a%]%;
					// debug_log(%debug%,%&script_debug_name%,"#index_a=&e%#index_a%&7, #index_b=&e%#index_b%&7, &char_b='&e%&char_b%'&7, &char_a='&e%&char_a%&7'");
					if(%&chars_b[%#index_b%]% == %&chars_a[%#index_a%]%);
						&matrix_ptr_same  = "&matrix_%#index_b%_%#index_a%";
						#matrix_val_same := %%&matrix_ptr_same%%;
						set(%&matrix_ptr%,%#matrix_val_same%);
						// debug_log(%debug%,%&script_debug_name%,"set &%&matrix_ptr%=&e%#matrix_val_same%&7 (from &&matrix_ptr_same='&e%&matrix_ptr_same%&7')");
					else;
						&dist_sub  = "&matrix_%#index_b%_%#index_a%";
						#dist_sub := %%&dist_sub%%;
						#dist_sub  = %#dist_sub% + 1;
						
						&dist_ins  = "&matrix_%#i%_%#index_a%";
						#dist_ins := %%&dist_ins%%;
						#dist_ins  = %#dist_ins% + 1;
						
						&dist_del  = "&matrix_%#index_b%_%#j%";
						#dist_del := %%&dist_del%%;
						#dist_del  = %#dist_del% + 1;
						
						#dist_ins_del = %#dist_ins%;
						if(%#dist_del% < %#dist_ins%);
							#dist_ins_del = %#dist_del%;
						endif;
						
						// debug_log(%debug%,%&script_debug_name%,"min value of #dist_ins=&e%#dist_ins%&7, #dist_del=&e%#dist_del%&7 was #dist_ins_del=&c%#dist_ins_del%&7.");
						
						#dist_sub_del = %#dist_sub%;
						if(%#dist_ins_del% < %#dist_sub%);
							#dist_sub_del = %#dist_ins_del%;
						endif;
						
						// debug_log(%debug%,%&script_debug_name%,"min value of #dist_ins_del=&e%#dist_ins_del%&7, #dist_sub=&e%#dist_sub%&7 was #dist_sub_del=&c%#dist_sub_del%&7.");
						set(%&matrix_ptr%,%#dist_sub_del%);
						// debug_log(%debug%,%&script_debug_name%,"set &%&matrix_ptr%=&e%#dist_sub_del%&7 (#dist_sub_del)");
					endif;
				endif;
				
				#matrix_val := %%&matrix_ptr%%;
				if(%#matrix_val% < %#col_min%);
					// debug_log(%debug%,%&script_debug_name%,"#matrix_val=&e%#matrix_val%&7 < #col_min=&e%#col_min%&7, setting #col_min to be #matrix_val");
					#col_min = %#matrix_val%;
				endif;
			next;
			
			if(%#col_min% > %#max%);
				#edit_dist = %#max% + 1;
				// debug_log(%debug%,%&script_debug_name%,"#col_min=&e%#col_min%&7 > #max=&e%#max%&7, returning #max=&e%#max%+1&7 (#edit_dist=&e%#edit_dist%&7)");
				return(%#edit_dist%);
			endif;
		next;
		
		&edit_dist_ptr  = "&matrix_%#length_b%_%#length_a%";
		#edit_dist     := %%&edit_dist_ptr%%;
		// debug_log(%debug%,%&script_debug_name%,"&edit_dist_ptr='&e%&edit_dist_ptr%&7', #edit_dist=&e%#edit_dist%&7, returning this number");
		return(%#edit_dist%);
	endfunction;